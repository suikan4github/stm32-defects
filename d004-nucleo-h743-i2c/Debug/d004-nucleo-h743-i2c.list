
d004-nucleo-h743-i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a54  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f20  08009f20  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009f20  08009f20  00019f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f28  08009f28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f28  08009f28  00019f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f2c  08009f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  24000010  08009f40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400010c  08009f40  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019117  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027f1  00000000  00000000  00039155  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  0003b948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb0  00000000  00000000  0003c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035413  00000000  00000000  0003d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f858  00000000  00000000  000727b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001542f9  00000000  00000000  0008200b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d6304  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000385c  00000000  00000000  001d6380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009cd4 	.word	0x08009cd4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009cd4 	.word	0x08009cd4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005e0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <SCB_EnableICache+0x3c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <SCB_EnableICache+0x3c>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <SCB_EnableICache+0x3c>)
 80005fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000600:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000604:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000620:	2200      	movs	r2, #0
 8000622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000626:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <SCB_EnableDCache+0x7c>)
 800062c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000630:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	0b5b      	lsrs	r3, r3, #13
 8000636:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800063a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	08db      	lsrs	r3, r3, #3
 8000640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000644:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	015a      	lsls	r2, r3, #5
 800064a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800064e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000654:	490f      	ldr	r1, [pc, #60]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000656:	4313      	orrs	r3, r2
 8000658:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	1e5a      	subs	r2, r3, #1
 8000660:	60ba      	str	r2, [r7, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ef      	bne.n	8000646 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1e5      	bne.n	800063c <SCB_EnableDCache+0x24>
 8000670:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <SCB_EnableDCache+0x7c>)
 800067a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067e:	6153      	str	r3, [r2, #20]
 8000680:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000684:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_I2C_MasterTxCpltCallback>:
/*
 * Output a message when I2C interrupt is triggered.
 */

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    // Check if the interrupt is triggered for our I2C
    if (hi2c == &hi2c1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d107      	bne.n	80006b8 <HAL_I2C_MasterTxCpltCallback+0x20>
        while (1)
        {   // Comming here with NAK receive is buggy
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);    // Toggle Gree LED.
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 80006ac:	f001 fb54 	bl	8001d58 <HAL_GPIO_TogglePin>
            HAL_Delay(250);
 80006b0:	20fa      	movs	r0, #250	; 0xfa
 80006b2:	f000 fcaf 	bl	8001014 <HAL_Delay>
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);    // Toggle Gree LED.
 80006b6:	e7f7      	b.n	80006a8 <HAL_I2C_MasterTxCpltCallback+0x10>
        }
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	240000b8 	.word	0x240000b8
 80006c4:	58020400 	.word	0x58020400

080006c8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);    // turn on RED LED.
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <HAL_I2C_ErrorCallback+0x1c>)
 80006d8:	f001 fb0a 	bl	8001cf0 <HAL_GPIO_WritePin>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58020400 	.word	0x58020400

080006e8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */

    /* Enable I-Cache---------------------------------------------------------*/
    SCB_EnableICache();
 80006ec:	f7ff ff74 	bl	80005d8 <SCB_EnableICache>

    /* Enable D-Cache---------------------------------------------------------*/
    SCB_EnableDCache();
 80006f0:	f7ff ff92 	bl	8000618 <SCB_EnableDCache>

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80006f4:	f000 fbfc 	bl	8000ef0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80006f8:	f000 f812 	bl	8000720 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80006fc:	f000 f950 	bl	80009a0 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 8000700:	f000 f902 	bl	8000908 <MX_USART3_UART_Init>
    MX_I2C1_Init();
 8000704:	f000 f8c0 	bl	8000888 <MX_I2C1_Init>
     *
     * If the I2C bus is correctly pulled up, the address phase to the "vacant" address
     * is interpreted as NAK response immediately. This is specification of the I2C bus.
     */

    HAL_I2C_Master_Transmit_IT(
 8000708:	2300      	movs	r3, #0
 800070a:	4a03      	ldr	r2, [pc, #12]	; (8000718 <main+0x30>)
 800070c:	2102      	movs	r1, #2
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <main+0x34>)
 8000710:	f001 fc6e 	bl	8001ff0 <HAL_I2C_Master_Transmit_IT>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8000714:	e7fe      	b.n	8000714 <main+0x2c>
 8000716:	bf00      	nop
 8000718:	24000104 	.word	0x24000104
 800071c:	240000b8 	.word	0x240000b8

08000720 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b0cc      	sub	sp, #304	; 0x130
 8000724:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000726:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800072a:	224c      	movs	r2, #76	; 0x4c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f009 fac8 	bl	8009cc4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000734:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000738:	2220      	movs	r2, #32
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f009 fac1 	bl	8009cc4 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	4618      	mov	r0, r3
 8000748:	23bc      	movs	r3, #188	; 0xbc
 800074a:	461a      	mov	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f009 fab9 	bl	8009cc4 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000752:	2002      	movs	r0, #2
 8000754:	f003 fa1e 	bl	8003b94 <HAL_PWREx_ConfigSupply>
    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	4b48      	ldr	r3, [pc, #288]	; (8000880 <SystemClock_Config+0x160>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a47      	ldr	r2, [pc, #284]	; (8000880 <SystemClock_Config+0x160>)
 8000764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b45      	ldr	r3, [pc, #276]	; (8000880 <SystemClock_Config+0x160>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	4b43      	ldr	r3, [pc, #268]	; (8000884 <SystemClock_Config+0x164>)
 8000778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077a:	4a42      	ldr	r2, [pc, #264]	; (8000884 <SystemClock_Config+0x164>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000782:	4b40      	ldr	r3, [pc, #256]	; (8000884 <SystemClock_Config+0x164>)
 8000784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000786:	f003 0201 	and.w	r2, r3, #1
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000792:	bf00      	nop
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <SystemClock_Config+0x160>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800079c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a0:	d1f8      	bne.n	8000794 <SystemClock_Config+0x74>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a2:	2301      	movs	r3, #1
 80007a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	2302      	movs	r3, #2
 80007b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    RCC_OscInitStruct.PLL.PLLM = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    RCC_OscInitStruct.PLL.PLLN = 120;
 80007c2:	2378      	movs	r3, #120	; 0x78
 80007c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    RCC_OscInitStruct.PLL.PLLP = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ce:	2304      	movs	r3, #4
 80007d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    RCC_OscInitStruct.PLL.PLLR = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007da:	230c      	movs	r3, #12
 80007dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 fa15 	bl	8003c20 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xe0>
            {
        Error_Handler();
 80007fc:	f000 f9da 	bl	8000bb4 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000800:	233f      	movs	r3, #63	; 0x3f
 8000802:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2
            | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000812:	2308      	movs	r3, #8
 8000814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000818:	2340      	movs	r3, #64	; 0x40
 800081a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800081e:	2340      	movs	r3, #64	; 0x40
 8000820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000828:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000832:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000836:	2104      	movs	r1, #4
 8000838:	4618      	mov	r0, r3
 800083a:	f003 feef 	bl	800461c <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x128>
            {
        Error_Handler();
 8000844:	f000 f9b6 	bl	8000bb4 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1;
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	220a      	movs	r2, #10
 800084e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2200      	movs	r2, #0
 8000856:	675a      	str	r2, [r3, #116]	; 0x74
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2200      	movs	r2, #0
 800085e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	4618      	mov	r0, r3
 8000868:	f004 fc16 	bl	8005098 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x156>
            {
        Error_Handler();
 8000872:	f000 f99f 	bl	8000bb4 <Error_Handler>
    }
}
 8000876:	bf00      	nop
 8000878:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	58024800 	.word	0x58024800
 8000884:	58000400 	.word	0x58000400

08000888 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_I2C1_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <MX_I2C1_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x307075B1;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_I2C1_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <MX_I2C1_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_I2C1_Init+0x74>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c2:	480e      	ldr	r0, [pc, #56]	; (80008fc <MX_I2C1_Init+0x74>)
 80008c4:	f001 fa72 	bl	8001dac <HAL_I2C_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C1_Init+0x4a>
            {
        Error_Handler();
 80008ce:	f000 f971 	bl	8000bb4 <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_I2C1_Init+0x74>)
 80008d6:	f003 f873 	bl	80039c0 <HAL_I2CEx_ConfigAnalogFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x5c>
            {
        Error_Handler();
 80008e0:	f000 f968 	bl	8000bb4 <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_I2C1_Init+0x74>)
 80008e8:	f003 f8e0 	bl	8003aac <HAL_I2CEx_ConfigDigitalFilter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x6e>
            {
        Error_Handler();
 80008f2:	f000 f95f 	bl	8000bb4 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	240000b8 	.word	0x240000b8
 8000900:	40005400 	.word	0x40005400
 8000904:	307075b1 	.word	0x307075b1

08000908 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_USART3_UART_Init+0x90>)
 800090e:	4a23      	ldr	r2, [pc, #140]	; (800099c <MX_USART3_UART_Init+0x94>)
 8000910:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_USART3_UART_Init+0x90>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_USART3_UART_Init+0x90>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_USART3_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_USART3_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART3_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK)
 8000950:	4811      	ldr	r0, [pc, #68]	; (8000998 <MX_USART3_UART_Init+0x90>)
 8000952:	f006 fa17 	bl	8006d84 <HAL_UART_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x58>
            {
        Error_Handler();
 800095c:	f000 f92a 	bl	8000bb4 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_USART3_UART_Init+0x90>)
 8000964:	f008 ffee 	bl	8009944 <HAL_UARTEx_SetTxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART3_UART_Init+0x6a>
            {
        Error_Handler();
 800096e:	f000 f921 	bl	8000bb4 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <MX_USART3_UART_Init+0x90>)
 8000976:	f009 f87f 	bl	8009a78 <HAL_UARTEx_SetRxFifoThreshold>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USART3_UART_Init+0x7c>
            {
        Error_Handler();
 8000980:	f000 f918 	bl	8000bb4 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_USART3_UART_Init+0x90>)
 8000986:	f008 ff67 	bl	8009858 <HAL_UARTEx_DisableFifoMode>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART3_UART_Init+0x8c>
            {
        Error_Handler();
 8000990:	f000 f910 	bl	8000bb4 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2400002c 	.word	0x2400002c
 800099c:	40004800 	.word	0x40004800

080009a0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b79      	ldr	r3, [pc, #484]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	4a77      	ldr	r2, [pc, #476]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c6:	4b75      	ldr	r3, [pc, #468]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
 80009d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d4:	4b71      	ldr	r3, [pc, #452]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	4a70      	ldr	r2, [pc, #448]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e4:	4b6d      	ldr	r3, [pc, #436]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b6a      	ldr	r3, [pc, #424]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a68      	ldr	r2, [pc, #416]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b66      	ldr	r3, [pc, #408]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b62      	ldr	r3, [pc, #392]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	4a61      	ldr	r2, [pc, #388]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a20:	4b5e      	ldr	r3, [pc, #376]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2e:	4b5b      	ldr	r3, [pc, #364]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	4a59      	ldr	r2, [pc, #356]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3e:	4b57      	ldr	r3, [pc, #348]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a4c:	4b53      	ldr	r3, [pc, #332]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	4a52      	ldr	r2, [pc, #328]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5c:	4b4f      	ldr	r3, [pc, #316]	; (8000b9c <MX_GPIO_Init+0x1fc>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a70:	484b      	ldr	r0, [pc, #300]	; (8000ba0 <MX_GPIO_Init+0x200>)
 8000a72:	f001 f93d 	bl	8001cf0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	484a      	ldr	r0, [pc, #296]	; (8000ba4 <MX_GPIO_Init+0x204>)
 8000a7c:	f001 f938 	bl	8001cf0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	4b48      	ldr	r3, [pc, #288]	; (8000ba8 <MX_GPIO_Init+0x208>)
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4845      	ldr	r0, [pc, #276]	; (8000bac <MX_GPIO_Init+0x20c>)
 8000a96:	f000 fe7b 	bl	8001790 <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
    GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000a9a:	2332      	movs	r3, #50	; 0x32
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aaa:	230b      	movs	r3, #11
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	483d      	ldr	r0, [pc, #244]	; (8000bac <MX_GPIO_Init+0x20c>)
 8000ab6:	f000 fe6b 	bl	8001790 <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8000aba:	2386      	movs	r3, #134	; 0x86
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aca:	230b      	movs	r3, #11
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4836      	ldr	r0, [pc, #216]	; (8000bb0 <MX_GPIO_Init+0x210>)
 8000ad6:	f000 fe5b 	bl	8001790 <HAL_GPIO_Init>

    /*Configure GPIO pin : RMII_TXD1_Pin */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aec:	230b      	movs	r3, #11
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	482a      	ldr	r0, [pc, #168]	; (8000ba0 <MX_GPIO_Init+0x200>)
 8000af8:	f000 fe4a 	bl	8001790 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD3_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8000afc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4822      	ldr	r0, [pc, #136]	; (8000ba0 <MX_GPIO_Init+0x200>)
 8000b16:	f000 fe3b 	bl	8001790 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b1a:	2340      	movs	r3, #64	; 0x40
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <MX_GPIO_Init+0x204>)
 8000b32:	f000 fe2d 	bl	8001790 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4816      	ldr	r0, [pc, #88]	; (8000ba4 <MX_GPIO_Init+0x204>)
 8000b4a:	f000 fe21 	bl	8001790 <HAL_GPIO_Init>

    /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
    GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8000b4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b60:	230a      	movs	r3, #10
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_GPIO_Init+0x210>)
 8000b6c:	f000 fe10 	bl	8001790 <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000b70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_GPIO_Init+0x204>)
 8000b8e:	f000 fdff 	bl	8001790 <HAL_GPIO_Init>

}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	; 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	58020400 	.word	0x58020400
 8000ba4:	58021800 	.word	0x58021800
 8000ba8:	11110000 	.word	0x11110000
 8000bac:	58020800 	.word	0x58020800
 8000bb0:	58020000 	.word	0x58020000

08000bb4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_MspInit+0x30>)
 8000be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x30>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x30>)
 8000bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	58024400 	.word	0x58024400

08000c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <HAL_I2C_MspInit+0xa8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d13e      	bne.n	8000cac <HAL_I2C_MspInit+0xa0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <HAL_I2C_MspInit+0xac>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a20      	ldr	r2, [pc, #128]	; (8000cb8 <HAL_I2C_MspInit+0xac>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <HAL_I2C_MspInit+0xac>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c52:	2312      	movs	r3, #18
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4814      	ldr	r0, [pc, #80]	; (8000cbc <HAL_I2C_MspInit+0xb0>)
 8000c6a:	f000 fd91 	bl	8001790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_I2C_MspInit+0xac>)
 8000c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c74:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_I2C_MspInit+0xac>)
 8000c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_I2C_MspInit+0xac>)
 8000c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	201f      	movs	r0, #31
 8000c92:	f000 fadd 	bl	8001250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c96:	201f      	movs	r0, #31
 8000c98:	f000 fb04 	bl	80012a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2020      	movs	r0, #32
 8000ca2:	f000 fad5 	bl	8001250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ca6:	2020      	movs	r0, #32
 8000ca8:	f000 fafc 	bl	80012a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	58024400 	.word	0x58024400
 8000cbc:	58020400 	.word	0x58020400

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <HAL_UART_MspInit+0x88>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12e      	bne.n	8000d40 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce8:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000cea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d30:	2307      	movs	r3, #7
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_UART_MspInit+0x90>)
 8000d3c:	f000 fd28 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40004800 	.word	0x40004800
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020c00 	.word	0x58020c00

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da8:	f000 f914 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <I2C1_EV_IRQHandler+0x10>)
 8000db6:	f001 f98b 	bl	80020d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	240000b8 	.word	0x240000b8

08000dc4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <I2C1_ER_IRQHandler+0x10>)
 8000dca:	f001 f99b 	bl	8002104 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	240000b8 	.word	0x240000b8

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <SystemInit+0xac>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <SystemInit+0xac>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <SystemInit+0xb0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a25      	ldr	r2, [pc, #148]	; (8000e88 <SystemInit+0xb0>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <SystemInit+0xb0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <SystemInit+0xb0>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4921      	ldr	r1, [pc, #132]	; (8000e88 <SystemInit+0xb0>)
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <SystemInit+0xb4>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <SystemInit+0xb0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <SystemInit+0xb0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <SystemInit+0xb0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <SystemInit+0xb0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <SystemInit+0xb0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <SystemInit+0xb0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <SystemInit+0xb0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <SystemInit+0xb0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <SystemInit+0xb0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <SystemInit+0xb0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <SystemInit+0xb0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <SystemInit+0xb0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <SystemInit+0xb0>)
 8000e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <SystemInit+0xb0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <SystemInit+0xb8>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <SystemInit+0xbc>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e6a:	d202      	bcs.n	8000e72 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <SystemInit+0xc0>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SystemInit+0xac>)
 8000e74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e78:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e90:	5c001000 	.word	0x5c001000
 8000e94:	ffff0000 	.word	0xffff0000
 8000e98:	51008108 	.word	0x51008108

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ea0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ea2:	e003      	b.n	8000eac <LoopCopyDataInit>

08000ea4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ea6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ea8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eaa:	3104      	adds	r1, #4

08000eac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000eb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eb4:	d3f6      	bcc.n	8000ea4 <CopyDataInit>
  ldr  r2, =_sbss
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eb8:	e002      	b.n	8000ec0 <LoopFillZerobss>

08000eba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ebc:	f842 3b04 	str.w	r3, [r2], #4

08000ec0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ec2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ec4:	d3f9      	bcc.n	8000eba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ec6:	f7ff ff87 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f008 fed7 	bl	8009c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fc0b 	bl	80006e8 <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000ed8:	08009f30 	.word	0x08009f30
  ldr  r0, =_sdata
 8000edc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000ee0:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000ee4:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000ee8:	2400010c 	.word	0x2400010c

08000eec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC3_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f000 f98a 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000efc:	f003 fefe 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8000f00:	4601      	mov	r1, r0
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_Init+0x68>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <HAL_Init+0x6c>)
 8000f0e:	5cd3      	ldrb	r3, [r2, r3]
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	fa21 f303 	lsr.w	r3, r1, r3
 8000f18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_Init+0x68>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_Init+0x6c>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_Init+0x70>)
 8000f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f34:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_Init+0x74>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f814 	bl	8000f68 <HAL_InitTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e002      	b.n	8000f50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff fe45 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	08009f10 	.word	0x08009f10
 8000f60:	24000004 	.word	0x24000004
 8000f64:	24000000 	.word	0x24000000

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_InitTick+0x60>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e021      	b.n	8000fc0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <HAL_InitTick+0x64>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_InitTick+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f99e 	bl	80012d4 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb0:	f000 f94e 	bl	8001250 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x68>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2400000c 	.word	0x2400000c
 8000fcc:	24000000 	.word	0x24000000
 8000fd0:	24000008 	.word	0x24000008

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2400000c 	.word	0x2400000c
 8000ff8:	24000108 	.word	0x24000108

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	24000108 	.word	0x24000108

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_Delay+0x40>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2400000c 	.word	0x2400000c

08001058 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetREVID+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0c1b      	lsrs	r3, r3, #16
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	5c001000 	.word	0x5c001000

08001070 <__NVIC_SetPriorityGrouping>:
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	4313      	orrs	r3, r2
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x40>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00
 80010b4:	05fa0000 	.word	0x05fa0000

080010b8 <__NVIC_GetPriorityGrouping>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b07      	cmp	r3, #7
 800121c:	d00f      	beq.n	800123e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b06      	cmp	r3, #6
 8001222:	d00c      	beq.n	800123e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d009      	beq.n	800123e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b04      	cmp	r3, #4
 800122e:	d006      	beq.n	800123e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d003      	beq.n	800123e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001236:	2192      	movs	r1, #146	; 0x92
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800123a:	f7ff fcc2 	bl	8000bc2 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff16 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	08009cec 	.word	0x08009cec

08001250 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d903      	bls.n	800126c <HAL_NVIC_SetPriority+0x1c>
 8001264:	21aa      	movs	r1, #170	; 0xaa
 8001266:	480e      	ldr	r0, [pc, #56]	; (80012a0 <HAL_NVIC_SetPriority+0x50>)
 8001268:	f7ff fcab 	bl	8000bc2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	d903      	bls.n	800127a <HAL_NVIC_SetPriority+0x2a>
 8001272:	21ab      	movs	r1, #171	; 0xab
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <HAL_NVIC_SetPriority+0x50>)
 8001276:	f7ff fca4 	bl	8000bc2 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800127a:	f7ff ff1d 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 800127e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	6978      	ldr	r0, [r7, #20]
 8001286:	f7ff ff6d 	bl	8001164 <NVIC_EncodePriority>
 800128a:	4602      	mov	r2, r0
 800128c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff3c 	bl	8001110 <__NVIC_SetPriority>
}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	08009cec 	.word	0x08009cec

080012a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80012ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da03      	bge.n	80012be <HAL_NVIC_EnableIRQ+0x1a>
 80012b6:	21be      	movs	r1, #190	; 0xbe
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <HAL_NVIC_EnableIRQ+0x2c>)
 80012ba:	f7ff fc82 	bl	8000bc2 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff06 	bl	80010d4 <__NVIC_EnableIRQ>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	08009cec 	.word	0x08009cec

080012d4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff75 	bl	80011cc <SysTick_Config>
 80012e2:	4603      	mov	r3, r0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e205      	b.n	800170a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d004      	beq.n	8001314 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e1fa      	b.n	800170a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a8c      	ldr	r2, [pc, #560]	; (800154c <HAL_DMA_Abort_IT+0x260>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d04a      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a8b      	ldr	r2, [pc, #556]	; (8001550 <HAL_DMA_Abort_IT+0x264>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d045      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a89      	ldr	r2, [pc, #548]	; (8001554 <HAL_DMA_Abort_IT+0x268>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d040      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a88      	ldr	r2, [pc, #544]	; (8001558 <HAL_DMA_Abort_IT+0x26c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d03b      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a86      	ldr	r2, [pc, #536]	; (800155c <HAL_DMA_Abort_IT+0x270>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d036      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a85      	ldr	r2, [pc, #532]	; (8001560 <HAL_DMA_Abort_IT+0x274>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d031      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a83      	ldr	r2, [pc, #524]	; (8001564 <HAL_DMA_Abort_IT+0x278>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02c      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a82      	ldr	r2, [pc, #520]	; (8001568 <HAL_DMA_Abort_IT+0x27c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d027      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a80      	ldr	r2, [pc, #512]	; (800156c <HAL_DMA_Abort_IT+0x280>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d022      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a7f      	ldr	r2, [pc, #508]	; (8001570 <HAL_DMA_Abort_IT+0x284>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d01d      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a7d      	ldr	r2, [pc, #500]	; (8001574 <HAL_DMA_Abort_IT+0x288>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d018      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a7c      	ldr	r2, [pc, #496]	; (8001578 <HAL_DMA_Abort_IT+0x28c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d013      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a7a      	ldr	r2, [pc, #488]	; (800157c <HAL_DMA_Abort_IT+0x290>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00e      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a79      	ldr	r2, [pc, #484]	; (8001580 <HAL_DMA_Abort_IT+0x294>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d009      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a77      	ldr	r2, [pc, #476]	; (8001584 <HAL_DMA_Abort_IT+0x298>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d004      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a76      	ldr	r2, [pc, #472]	; (8001588 <HAL_DMA_Abort_IT+0x29c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_DMA_Abort_IT+0xcc>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_DMA_Abort_IT+0xce>
 80013b8:	2300      	movs	r3, #0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d065      	beq.n	800148a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2204      	movs	r2, #4
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a60      	ldr	r2, [pc, #384]	; (800154c <HAL_DMA_Abort_IT+0x260>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d04a      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <HAL_DMA_Abort_IT+0x264>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d045      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a5d      	ldr	r2, [pc, #372]	; (8001554 <HAL_DMA_Abort_IT+0x268>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d040      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a5b      	ldr	r2, [pc, #364]	; (8001558 <HAL_DMA_Abort_IT+0x26c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d03b      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a5a      	ldr	r2, [pc, #360]	; (800155c <HAL_DMA_Abort_IT+0x270>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d036      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_DMA_Abort_IT+0x274>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d031      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a57      	ldr	r2, [pc, #348]	; (8001564 <HAL_DMA_Abort_IT+0x278>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d02c      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a55      	ldr	r2, [pc, #340]	; (8001568 <HAL_DMA_Abort_IT+0x27c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d027      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a54      	ldr	r2, [pc, #336]	; (800156c <HAL_DMA_Abort_IT+0x280>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d022      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_DMA_Abort_IT+0x284>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d01d      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a51      	ldr	r2, [pc, #324]	; (8001574 <HAL_DMA_Abort_IT+0x288>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d018      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <HAL_DMA_Abort_IT+0x28c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a4e      	ldr	r2, [pc, #312]	; (800157c <HAL_DMA_Abort_IT+0x290>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00e      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a4c      	ldr	r2, [pc, #304]	; (8001580 <HAL_DMA_Abort_IT+0x294>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d009      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a4b      	ldr	r2, [pc, #300]	; (8001584 <HAL_DMA_Abort_IT+0x298>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d004      	beq.n	8001466 <HAL_DMA_Abort_IT+0x17a>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a49      	ldr	r2, [pc, #292]	; (8001588 <HAL_DMA_Abort_IT+0x29c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d108      	bne.n	8001478 <HAL_DMA_Abort_IT+0x18c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e147      	b.n	8001708 <HAL_DMA_Abort_IT+0x41c>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e13e      	b.n	8001708 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 020e 	bic.w	r2, r2, #14
 8001498:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a2b      	ldr	r2, [pc, #172]	; (800154c <HAL_DMA_Abort_IT+0x260>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d04a      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a29      	ldr	r2, [pc, #164]	; (8001550 <HAL_DMA_Abort_IT+0x264>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d045      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a28      	ldr	r2, [pc, #160]	; (8001554 <HAL_DMA_Abort_IT+0x268>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d040      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a26      	ldr	r2, [pc, #152]	; (8001558 <HAL_DMA_Abort_IT+0x26c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d03b      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a25      	ldr	r2, [pc, #148]	; (800155c <HAL_DMA_Abort_IT+0x270>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d036      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a23      	ldr	r2, [pc, #140]	; (8001560 <HAL_DMA_Abort_IT+0x274>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d031      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a22      	ldr	r2, [pc, #136]	; (8001564 <HAL_DMA_Abort_IT+0x278>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d02c      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a20      	ldr	r2, [pc, #128]	; (8001568 <HAL_DMA_Abort_IT+0x27c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d027      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1f      	ldr	r2, [pc, #124]	; (800156c <HAL_DMA_Abort_IT+0x280>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d022      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_DMA_Abort_IT+0x284>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d01d      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <HAL_DMA_Abort_IT+0x288>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d018      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1a      	ldr	r2, [pc, #104]	; (8001578 <HAL_DMA_Abort_IT+0x28c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_DMA_Abort_IT+0x290>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00e      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_DMA_Abort_IT+0x294>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d009      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a16      	ldr	r2, [pc, #88]	; (8001584 <HAL_DMA_Abort_IT+0x298>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d004      	beq.n	800153a <HAL_DMA_Abort_IT+0x24e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <HAL_DMA_Abort_IT+0x29c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d128      	bne.n	800158c <HAL_DMA_Abort_IT+0x2a0>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e027      	b.n	800159c <HAL_DMA_Abort_IT+0x2b0>
 800154c:	40020010 	.word	0x40020010
 8001550:	40020028 	.word	0x40020028
 8001554:	40020040 	.word	0x40020040
 8001558:	40020058 	.word	0x40020058
 800155c:	40020070 	.word	0x40020070
 8001560:	40020088 	.word	0x40020088
 8001564:	400200a0 	.word	0x400200a0
 8001568:	400200b8 	.word	0x400200b8
 800156c:	40020410 	.word	0x40020410
 8001570:	40020428 	.word	0x40020428
 8001574:	40020440 	.word	0x40020440
 8001578:	40020458 	.word	0x40020458
 800157c:	40020470 	.word	0x40020470
 8001580:	40020488 	.word	0x40020488
 8001584:	400204a0 	.word	0x400204a0
 8001588:	400204b8 	.word	0x400204b8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a5c      	ldr	r2, [pc, #368]	; (8001714 <HAL_DMA_Abort_IT+0x428>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d072      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a5b      	ldr	r2, [pc, #364]	; (8001718 <HAL_DMA_Abort_IT+0x42c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d06d      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a59      	ldr	r2, [pc, #356]	; (800171c <HAL_DMA_Abort_IT+0x430>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d068      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a58      	ldr	r2, [pc, #352]	; (8001720 <HAL_DMA_Abort_IT+0x434>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d063      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a56      	ldr	r2, [pc, #344]	; (8001724 <HAL_DMA_Abort_IT+0x438>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d05e      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a55      	ldr	r2, [pc, #340]	; (8001728 <HAL_DMA_Abort_IT+0x43c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d059      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a53      	ldr	r2, [pc, #332]	; (800172c <HAL_DMA_Abort_IT+0x440>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d054      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a52      	ldr	r2, [pc, #328]	; (8001730 <HAL_DMA_Abort_IT+0x444>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d04f      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a50      	ldr	r2, [pc, #320]	; (8001734 <HAL_DMA_Abort_IT+0x448>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d04a      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <HAL_DMA_Abort_IT+0x44c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d045      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a4d      	ldr	r2, [pc, #308]	; (800173c <HAL_DMA_Abort_IT+0x450>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d040      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a4c      	ldr	r2, [pc, #304]	; (8001740 <HAL_DMA_Abort_IT+0x454>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d03b      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a4a      	ldr	r2, [pc, #296]	; (8001744 <HAL_DMA_Abort_IT+0x458>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d036      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a49      	ldr	r2, [pc, #292]	; (8001748 <HAL_DMA_Abort_IT+0x45c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d031      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a47      	ldr	r2, [pc, #284]	; (800174c <HAL_DMA_Abort_IT+0x460>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d02c      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a46      	ldr	r2, [pc, #280]	; (8001750 <HAL_DMA_Abort_IT+0x464>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d027      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a44      	ldr	r2, [pc, #272]	; (8001754 <HAL_DMA_Abort_IT+0x468>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d022      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a43      	ldr	r2, [pc, #268]	; (8001758 <HAL_DMA_Abort_IT+0x46c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d01d      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a41      	ldr	r2, [pc, #260]	; (800175c <HAL_DMA_Abort_IT+0x470>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d018      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a40      	ldr	r2, [pc, #256]	; (8001760 <HAL_DMA_Abort_IT+0x474>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d013      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a3e      	ldr	r2, [pc, #248]	; (8001764 <HAL_DMA_Abort_IT+0x478>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00e      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a3d      	ldr	r2, [pc, #244]	; (8001768 <HAL_DMA_Abort_IT+0x47c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d009      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a3b      	ldr	r2, [pc, #236]	; (800176c <HAL_DMA_Abort_IT+0x480>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d004      	beq.n	800168c <HAL_DMA_Abort_IT+0x3a0>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a3a      	ldr	r2, [pc, #232]	; (8001770 <HAL_DMA_Abort_IT+0x484>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_DMA_Abort_IT+0x3a4>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_DMA_Abort_IT+0x3a6>
 8001690:	2300      	movs	r3, #0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d028      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	2201      	movs	r2, #1
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80016c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00c      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80016e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40020010 	.word	0x40020010
 8001718:	40020028 	.word	0x40020028
 800171c:	40020040 	.word	0x40020040
 8001720:	40020058 	.word	0x40020058
 8001724:	40020070 	.word	0x40020070
 8001728:	40020088 	.word	0x40020088
 800172c:	400200a0 	.word	0x400200a0
 8001730:	400200b8 	.word	0x400200b8
 8001734:	40020410 	.word	0x40020410
 8001738:	40020428 	.word	0x40020428
 800173c:	40020440 	.word	0x40020440
 8001740:	40020458 	.word	0x40020458
 8001744:	40020470 	.word	0x40020470
 8001748:	40020488 	.word	0x40020488
 800174c:	400204a0 	.word	0x400204a0
 8001750:	400204b8 	.word	0x400204b8
 8001754:	58025408 	.word	0x58025408
 8001758:	5802541c 	.word	0x5802541c
 800175c:	58025430 	.word	0x58025430
 8001760:	58025444 	.word	0x58025444
 8001764:	58025458 	.word	0x58025458
 8001768:	5802546c 	.word	0x5802546c
 800176c:	58025480 	.word	0x58025480
 8001770:	58025494 	.word	0x58025494

08001774 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001782:	b2db      	uxtb	r3, r3
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_GPIO_Init+0x12c>)
 80017a0:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a46      	ldr	r2, [pc, #280]	; (80018c0 <HAL_GPIO_Init+0x130>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d02b      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a45      	ldr	r2, [pc, #276]	; (80018c4 <HAL_GPIO_Init+0x134>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d027      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a44      	ldr	r2, [pc, #272]	; (80018c8 <HAL_GPIO_Init+0x138>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d023      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a43      	ldr	r2, [pc, #268]	; (80018cc <HAL_GPIO_Init+0x13c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01f      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a42      	ldr	r2, [pc, #264]	; (80018d0 <HAL_GPIO_Init+0x140>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01b      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a41      	ldr	r2, [pc, #260]	; (80018d4 <HAL_GPIO_Init+0x144>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d017      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a40      	ldr	r2, [pc, #256]	; (80018d8 <HAL_GPIO_Init+0x148>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a3f      	ldr	r2, [pc, #252]	; (80018dc <HAL_GPIO_Init+0x14c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00f      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a3e      	ldr	r2, [pc, #248]	; (80018e0 <HAL_GPIO_Init+0x150>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d00b      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a3d      	ldr	r2, [pc, #244]	; (80018e4 <HAL_GPIO_Init+0x154>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a3c      	ldr	r2, [pc, #240]	; (80018e8 <HAL_GPIO_Init+0x158>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x72>
 80017fa:	21bb      	movs	r1, #187	; 0xbb
 80017fc:	483b      	ldr	r0, [pc, #236]	; (80018ec <HAL_GPIO_Init+0x15c>)
 80017fe:	f7ff f9e0 	bl	8000bc2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_GPIO_Init+0x88>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_GPIO_Init+0x160>)
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x90>
 8001818:	21bc      	movs	r1, #188	; 0xbc
 800181a:	4834      	ldr	r0, [pc, #208]	; (80018ec <HAL_GPIO_Init+0x15c>)
 800181c:	f7ff f9d1 	bl	8000bc2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d035      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d031      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b11      	cmp	r3, #17
 8001836:	d02d      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d029      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b12      	cmp	r3, #18
 8001846:	d025      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <HAL_GPIO_Init+0x164>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d020      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <HAL_GPIO_Init+0x168>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d01b      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <HAL_GPIO_Init+0x16c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d016      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a25      	ldr	r2, [pc, #148]	; (8001900 <HAL_GPIO_Init+0x170>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d011      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a23      	ldr	r2, [pc, #140]	; (8001904 <HAL_GPIO_Init+0x174>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00c      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4a22      	ldr	r2, [pc, #136]	; (8001908 <HAL_GPIO_Init+0x178>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d007      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x104>
 800188c:	21bd      	movs	r1, #189	; 0xbd
 800188e:	4817      	ldr	r0, [pc, #92]	; (80018ec <HAL_GPIO_Init+0x15c>)
 8001890:	f7ff f997 	bl	8000bc2 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 821a 	beq.w	8001cd2 <HAL_GPIO_Init+0x542>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	f000 8215 	beq.w	8001cd2 <HAL_GPIO_Init+0x542>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	f000 8210 	beq.w	8001cd2 <HAL_GPIO_Init+0x542>
 80018b2:	21be      	movs	r1, #190	; 0xbe
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <HAL_GPIO_Init+0x15c>)
 80018b6:	f7ff f984 	bl	8000bc2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018ba:	e20a      	b.n	8001cd2 <HAL_GPIO_Init+0x542>
 80018bc:	58000080 	.word	0x58000080
 80018c0:	58020000 	.word	0x58020000
 80018c4:	58020400 	.word	0x58020400
 80018c8:	58020800 	.word	0x58020800
 80018cc:	58020c00 	.word	0x58020c00
 80018d0:	58021000 	.word	0x58021000
 80018d4:	58021400 	.word	0x58021400
 80018d8:	58021800 	.word	0x58021800
 80018dc:	58021c00 	.word	0x58021c00
 80018e0:	58022000 	.word	0x58022000
 80018e4:	58022400 	.word	0x58022400
 80018e8:	58022800 	.word	0x58022800
 80018ec:	08009d28 	.word	0x08009d28
 80018f0:	ffff0000 	.word	0xffff0000
 80018f4:	11110000 	.word	0x11110000
 80018f8:	11210000 	.word	0x11210000
 80018fc:	11310000 	.word	0x11310000
 8001900:	11120000 	.word	0x11120000
 8001904:	11220000 	.word	0x11220000
 8001908:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 81d4 	beq.w	8001ccc <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d00b      	beq.n	8001944 <HAL_GPIO_Init+0x1b4>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d007      	beq.n	8001944 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001938:	2b11      	cmp	r3, #17
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b12      	cmp	r3, #18
 8001942:	d144      	bne.n	80019ce <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00f      	beq.n	800196c <HAL_GPIO_Init+0x1dc>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d00b      	beq.n	800196c <HAL_GPIO_Init+0x1dc>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d007      	beq.n	800196c <HAL_GPIO_Init+0x1dc>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x1dc>
 8001964:	21ce      	movs	r1, #206	; 0xce
 8001966:	4897      	ldr	r0, [pc, #604]	; (8001bc4 <HAL_GPIO_Init+0x434>)
 8001968:	f7ff f92b 	bl	8000bc2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a2:	2201      	movs	r2, #1
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f003 0201 	and.w	r2, r3, #1
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x27e>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d15b      	bne.n	8001ac6 <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a6d      	ldr	r2, [pc, #436]	; (8001bc8 <HAL_GPIO_Init+0x438>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d02b      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a6c      	ldr	r2, [pc, #432]	; (8001bcc <HAL_GPIO_Init+0x43c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d027      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a6b      	ldr	r2, [pc, #428]	; (8001bd0 <HAL_GPIO_Init+0x440>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d023      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a6a      	ldr	r2, [pc, #424]	; (8001bd4 <HAL_GPIO_Init+0x444>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01f      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a69      	ldr	r2, [pc, #420]	; (8001bd8 <HAL_GPIO_Init+0x448>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01b      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a68      	ldr	r2, [pc, #416]	; (8001bdc <HAL_GPIO_Init+0x44c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d017      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a67      	ldr	r2, [pc, #412]	; (8001be0 <HAL_GPIO_Init+0x450>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a66      	ldr	r2, [pc, #408]	; (8001be4 <HAL_GPIO_Init+0x454>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00f      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a65      	ldr	r2, [pc, #404]	; (8001be8 <HAL_GPIO_Init+0x458>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00b      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a64      	ldr	r2, [pc, #400]	; (8001bec <HAL_GPIO_Init+0x45c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a63      	ldr	r2, [pc, #396]	; (8001bf0 <HAL_GPIO_Init+0x460>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x2de>
 8001a66:	21e6      	movs	r1, #230	; 0xe6
 8001a68:	4856      	ldr	r0, [pc, #344]	; (8001bc4 <HAL_GPIO_Init+0x434>)
 8001a6a:	f7ff f8aa 	bl	8000bc2 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	d903      	bls.n	8001a7e <HAL_GPIO_Init+0x2ee>
 8001a76:	21e7      	movs	r1, #231	; 0xe7
 8001a78:	4852      	ldr	r0, [pc, #328]	; (8001bc4 <HAL_GPIO_Init+0x434>)
 8001a7a:	f7ff f8a2 	bl	8000bc2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	69b9      	ldr	r1, [r7, #24]
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80e2 	beq.w	8001ccc <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b08:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_GPIO_Init+0x464>)
 8001b0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b0e:	4a39      	ldr	r2, [pc, #228]	; (8001bf4 <HAL_GPIO_Init+0x464>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_GPIO_Init+0x464>)
 8001b1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b26:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <HAL_GPIO_Init+0x468>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <HAL_GPIO_Init+0x438>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d054      	beq.n	8001bfc <HAL_GPIO_Init+0x46c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_GPIO_Init+0x43c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d031      	beq.n	8001bbe <HAL_GPIO_Init+0x42e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <HAL_GPIO_Init+0x440>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d02b      	beq.n	8001bba <HAL_GPIO_Init+0x42a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <HAL_GPIO_Init+0x444>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x426>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <HAL_GPIO_Init+0x448>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x422>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <HAL_GPIO_Init+0x44c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x41e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <HAL_GPIO_Init+0x450>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x41a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_GPIO_Init+0x454>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x416>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <HAL_GPIO_Init+0x458>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x412>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a15      	ldr	r2, [pc, #84]	; (8001bec <HAL_GPIO_Init+0x45c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x40e>
 8001b9a:	2309      	movs	r3, #9
 8001b9c:	e02f      	b.n	8001bfe <HAL_GPIO_Init+0x46e>
 8001b9e:	230a      	movs	r3, #10
 8001ba0:	e02d      	b.n	8001bfe <HAL_GPIO_Init+0x46e>
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	e02b      	b.n	8001bfe <HAL_GPIO_Init+0x46e>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e029      	b.n	8001bfe <HAL_GPIO_Init+0x46e>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e027      	b.n	8001bfe <HAL_GPIO_Init+0x46e>
 8001bae:	2305      	movs	r3, #5
 8001bb0:	e025      	b.n	8001bfe <HAL_GPIO_Init+0x46e>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	e023      	b.n	8001bfe <HAL_GPIO_Init+0x46e>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e021      	b.n	8001bfe <HAL_GPIO_Init+0x46e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e01f      	b.n	8001bfe <HAL_GPIO_Init+0x46e>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e01d      	b.n	8001bfe <HAL_GPIO_Init+0x46e>
 8001bc2:	bf00      	nop
 8001bc4:	08009d28 	.word	0x08009d28
 8001bc8:	58020000 	.word	0x58020000
 8001bcc:	58020400 	.word	0x58020400
 8001bd0:	58020800 	.word	0x58020800
 8001bd4:	58020c00 	.word	0x58020c00
 8001bd8:	58021000 	.word	0x58021000
 8001bdc:	58021400 	.word	0x58021400
 8001be0:	58021800 	.word	0x58021800
 8001be4:	58021c00 	.word	0x58021c00
 8001be8:	58022000 	.word	0x58022000
 8001bec:	58022400 	.word	0x58022400
 8001bf0:	58022800 	.word	0x58022800
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	58000400 	.word	0x58000400
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	f002 0203 	and.w	r2, r2, #3
 8001c04:	0092      	lsls	r2, r2, #2
 8001c06:	4093      	lsls	r3, r2
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0e:	4937      	ldr	r1, [pc, #220]	; (8001cec <HAL_GPIO_Init+0x55c>)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f47f ae15 	bne.w	800190c <HAL_GPIO_Init+0x17c>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	58000400 	.word	0x58000400

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <HAL_GPIO_WritePin+0x20>
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_GPIO_WritePin+0x60>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <HAL_GPIO_WritePin+0x2a>
 8001d10:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001d14:	480f      	ldr	r0, [pc, #60]	; (8001d54 <HAL_GPIO_WritePin+0x64>)
 8001d16:	f7fe ff54 	bl	8000bc2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001d1a:	787b      	ldrb	r3, [r7, #1]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_GPIO_WritePin+0x40>
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d004      	beq.n	8001d30 <HAL_GPIO_WritePin+0x40>
 8001d26:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001d2a:	480a      	ldr	r0, [pc, #40]	; (8001d54 <HAL_GPIO_WritePin+0x64>)
 8001d2c:	f7fe ff49 	bl	8000bc2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d3c:	e003      	b.n	8001d46 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	041a      	lsls	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	619a      	str	r2, [r3, #24]
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	ffff0000 	.word	0xffff0000
 8001d54:	08009d28 	.word	0x08009d28

08001d58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d004      	beq.n	8001d74 <HAL_GPIO_TogglePin+0x1c>
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_GPIO_TogglePin+0x4c>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_GPIO_TogglePin+0x26>
 8001d74:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001d78:	480b      	ldr	r0, [pc, #44]	; (8001da8 <HAL_GPIO_TogglePin+0x50>)
 8001d7a:	f7fe ff22 	bl	8000bc2 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	401a      	ands	r2, r3
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d104      	bne.n	8001d96 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	041a      	lsls	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	ffff0000 	.word	0xffff0000
 8001da8:	08009d28 	.word	0x08009d28

08001dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e107      	b.n	8001fce <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a85      	ldr	r2, [pc, #532]	; (8001fd8 <HAL_I2C_Init+0x22c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d013      	beq.n	8001df0 <HAL_I2C_Init+0x44>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a83      	ldr	r2, [pc, #524]	; (8001fdc <HAL_I2C_Init+0x230>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00e      	beq.n	8001df0 <HAL_I2C_Init+0x44>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a82      	ldr	r2, [pc, #520]	; (8001fe0 <HAL_I2C_Init+0x234>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d009      	beq.n	8001df0 <HAL_I2C_Init+0x44>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a80      	ldr	r2, [pc, #512]	; (8001fe4 <HAL_I2C_Init+0x238>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d004      	beq.n	8001df0 <HAL_I2C_Init+0x44>
 8001de6:	f240 11e1 	movw	r1, #481	; 0x1e1
 8001dea:	487f      	ldr	r0, [pc, #508]	; (8001fe8 <HAL_I2C_Init+0x23c>)
 8001dec:	f7fe fee9 	bl	8000bc2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df8:	d304      	bcc.n	8001e04 <HAL_I2C_Init+0x58>
 8001dfa:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001dfe:	487a      	ldr	r0, [pc, #488]	; (8001fe8 <HAL_I2C_Init+0x23c>)
 8001e00:	f7fe fedf 	bl	8000bc2 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d008      	beq.n	8001e1e <HAL_I2C_Init+0x72>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d004      	beq.n	8001e1e <HAL_I2C_Init+0x72>
 8001e14:	f240 11e3 	movw	r1, #483	; 0x1e3
 8001e18:	4873      	ldr	r0, [pc, #460]	; (8001fe8 <HAL_I2C_Init+0x23c>)
 8001e1a:	f7fe fed2 	bl	8000bc2 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_I2C_Init+0x8e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e2e:	d004      	beq.n	8001e3a <HAL_I2C_Init+0x8e>
 8001e30:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8001e34:	486c      	ldr	r0, [pc, #432]	; (8001fe8 <HAL_I2C_Init+0x23c>)
 8001e36:	f7fe fec4 	bl	8000bc2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2bff      	cmp	r3, #255	; 0xff
 8001e40:	d904      	bls.n	8001e4c <HAL_I2C_Init+0xa0>
 8001e42:	f240 11e5 	movw	r1, #485	; 0x1e5
 8001e46:	4868      	ldr	r0, [pc, #416]	; (8001fe8 <HAL_I2C_Init+0x23c>)
 8001e48:	f7fe febb 	bl	8000bc2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_I2C_Init+0xea>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d01c      	beq.n	8001e96 <HAL_I2C_Init+0xea>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d018      	beq.n	8001e96 <HAL_I2C_Init+0xea>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d014      	beq.n	8001e96 <HAL_I2C_Init+0xea>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d010      	beq.n	8001e96 <HAL_I2C_Init+0xea>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d00c      	beq.n	8001e96 <HAL_I2C_Init+0xea>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d008      	beq.n	8001e96 <HAL_I2C_Init+0xea>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b07      	cmp	r3, #7
 8001e8a:	d004      	beq.n	8001e96 <HAL_I2C_Init+0xea>
 8001e8c:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8001e90:	4855      	ldr	r0, [pc, #340]	; (8001fe8 <HAL_I2C_Init+0x23c>)
 8001e92:	f7fe fe96 	bl	8000bc2 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_I2C_Init+0x106>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ea6:	d004      	beq.n	8001eb2 <HAL_I2C_Init+0x106>
 8001ea8:	f240 11e7 	movw	r1, #487	; 0x1e7
 8001eac:	484e      	ldr	r0, [pc, #312]	; (8001fe8 <HAL_I2C_Init+0x23c>)
 8001eae:	f7fe fe88 	bl	8000bc2 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_I2C_Init+0x122>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ec2:	d004      	beq.n	8001ece <HAL_I2C_Init+0x122>
 8001ec4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8001ec8:	4847      	ldr	r0, [pc, #284]	; (8001fe8 <HAL_I2C_Init+0x23c>)
 8001eca:	f7fe fe7a 	bl	8000bc2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fe92 	bl	8000c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	; 0x24
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d107      	bne.n	8001f36 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	e006      	b.n	8001f44 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d104      	bne.n	8001f56 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_I2C_Init+0x240>)
 8001f62:	430b      	orrs	r3, r1
 8001f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	ea42 0103 	orr.w	r1, r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	021a      	lsls	r2, r3, #8
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69d9      	ldr	r1, [r3, #28]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40005400 	.word	0x40005400
 8001fdc:	40005800 	.word	0x40005800
 8001fe0:	40005c00 	.word	0x40005c00
 8001fe4:	58001c00 	.word	0x58001c00
 8001fe8:	08009d64 	.word	0x08009d64
 8001fec:	02008000 	.word	0x02008000

08001ff0 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	817b      	strh	r3, [r7, #10]
 8002000:	4613      	mov	r3, r2
 8002002:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b20      	cmp	r3, #32
 800200e:	d153      	bne.n	80020b8 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800201a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800201e:	d101      	bne.n	8002024 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8002020:	2302      	movs	r3, #2
 8002022:	e04a      	b.n	80020ba <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_I2C_Master_Transmit_IT+0x42>
 800202e:	2302      	movs	r3, #2
 8002030:	e043      	b.n	80020ba <HAL_I2C_Master_Transmit_IT+0xca>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2221      	movs	r2, #33	; 0x21
 800203e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2210      	movs	r2, #16
 8002046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	893a      	ldrh	r2, [r7, #8]
 800205a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8002066:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	2bff      	cmp	r3, #255	; 0xff
 8002070:	d906      	bls.n	8002080 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	22ff      	movs	r2, #255	; 0xff
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	e007      	b.n	8002090 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800208a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	b2da      	uxtb	r2, r3
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_I2C_Master_Transmit_IT+0xdc>)
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f001 fb54 	bl	800374c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020ac:	2101      	movs	r1, #1
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f001 fbc4 	bl	800383c <I2C_Enable_IRQ>

    return HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	e000      	b.n	80020ba <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80020b8:	2302      	movs	r3, #2
  }
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	ffff0000 	.word	0xffff0000
 80020c8:	0800226f 	.word	0x0800226f
 80020cc:	80002000 	.word	0x80002000

080020d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	68f9      	ldr	r1, [r7, #12]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
  }
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d010      	beq.n	800214a <HAL_I2C_ER_IRQHandler+0x46>
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	09db      	lsrs	r3, r3, #7
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002148:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	0a9b      	lsrs	r3, r3, #10
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d010      	beq.n	8002178 <HAL_I2C_ER_IRQHandler+0x74>
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	09db      	lsrs	r3, r3, #7
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f043 0208 	orr.w	r2, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002176:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	0a5b      	lsrs	r3, r3, #9
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d010      	beq.n	80021a6 <HAL_I2C_ER_IRQHandler+0xa2>
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	09db      	lsrs	r3, r3, #7
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f043 0202 	orr.w	r2, r3, #2
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 030b 	and.w	r3, r3, #11
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80021b6:	68f9      	ldr	r1, [r7, #12]
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f001 f98d 	bl	80034d8 <I2C_ITError>
  }
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
 800220e:	4613      	mov	r3, r2
 8002210:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b088      	sub	sp, #32
 8002272:	af02      	add	r7, sp, #8
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <I2C_Master_ISR_IT+0x1e>
 8002288:	2302      	movs	r3, #2
 800228a:	e115      	b.n	80024b8 <I2C_Master_ISR_IT+0x24a>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <I2C_Master_ISR_IT+0x5a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00d      	beq.n	80022c8 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2210      	movs	r2, #16
 80022b2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	f043 0204 	orr.w	r2, r3, #4
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f001 fa00 	bl	80036c6 <I2C_Flush_TXDR>
 80022c6:	e0e2      	b.n	800248e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <I2C_Master_ISR_IT+0xae>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01d      	beq.n	800231c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f023 0304 	bic.w	r3, r3, #4
 80022e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	855a      	strh	r2, [r3, #42]	; 0x2a
 800231a:	e0b8      	b.n	800248e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01e      	beq.n	8002366 <I2C_Master_ISR_IT+0xf8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d018      	beq.n	8002366 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002364:	e093      	b.n	800248e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	09db      	lsrs	r3, r3, #7
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d05e      	beq.n	8002430 <I2C_Master_ISR_IT+0x1c2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d058      	beq.n	8002430 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d041      	beq.n	800240c <I2C_Master_ISR_IT+0x19e>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d13d      	bne.n	800240c <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2bff      	cmp	r3, #255	; 0xff
 80023a6:	d90e      	bls.n	80023c6 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	22ff      	movs	r2, #255	; 0xff
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	8a79      	ldrh	r1, [r7, #18]
 80023b6:	2300      	movs	r3, #0
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f001 f9c4 	bl	800374c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c4:	e033      	b.n	800242e <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023d8:	d00c      	beq.n	80023f4 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80023e4:	8a79      	ldrh	r1, [r7, #18]
 80023e6:	2300      	movs	r3, #0
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4603      	mov	r3, r0
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f001 f9ad 	bl	800374c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f2:	e01c      	b.n	800242e <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	8a79      	ldrh	r1, [r7, #18]
 80023fc:	2300      	movs	r3, #0
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f001 f9a1 	bl	800374c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800240a:	e010      	b.n	800242e <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800241a:	d003      	beq.n	8002424 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fca9 	bl	8002d74 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002422:	e034      	b.n	800248e <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002424:	2140      	movs	r1, #64	; 0x40
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f001 f856 	bl	80034d8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800242c:	e02f      	b.n	800248e <I2C_Master_ISR_IT+0x220>
 800242e:	e02e      	b.n	800248e <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	099b      	lsrs	r3, r3, #6
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d028      	beq.n	800248e <I2C_Master_ISR_IT+0x220>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d022      	beq.n	800248e <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d119      	bne.n	8002486 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002460:	d015      	beq.n	800248e <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800246a:	d108      	bne.n	800247e <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	e007      	b.n	800248e <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fc78 	bl	8002d74 <I2C_ITMasterSeqCplt>
 8002484:	e003      	b.n	800248e <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002486:	2140      	movs	r1, #64	; 0x40
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f001 f825 	bl	80034d8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <I2C_Master_ISR_IT+0x240>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80024a6:	6979      	ldr	r1, [r7, #20]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fcff 	bl	8002eac <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <I2C_Slave_ISR_IT+0x24>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e0ec      	b.n	80026be <I2C_Slave_ISR_IT+0x1fe>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <I2C_Slave_ISR_IT+0x4c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002504:	6939      	ldr	r1, [r7, #16]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fd98 	bl	800303c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d04d      	beq.n	80025b4 <I2C_Slave_ISR_IT+0xf4>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d047      	beq.n	80025b4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d128      	bne.n	8002580 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b28      	cmp	r3, #40	; 0x28
 8002538:	d108      	bne.n	800254c <I2C_Slave_ISR_IT+0x8c>
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002540:	d104      	bne.n	800254c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002542:	6939      	ldr	r1, [r7, #16]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 ff71 	bl	800342c <I2C_ITListenCplt>
 800254a:	e032      	b.n	80025b2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b29      	cmp	r3, #41	; 0x29
 8002556:	d10e      	bne.n	8002576 <I2C_Slave_ISR_IT+0xb6>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800255e:	d00a      	beq.n	8002576 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2210      	movs	r2, #16
 8002566:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f001 f8ac 	bl	80036c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fc3d 	bl	8002dee <I2C_ITSlaveSeqCplt>
 8002574:	e01d      	b.n	80025b2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2210      	movs	r2, #16
 800257c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800257e:	e096      	b.n	80026ae <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2210      	movs	r2, #16
 8002586:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f043 0204 	orr.w	r2, r3, #4
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <I2C_Slave_ISR_IT+0xe4>
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a0:	f040 8085 	bne.w	80026ae <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	4619      	mov	r1, r3
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 ff94 	bl	80034d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80025b0:	e07d      	b.n	80026ae <I2C_Slave_ISR_IT+0x1ee>
 80025b2:	e07c      	b.n	80026ae <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d030      	beq.n	8002622 <I2C_Slave_ISR_IT+0x162>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02a      	beq.n	8002622 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d018      	beq.n	8002608 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d14f      	bne.n	80026b2 <I2C_Slave_ISR_IT+0x1f2>
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002618:	d04b      	beq.n	80026b2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fbe7 	bl	8002dee <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002620:	e047      	b.n	80026b2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	08db      	lsrs	r3, r3, #3
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <I2C_Slave_ISR_IT+0x184>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	08db      	lsrs	r3, r3, #3
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800263a:	6939      	ldr	r1, [r7, #16]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fb15 	bl	8002c6c <I2C_ITAddrCplt>
 8002642:	e037      	b.n	80026b4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d031      	beq.n	80026b4 <I2C_Slave_ISR_IT+0x1f4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d02b      	beq.n	80026b4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d018      	beq.n	8002698 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
 8002696:	e00d      	b.n	80026b4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269e:	d002      	beq.n	80026a6 <I2C_Slave_ISR_IT+0x1e6>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fba1 	bl	8002dee <I2C_ITSlaveSeqCplt>
 80026ac:	e002      	b.n	80026b4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80026b2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b088      	sub	sp, #32
 80026ca:	af02      	add	r7, sp, #8
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <I2C_Master_ISR_DMA+0x1a>
 80026dc:	2302      	movs	r3, #2
 80026de:	e0e1      	b.n	80028a4 <I2C_Master_ISR_DMA+0x1de>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <I2C_Master_ISR_DMA+0x5e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d011      	beq.n	8002724 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2210      	movs	r2, #16
 8002706:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	f043 0204 	orr.w	r2, r3, #4
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002714:	2120      	movs	r1, #32
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f001 f890 	bl	800383c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 ffd2 	bl	80036c6 <I2C_Flush_TXDR>
 8002722:	e0ba      	b.n	800289a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	09db      	lsrs	r3, r3, #7
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d072      	beq.n	8002816 <I2C_Master_ISR_DMA+0x150>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d06c      	beq.n	8002816 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800274a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d04e      	beq.n	80027f4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	b29b      	uxth	r3, r3
 800275e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002762:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	2bff      	cmp	r3, #255	; 0xff
 800276c:	d906      	bls.n	800277c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	22ff      	movs	r2, #255	; 0xff
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e010      	b.n	800279e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800278e:	d003      	beq.n	8002798 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e002      	b.n	800279e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002798:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	8a79      	ldrh	r1, [r7, #18]
 80027a6:	2300      	movs	r3, #0
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 ffcd 	bl	800374c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b22      	cmp	r3, #34	; 0x22
 80027ce:	d108      	bne.n	80027e2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027de:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80027e0:	e05b      	b.n	800289a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80027f2:	e052      	b.n	800289a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002802:	d003      	beq.n	800280c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fab5 	bl	8002d74 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800280a:	e046      	b.n	800289a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800280c:	2140      	movs	r1, #64	; 0x40
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fe62 	bl	80034d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002814:	e041      	b.n	800289a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d029      	beq.n	8002876 <I2C_Master_ISR_DMA+0x1b0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d023      	beq.n	8002876 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d119      	bne.n	800286c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002846:	d027      	beq.n	8002898 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002850:	d108      	bne.n	8002864 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002860:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002862:	e019      	b.n	8002898 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fa85 	bl	8002d74 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800286a:	e015      	b.n	8002898 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800286c:	2140      	movs	r1, #64	; 0x40
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fe32 	bl	80034d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002874:	e010      	b.n	8002898 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <I2C_Master_ISR_DMA+0x1d4>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fb0b 	bl	8002eac <I2C_ITMasterCplt>
 8002896:	e000      	b.n	800289a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002898:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <I2C_Slave_ISR_DMA+0x24>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e1c8      	b.n	8002c62 <I2C_Slave_ISR_DMA+0x3b6>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <I2C_Slave_ISR_DMA+0x4c>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fba2 	bl	800303c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8199 	beq.w	8002c38 <I2C_Slave_ISR_DMA+0x38c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8192 	beq.w	8002c38 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0b9b      	lsrs	r3, r3, #14
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d106      	bne.n	800292e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0bdb      	lsrs	r3, r3, #15
 8002924:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 817e 	beq.w	8002c2a <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d07c      	beq.n	8002a30 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0bdb      	lsrs	r3, r3, #15
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d076      	beq.n	8002a30 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a8d      	ldr	r2, [pc, #564]	; (8002b80 <I2C_Slave_ISR_DMA+0x2d4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d059      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a8b      	ldr	r2, [pc, #556]	; (8002b84 <I2C_Slave_ISR_DMA+0x2d8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d053      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a89      	ldr	r2, [pc, #548]	; (8002b88 <I2C_Slave_ISR_DMA+0x2dc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d04d      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a87      	ldr	r2, [pc, #540]	; (8002b8c <I2C_Slave_ISR_DMA+0x2e0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d047      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a85      	ldr	r2, [pc, #532]	; (8002b90 <I2C_Slave_ISR_DMA+0x2e4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d041      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a83      	ldr	r2, [pc, #524]	; (8002b94 <I2C_Slave_ISR_DMA+0x2e8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d03b      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a81      	ldr	r2, [pc, #516]	; (8002b98 <I2C_Slave_ISR_DMA+0x2ec>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d035      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a7f      	ldr	r2, [pc, #508]	; (8002b9c <I2C_Slave_ISR_DMA+0x2f0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02f      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a7d      	ldr	r2, [pc, #500]	; (8002ba0 <I2C_Slave_ISR_DMA+0x2f4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d029      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7b      	ldr	r2, [pc, #492]	; (8002ba4 <I2C_Slave_ISR_DMA+0x2f8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d023      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a79      	ldr	r2, [pc, #484]	; (8002ba8 <I2C_Slave_ISR_DMA+0x2fc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01d      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a77      	ldr	r2, [pc, #476]	; (8002bac <I2C_Slave_ISR_DMA+0x300>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d017      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a75      	ldr	r2, [pc, #468]	; (8002bb0 <I2C_Slave_ISR_DMA+0x304>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d011      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a73      	ldr	r2, [pc, #460]	; (8002bb4 <I2C_Slave_ISR_DMA+0x308>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00b      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a71      	ldr	r2, [pc, #452]	; (8002bb8 <I2C_Slave_ISR_DMA+0x30c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d005      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x156>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6f      	ldr	r2, [pc, #444]	; (8002bbc <I2C_Slave_ISR_DMA+0x310>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d109      	bne.n	8002a16 <I2C_Slave_ISR_DMA+0x16a>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	e008      	b.n	8002a28 <I2C_Slave_ISR_DMA+0x17c>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bf0c      	ite	eq
 8002a22:	2301      	moveq	r3, #1
 8002a24:	2300      	movne	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d07c      	beq.n	8002b32 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0b9b      	lsrs	r3, r3, #14
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d076      	beq.n	8002b32 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a4d      	ldr	r2, [pc, #308]	; (8002b80 <I2C_Slave_ISR_DMA+0x2d4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d059      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a4b      	ldr	r2, [pc, #300]	; (8002b84 <I2C_Slave_ISR_DMA+0x2d8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d053      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a49      	ldr	r2, [pc, #292]	; (8002b88 <I2C_Slave_ISR_DMA+0x2dc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d04d      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a47      	ldr	r2, [pc, #284]	; (8002b8c <I2C_Slave_ISR_DMA+0x2e0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d047      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a45      	ldr	r2, [pc, #276]	; (8002b90 <I2C_Slave_ISR_DMA+0x2e4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d041      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a43      	ldr	r2, [pc, #268]	; (8002b94 <I2C_Slave_ISR_DMA+0x2e8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d03b      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a41      	ldr	r2, [pc, #260]	; (8002b98 <I2C_Slave_ISR_DMA+0x2ec>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d035      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a3f      	ldr	r2, [pc, #252]	; (8002b9c <I2C_Slave_ISR_DMA+0x2f0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d02f      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a3d      	ldr	r2, [pc, #244]	; (8002ba0 <I2C_Slave_ISR_DMA+0x2f4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d029      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <I2C_Slave_ISR_DMA+0x2f8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d023      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a39      	ldr	r2, [pc, #228]	; (8002ba8 <I2C_Slave_ISR_DMA+0x2fc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d01d      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a37      	ldr	r2, [pc, #220]	; (8002bac <I2C_Slave_ISR_DMA+0x300>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d017      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a35      	ldr	r2, [pc, #212]	; (8002bb0 <I2C_Slave_ISR_DMA+0x304>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d011      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a33      	ldr	r2, [pc, #204]	; (8002bb4 <I2C_Slave_ISR_DMA+0x308>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00b      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a31      	ldr	r2, [pc, #196]	; (8002bb8 <I2C_Slave_ISR_DMA+0x30c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d005      	beq.n	8002b04 <I2C_Slave_ISR_DMA+0x258>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2f      	ldr	r2, [pc, #188]	; (8002bbc <I2C_Slave_ISR_DMA+0x310>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d109      	bne.n	8002b18 <I2C_Slave_ISR_DMA+0x26c>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e008      	b.n	8002b2a <I2C_Slave_ISR_DMA+0x27e>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d148      	bne.n	8002bca <I2C_Slave_ISR_DMA+0x31e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b28      	cmp	r3, #40	; 0x28
 8002b42:	d108      	bne.n	8002b56 <I2C_Slave_ISR_DMA+0x2aa>
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b4a:	d104      	bne.n	8002b56 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fc6c 	bl	800342c <I2C_ITListenCplt>
 8002b54:	e068      	b.n	8002c28 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b29      	cmp	r3, #41	; 0x29
 8002b60:	d12e      	bne.n	8002bc0 <I2C_Slave_ISR_DMA+0x314>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b68:	d02a      	beq.n	8002bc0 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2210      	movs	r2, #16
 8002b70:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fda7 	bl	80036c6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f938 	bl	8002dee <I2C_ITSlaveSeqCplt>
 8002b7e:	e053      	b.n	8002c28 <I2C_Slave_ISR_DMA+0x37c>
 8002b80:	40020010 	.word	0x40020010
 8002b84:	40020028 	.word	0x40020028
 8002b88:	40020040 	.word	0x40020040
 8002b8c:	40020058 	.word	0x40020058
 8002b90:	40020070 	.word	0x40020070
 8002b94:	40020088 	.word	0x40020088
 8002b98:	400200a0 	.word	0x400200a0
 8002b9c:	400200b8 	.word	0x400200b8
 8002ba0:	40020410 	.word	0x40020410
 8002ba4:	40020428 	.word	0x40020428
 8002ba8:	40020440 	.word	0x40020440
 8002bac:	40020458 	.word	0x40020458
 8002bb0:	40020470 	.word	0x40020470
 8002bb4:	40020488 	.word	0x40020488
 8002bb8:	400204a0 	.word	0x400204a0
 8002bbc:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002bc8:	e034      	b.n	8002c34 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2210      	movs	r2, #16
 8002bd0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f043 0204 	orr.w	r2, r3, #4
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <I2C_Slave_ISR_DMA+0x348>
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf2:	d11f      	bne.n	8002c34 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b21      	cmp	r3, #33	; 0x21
 8002bf8:	d002      	beq.n	8002c00 <I2C_Slave_ISR_DMA+0x354>
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b29      	cmp	r3, #41	; 0x29
 8002bfe:	d103      	bne.n	8002c08 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2221      	movs	r2, #33	; 0x21
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
 8002c06:	e008      	b.n	8002c1a <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b22      	cmp	r3, #34	; 0x22
 8002c0c:	d002      	beq.n	8002c14 <I2C_Slave_ISR_DMA+0x368>
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b2a      	cmp	r3, #42	; 0x2a
 8002c12:	d102      	bne.n	8002c1a <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2222      	movs	r2, #34	; 0x22
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4619      	mov	r1, r3
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fc59 	bl	80034d8 <I2C_ITError>
      if (treatdmanack == 1U)
 8002c26:	e005      	b.n	8002c34 <I2C_Slave_ISR_DMA+0x388>
 8002c28:	e004      	b.n	8002c34 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2210      	movs	r2, #16
 8002c30:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c32:	e011      	b.n	8002c58 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8002c34:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c36:	e00f      	b.n	8002c58 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	08db      	lsrs	r3, r3, #3
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <I2C_Slave_ISR_DMA+0x3ac>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	08db      	lsrs	r3, r3, #3
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f80a 	bl	8002c6c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop

08002c6c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c82:	2b28      	cmp	r3, #40	; 0x28
 8002c84:	d16a      	bne.n	8002d5c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002ca4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002cc0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d138      	bne.n	8002d3c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002cca:	897b      	ldrh	r3, [r7, #10]
 8002ccc:	09db      	lsrs	r3, r3, #7
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	89bb      	ldrh	r3, [r7, #12]
 8002cd2:	4053      	eors	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	f003 0306 	and.w	r3, r3, #6
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11c      	bne.n	8002d18 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d13b      	bne.n	8002d6c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2208      	movs	r2, #8
 8002d00:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d0a:	89ba      	ldrh	r2, [r7, #12]
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff fa76 	bl	8002202 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d16:	e029      	b.n	8002d6c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002d18:	893b      	ldrh	r3, [r7, #8]
 8002d1a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fdef 	bl	8003904 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d2e:	89ba      	ldrh	r2, [r7, #12]
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	4619      	mov	r1, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff fa64 	bl	8002202 <HAL_I2C_AddrCallback>
}
 8002d3a:	e017      	b.n	8002d6c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fddf 	bl	8003904 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d4e:	89ba      	ldrh	r2, [r7, #12]
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff fa54 	bl	8002202 <HAL_I2C_AddrCallback>
}
 8002d5a:	e007      	b.n	8002d6c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2208      	movs	r2, #8
 8002d62:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b21      	cmp	r3, #33	; 0x21
 8002d8e:	d115      	bne.n	8002dbc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2211      	movs	r2, #17
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002da4:	2101      	movs	r1, #1
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fdac 	bl	8003904 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7fd fc6f 	bl	8000698 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002dba:	e014      	b.n	8002de6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2212      	movs	r2, #18
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fd96 	bl	8003904 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff f9f0 	bl	80021c6 <HAL_I2C_MasterRxCpltCallback>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	0b9b      	lsrs	r3, r3, #14
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e00d      	b.n	8002e40 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	0bdb      	lsrs	r3, r3, #15
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e3e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b29      	cmp	r3, #41	; 0x29
 8002e4a:	d112      	bne.n	8002e72 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2228      	movs	r2, #40	; 0x28
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2221      	movs	r2, #33	; 0x21
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fd51 	bl	8003904 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff f9b5 	bl	80021da <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e70:	e017      	b.n	8002ea2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e7c:	d111      	bne.n	8002ea2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2228      	movs	r2, #40	; 0x28
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2222      	movs	r2, #34	; 0x22
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fd38 	bl	8003904 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff f9a6 	bl	80021ee <HAL_I2C_SlaveRxCpltCallback>
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	617b      	str	r3, [r7, #20]
  uint32_t tmp;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b21      	cmp	r3, #33	; 0x21
 8002ecc:	d107      	bne.n	8002ede <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ece:	2101      	movs	r1, #1
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fd17 	bl	8003904 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2211      	movs	r2, #17
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
 8002edc:	e00c      	b.n	8002ef8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b22      	cmp	r3, #34	; 0x22
 8002ee8:	d106      	bne.n	8002ef8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002eea:	2102      	movs	r1, #2
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fd09 	bl	8003904 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2212      	movs	r2, #18
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <I2C_ITMasterCplt+0x188>)
 8002f04:	400b      	ands	r3, r1
 8002f06:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a49      	ldr	r2, [pc, #292]	; (8003038 <I2C_ITMasterCplt+0x18c>)
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2210      	movs	r2, #16
 8002f26:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	f043 0204 	orr.w	r2, r3, #4
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b60      	cmp	r3, #96	; 0x60
 8002f3e:	d10a      	bne.n	8002f56 <I2C_ITMasterCplt+0xaa>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <I2C_ITMasterCplt+0xaa>
  {
    /* Read data from RXDR */
    tmp = (uint8_t)hi2c->Instance->RXDR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	613b      	str	r3, [r7, #16]

    UNUSED(tmp);
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fbb5 	bl	80036c6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b60      	cmp	r3, #96	; 0x60
 8002f6c:	d002      	beq.n	8002f74 <I2C_ITMasterCplt+0xc8>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d006      	beq.n	8002f82 <I2C_ITMasterCplt+0xd6>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 faac 	bl	80034d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f80:	e054      	b.n	800302c <I2C_ITMasterCplt+0x180>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b21      	cmp	r3, #33	; 0x21
 8002f8c:	d124      	bne.n	8002fd8 <I2C_ITMasterCplt+0x12c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	d10b      	bne.n	8002fc0 <I2C_ITMasterCplt+0x114>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff f93a 	bl	8002232 <HAL_I2C_MemTxCpltCallback>
}
 8002fbe:	e035      	b.n	800302c <I2C_ITMasterCplt+0x180>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7fd fb61 	bl	8000698 <HAL_I2C_MasterTxCpltCallback>
}
 8002fd6:	e029      	b.n	800302c <I2C_ITMasterCplt+0x180>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b22      	cmp	r3, #34	; 0x22
 8002fe2:	d123      	bne.n	800302c <I2C_ITMasterCplt+0x180>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d10b      	bne.n	8003016 <I2C_ITMasterCplt+0x16a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff f919 	bl	8002246 <HAL_I2C_MemRxCpltCallback>
}
 8003014:	e00a      	b.n	800302c <I2C_ITMasterCplt+0x180>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff f8cd 	bl	80021c6 <HAL_I2C_MasterRxCpltCallback>
}
 800302c:	bf00      	nop
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	fe00e800 	.word	0xfe00e800
 8003038:	ffff0000 	.word	0xffff0000

0800303c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003058:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2220      	movs	r2, #32
 8003060:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b21      	cmp	r3, #33	; 0x21
 8003066:	d002      	beq.n	800306e <I2C_ITSlaveCplt+0x32>
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b29      	cmp	r3, #41	; 0x29
 800306c:	d108      	bne.n	8003080 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800306e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fc46 	bl	8003904 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2221      	movs	r2, #33	; 0x21
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
 800307e:	e00d      	b.n	800309c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	2b22      	cmp	r3, #34	; 0x22
 8003084:	d002      	beq.n	800308c <I2C_ITSlaveCplt+0x50>
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	2b2a      	cmp	r3, #42	; 0x2a
 800308a:	d107      	bne.n	800309c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800308c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fc37 	bl	8003904 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2222      	movs	r2, #34	; 0x22
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030aa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b80      	ldr	r3, [pc, #512]	; (80032b8 <I2C_ITSlaveCplt+0x27c>)
 80030b8:	400b      	ands	r3, r1
 80030ba:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fb02 	bl	80036c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	0b9b      	lsrs	r3, r3, #14
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d07a      	beq.n	80031c4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030dc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 8111 	beq.w	800330a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a73      	ldr	r2, [pc, #460]	; (80032bc <I2C_ITSlaveCplt+0x280>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d059      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a71      	ldr	r2, [pc, #452]	; (80032c0 <I2C_ITSlaveCplt+0x284>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d053      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6f      	ldr	r2, [pc, #444]	; (80032c4 <I2C_ITSlaveCplt+0x288>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d04d      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6d      	ldr	r2, [pc, #436]	; (80032c8 <I2C_ITSlaveCplt+0x28c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d047      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6b      	ldr	r2, [pc, #428]	; (80032cc <I2C_ITSlaveCplt+0x290>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d041      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a69      	ldr	r2, [pc, #420]	; (80032d0 <I2C_ITSlaveCplt+0x294>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d03b      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a67      	ldr	r2, [pc, #412]	; (80032d4 <I2C_ITSlaveCplt+0x298>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d035      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <I2C_ITSlaveCplt+0x29c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d02f      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a63      	ldr	r2, [pc, #396]	; (80032dc <I2C_ITSlaveCplt+0x2a0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d029      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a61      	ldr	r2, [pc, #388]	; (80032e0 <I2C_ITSlaveCplt+0x2a4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d023      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5f      	ldr	r2, [pc, #380]	; (80032e4 <I2C_ITSlaveCplt+0x2a8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d01d      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5d      	ldr	r2, [pc, #372]	; (80032e8 <I2C_ITSlaveCplt+0x2ac>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d017      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a5b      	ldr	r2, [pc, #364]	; (80032ec <I2C_ITSlaveCplt+0x2b0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d011      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a59      	ldr	r2, [pc, #356]	; (80032f0 <I2C_ITSlaveCplt+0x2b4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00b      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a57      	ldr	r2, [pc, #348]	; (80032f4 <I2C_ITSlaveCplt+0x2b8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d005      	beq.n	80031a8 <I2C_ITSlaveCplt+0x16c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a55      	ldr	r2, [pc, #340]	; (80032f8 <I2C_ITSlaveCplt+0x2bc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d105      	bne.n	80031b4 <I2C_ITSlaveCplt+0x178>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	e004      	b.n	80031be <I2C_ITSlaveCplt+0x182>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	8553      	strh	r3, [r2, #42]	; 0x2a
 80031c2:	e0a2      	b.n	800330a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	0bdb      	lsrs	r3, r3, #15
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 809c 	beq.w	800330a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 808f 	beq.w	800330a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a32      	ldr	r2, [pc, #200]	; (80032bc <I2C_ITSlaveCplt+0x280>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d059      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a30      	ldr	r2, [pc, #192]	; (80032c0 <I2C_ITSlaveCplt+0x284>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d053      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2e      	ldr	r2, [pc, #184]	; (80032c4 <I2C_ITSlaveCplt+0x288>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d04d      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2c      	ldr	r2, [pc, #176]	; (80032c8 <I2C_ITSlaveCplt+0x28c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d047      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <I2C_ITSlaveCplt+0x290>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d041      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <I2C_ITSlaveCplt+0x294>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d03b      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <I2C_ITSlaveCplt+0x298>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d035      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <I2C_ITSlaveCplt+0x29c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d02f      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a22      	ldr	r2, [pc, #136]	; (80032dc <I2C_ITSlaveCplt+0x2a0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d029      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a20      	ldr	r2, [pc, #128]	; (80032e0 <I2C_ITSlaveCplt+0x2a4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d023      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1e      	ldr	r2, [pc, #120]	; (80032e4 <I2C_ITSlaveCplt+0x2a8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d01d      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <I2C_ITSlaveCplt+0x2ac>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d017      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1a      	ldr	r2, [pc, #104]	; (80032ec <I2C_ITSlaveCplt+0x2b0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d011      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <I2C_ITSlaveCplt+0x2b4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <I2C_ITSlaveCplt+0x2b8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d005      	beq.n	80032ac <I2C_ITSlaveCplt+0x270>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <I2C_ITSlaveCplt+0x2bc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d127      	bne.n	80032fc <I2C_ITSlaveCplt+0x2c0>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	e026      	b.n	8003306 <I2C_ITSlaveCplt+0x2ca>
 80032b8:	fe00e800 	.word	0xfe00e800
 80032bc:	40020010 	.word	0x40020010
 80032c0:	40020028 	.word	0x40020028
 80032c4:	40020040 	.word	0x40020040
 80032c8:	40020058 	.word	0x40020058
 80032cc:	40020070 	.word	0x40020070
 80032d0:	40020088 	.word	0x40020088
 80032d4:	400200a0 	.word	0x400200a0
 80032d8:	400200b8 	.word	0x400200b8
 80032dc:	40020410 	.word	0x40020410
 80032e0:	40020428 	.word	0x40020428
 80032e4:	40020440 	.word	0x40020440
 80032e8:	40020458 	.word	0x40020458
 80032ec:	40020470 	.word	0x40020470
 80032f0:	40020488 	.word	0x40020488
 80032f4:	400204a0 	.word	0x400204a0
 80032f8:	400204b8 	.word	0x400204b8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	b29b      	uxth	r3, r3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f023 0304 	bic.w	r3, r3, #4
 800331c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8a4 	bl	80034d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b28      	cmp	r3, #40	; 0x28
 800339a:	d141      	bne.n	8003420 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800339c:	6979      	ldr	r1, [r7, #20]
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f844 	bl	800342c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033a4:	e03c      	b.n	8003420 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ae:	d014      	beq.n	80033da <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fd1c 	bl	8002dee <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <I2C_ITSlaveCplt+0x3ec>)
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe ff23 	bl	800221e <HAL_I2C_ListenCpltCallback>
}
 80033d8:	e022      	b.n	8003420 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b22      	cmp	r3, #34	; 0x22
 80033e4:	d10e      	bne.n	8003404 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7fe fef6 	bl	80021ee <HAL_I2C_SlaveRxCpltCallback>
}
 8003402:	e00d      	b.n	8003420 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fe fedd 	bl	80021da <HAL_I2C_SlaveTxCpltCallback>
}
 8003420:	bf00      	nop
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	ffff0000 	.word	0xffff0000

0800342c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <I2C_ITListenCplt+0xa8>)
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d022      	beq.n	80034aa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	2b00      	cmp	r3, #0
 8003482:	d012      	beq.n	80034aa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f043 0204 	orr.w	r2, r3, #4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034aa:	f248 0103 	movw	r1, #32771	; 0x8003
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fa28 	bl	8003904 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2210      	movs	r2, #16
 80034ba:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fe feaa 	bl	800221e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	ffff0000 	.word	0xffff0000

080034d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a5d      	ldr	r2, [pc, #372]	; (800366c <I2C_ITError+0x194>)
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	2b28      	cmp	r3, #40	; 0x28
 800350e:	d005      	beq.n	800351c <I2C_ITError+0x44>
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b29      	cmp	r3, #41	; 0x29
 8003514:	d002      	beq.n	800351c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b2a      	cmp	r3, #42	; 0x2a
 800351a:	d10b      	bne.n	8003534 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800351c:	2103      	movs	r1, #3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9f0 	bl	8003904 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2228      	movs	r2, #40	; 0x28
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a50      	ldr	r2, [pc, #320]	; (8003670 <I2C_ITError+0x198>)
 8003530:	635a      	str	r2, [r3, #52]	; 0x34
 8003532:	e011      	b.n	8003558 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003534:	f248 0103 	movw	r1, #32771	; 0x8003
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f9e3 	bl	8003904 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b60      	cmp	r3, #96	; 0x60
 8003548:	d003      	beq.n	8003552 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	2b00      	cmp	r3, #0
 8003564:	d039      	beq.n	80035da <I2C_ITError+0x102>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b11      	cmp	r3, #17
 800356a:	d002      	beq.n	8003572 <I2C_ITError+0x9a>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b21      	cmp	r3, #33	; 0x21
 8003570:	d133      	bne.n	80035da <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003580:	d107      	bne.n	8003592 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003590:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe f8ec 	bl	8001774 <HAL_DMA_GetState>
 800359c:	4603      	mov	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d017      	beq.n	80035d2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	4a33      	ldr	r2, [pc, #204]	; (8003674 <I2C_ITError+0x19c>)
 80035a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fe98 	bl	80012ec <HAL_DMA_Abort_IT>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d04d      	beq.n	800365e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035cc:	4610      	mov	r0, r2
 80035ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035d0:	e045      	b.n	800365e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f850 	bl	8003678 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035d8:	e041      	b.n	800365e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d039      	beq.n	8003656 <I2C_ITError+0x17e>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b12      	cmp	r3, #18
 80035e6:	d002      	beq.n	80035ee <I2C_ITError+0x116>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b22      	cmp	r3, #34	; 0x22
 80035ec:	d133      	bne.n	8003656 <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fc:	d107      	bne.n	800360e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800360c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe f8ae 	bl	8001774 <HAL_DMA_GetState>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d017      	beq.n	800364e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	4a14      	ldr	r2, [pc, #80]	; (8003674 <I2C_ITError+0x19c>)
 8003624:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd fe5a 	bl	80012ec <HAL_DMA_Abort_IT>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d011      	beq.n	8003662 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003648:	4610      	mov	r0, r2
 800364a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800364c:	e009      	b.n	8003662 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f812 	bl	8003678 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003654:	e005      	b.n	8003662 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f80e 	bl	8003678 <I2C_TreatErrorCallback>
  }
}
 800365c:	e002      	b.n	8003664 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003662:	bf00      	nop
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	ffff0000 	.word	0xffff0000
 8003670:	080024c1 	.word	0x080024c1
 8003674:	0800370f 	.word	0x0800370f

08003678 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b60      	cmp	r3, #96	; 0x60
 800368a:	d10e      	bne.n	80036aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fe fdd9 	bl	800225a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036a8:	e009      	b.n	80036be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fd f805 	bl	80006c8 <HAL_I2C_ErrorCallback>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d103      	bne.n	80036e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2200      	movs	r2, #0
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d007      	beq.n	8003702 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	619a      	str	r2, [r3, #24]
  }
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	2200      	movs	r2, #0
 800372a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	2200      	movs	r2, #0
 800373a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff ff9b 	bl	8003678 <I2C_TreatErrorCallback>
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	817b      	strh	r3, [r7, #10]
 800375a:	4613      	mov	r3, r2
 800375c:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2d      	ldr	r2, [pc, #180]	; (8003818 <I2C_TransferConfig+0xcc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <I2C_TransferConfig+0x44>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2b      	ldr	r2, [pc, #172]	; (800381c <I2C_TransferConfig+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <I2C_TransferConfig+0x44>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <I2C_TransferConfig+0xd4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <I2C_TransferConfig+0x44>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a28      	ldr	r2, [pc, #160]	; (8003824 <I2C_TransferConfig+0xd8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <I2C_TransferConfig+0x44>
 8003786:	f641 1131 	movw	r1, #6449	; 0x1931
 800378a:	4827      	ldr	r0, [pc, #156]	; (8003828 <I2C_TransferConfig+0xdc>)
 800378c:	f7fd fa19 	bl	8000bc2 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003796:	d00b      	beq.n	80037b0 <I2C_TransferConfig+0x64>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800379e:	d007      	beq.n	80037b0 <I2C_TransferConfig+0x64>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <I2C_TransferConfig+0x64>
 80037a6:	f641 1132 	movw	r1, #6450	; 0x1932
 80037aa:	481f      	ldr	r0, [pc, #124]	; (8003828 <I2C_TransferConfig+0xdc>)
 80037ac:	f7fd fa09 	bl	8000bc2 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <I2C_TransferConfig+0xe0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00f      	beq.n	80037d8 <I2C_TransferConfig+0x8c>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <I2C_TransferConfig+0xe4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00b      	beq.n	80037d8 <I2C_TransferConfig+0x8c>
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <I2C_TransferConfig+0xe8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <I2C_TransferConfig+0x8c>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <I2C_TransferConfig+0x8c>
 80037ce:	f641 1133 	movw	r1, #6451	; 0x1933
 80037d2:	4815      	ldr	r0, [pc, #84]	; (8003828 <I2C_TransferConfig+0xdc>)
 80037d4:	f7fd f9f5 	bl	8000bc2 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	0d5b      	lsrs	r3, r3, #21
 80037e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <I2C_TransferConfig+0xec>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	43db      	mvns	r3, r3
 80037ec:	ea02 0103 	and.w	r1, r2, r3
 80037f0:	897b      	ldrh	r3, [r7, #10]
 80037f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037f6:	7a7b      	ldrb	r3, [r7, #9]
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	431a      	orrs	r2, r3
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	431a      	orrs	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40005400 	.word	0x40005400
 800381c:	40005800 	.word	0x40005800
 8003820:	40005c00 	.word	0x40005c00
 8003824:	58001c00 	.word	0x58001c00
 8003828:	08009d64 	.word	0x08009d64
 800382c:	80004000 	.word	0x80004000
 8003830:	80002400 	.word	0x80002400
 8003834:	80002000 	.word	0x80002000
 8003838:	03ff63ff 	.word	0x03ff63ff

0800383c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003850:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <I2C_Enable_IRQ+0xc0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800385a:	4a29      	ldr	r2, [pc, #164]	; (8003900 <I2C_Enable_IRQ+0xc4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d11d      	bne.n	800389c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003860:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003864:	2b00      	cmp	r3, #0
 8003866:	da03      	bge.n	8003870 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800386e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003870:	887b      	ldrh	r3, [r7, #2]
 8003872:	2b10      	cmp	r3, #16
 8003874:	d103      	bne.n	800387e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800387c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	2b20      	cmp	r3, #32
 8003882:	d103      	bne.n	800388c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800388a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d125      	bne.n	80038de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003898:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800389a:	e020      	b.n	80038de <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800389c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da03      	bge.n	80038ac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80038aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80038bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80038be:	887b      	ldrh	r3, [r7, #2]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80038ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d103      	bne.n	80038de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f043 0320 	orr.w	r3, r3, #32
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]
}
 80038ee:	bf00      	nop
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	080026c7 	.word	0x080026c7
 8003900:	080028ad 	.word	0x080028ad

08003904 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003914:	887b      	ldrh	r3, [r7, #2]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00f      	beq.n	800393e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003924:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003932:	2b28      	cmp	r3, #40	; 0x28
 8003934:	d003      	beq.n	800393e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800393c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800393e:	887b      	ldrh	r3, [r7, #2]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00f      	beq.n	8003968 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800394e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800395c:	2b28      	cmp	r3, #40	; 0x28
 800395e:	d003      	beq.n	8003968 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003966:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003968:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da03      	bge.n	8003978 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003976:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	2b10      	cmp	r3, #16
 800397c:	d103      	bne.n	8003986 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003984:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003986:	887b      	ldrh	r3, [r7, #2]
 8003988:	2b20      	cmp	r3, #32
 800398a:	d103      	bne.n	8003994 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f043 0320 	orr.w	r3, r3, #32
 8003992:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003994:	887b      	ldrh	r3, [r7, #2]
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d103      	bne.n	80039a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	400a      	ands	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a32      	ldr	r2, [pc, #200]	; (8003a98 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d012      	beq.n	80039fa <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a30      	ldr	r2, [pc, #192]	; (8003a9c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00d      	beq.n	80039fa <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2f      	ldr	r2, [pc, #188]	; (8003aa0 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d008      	beq.n	80039fa <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d003      	beq.n	80039fa <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80039f2:	2164      	movs	r1, #100	; 0x64
 80039f4:	482c      	ldr	r0, [pc, #176]	; (8003aa8 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80039f6:	f7fd f8e4 	bl	8000bc2 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	d003      	beq.n	8003a10 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003a08:	2165      	movs	r1, #101	; 0x65
 8003a0a:	4827      	ldr	r0, [pc, #156]	; (8003aa8 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8003a0c:	f7fd f8d9 	bl	8000bc2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d138      	bne.n	8003a8e <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e032      	b.n	8003a90 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2224      	movs	r2, #36	; 0x24
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a58:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40005400 	.word	0x40005400
 8003a9c:	40005800 	.word	0x40005800
 8003aa0:	40005c00 	.word	0x40005c00
 8003aa4:	58001c00 	.word	0x58001c00
 8003aa8:	08009d9c 	.word	0x08009d9c

08003aac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a31      	ldr	r2, [pc, #196]	; (8003b80 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d012      	beq.n	8003ae6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2f      	ldr	r2, [pc, #188]	; (8003b84 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2e      	ldr	r2, [pc, #184]	; (8003b88 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d008      	beq.n	8003ae6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2c      	ldr	r2, [pc, #176]	; (8003b8c <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003ade:	2192      	movs	r1, #146	; 0x92
 8003ae0:	482b      	ldr	r0, [pc, #172]	; (8003b90 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003ae2:	f7fd f86e 	bl	8000bc2 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b0f      	cmp	r3, #15
 8003aea:	d903      	bls.n	8003af4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8003aec:	2193      	movs	r1, #147	; 0x93
 8003aee:	4828      	ldr	r0, [pc, #160]	; (8003b90 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003af0:	f7fd f867 	bl	8000bc2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d139      	bne.n	8003b74 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e033      	b.n	8003b76 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2224      	movs	r2, #36	; 0x24
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40005400 	.word	0x40005400
 8003b84:	40005800 	.word	0x40005800
 8003b88:	40005c00 	.word	0x40005c00
 8003b8c:	58001c00 	.word	0x58001c00
 8003b90:	08009d9c 	.word	0x08009d9c

08003b94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d007      	beq.n	8003bb2 <HAL_PWREx_ConfigSupply+0x1e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d004      	beq.n	8003bb2 <HAL_PWREx_ConfigSupply+0x1e>
 8003ba8:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8003bac:	481a      	ldr	r0, [pc, #104]	; (8003c18 <HAL_PWREx_ConfigSupply+0x84>)
 8003bae:	f7fd f808 	bl	8000bc2 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <HAL_PWREx_ConfigSupply+0x88>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003bbe:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <HAL_PWREx_ConfigSupply+0x88>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e01f      	b.n	8003c10 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e01d      	b.n	8003c10 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bd4:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_PWREx_ConfigSupply+0x88>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f023 0207 	bic.w	r2, r3, #7
 8003bdc:	490f      	ldr	r1, [pc, #60]	; (8003c1c <HAL_PWREx_ConfigSupply+0x88>)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003be4:	f7fd fa0a 	bl	8000ffc <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bea:	e009      	b.n	8003c00 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bec:	f7fd fa06 	bl	8000ffc <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bfa:	d901      	bls.n	8003c00 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e007      	b.n	8003c10 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_PWREx_ConfigSupply+0x88>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0c:	d1ee      	bne.n	8003bec <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	08009dd8 	.word	0x08009dd8
 8003c1c:	58024800 	.word	0x58024800

08003c20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08c      	sub	sp, #48	; 0x30
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f000 bce9 	b.w	8004606 <HAL_RCC_OscConfig+0x9e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d028      	beq.n	8003c8e <HAL_RCC_OscConfig+0x6e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d122      	bne.n	8003c8e <HAL_RCC_OscConfig+0x6e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d11c      	bne.n	8003c8e <HAL_RCC_OscConfig+0x6e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d116      	bne.n	8003c8e <HAL_RCC_OscConfig+0x6e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d110      	bne.n	8003c8e <HAL_RCC_OscConfig+0x6e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <HAL_RCC_OscConfig+0x6e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <HAL_RCC_OscConfig+0x6e>
 8003c84:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003c88:	48a0      	ldr	r0, [pc, #640]	; (8003f0c <HAL_RCC_OscConfig+0x2ec>)
 8003c8a:	f7fc ff9a 	bl	8000bc2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 809d 	beq.w	8003dd6 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_RCC_OscConfig+0xa2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cac:	d009      	beq.n	8003cc2 <HAL_RCC_OscConfig+0xa2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb6:	d004      	beq.n	8003cc2 <HAL_RCC_OscConfig+0xa2>
 8003cb8:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003cbc:	4893      	ldr	r0, [pc, #588]	; (8003f0c <HAL_RCC_OscConfig+0x2ec>)
 8003cbe:	f7fc ff80 	bl	8000bc2 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc2:	4b93      	ldr	r3, [pc, #588]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ccc:	4b90      	ldr	r3, [pc, #576]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d007      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xc8>
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	2b18      	cmp	r3, #24
 8003cdc:	d111      	bne.n	8003d02 <HAL_RCC_OscConfig+0xe2>
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d10c      	bne.n	8003d02 <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	4b89      	ldr	r3, [pc, #548]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d06f      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x1b4>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d16b      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f000 bc82 	b.w	8004606 <HAL_RCC_OscConfig+0x9e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0xfa>
 8003d0c:	4b80      	ldr	r3, [pc, #512]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a7f      	ldr	r2, [pc, #508]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	e02e      	b.n	8003d78 <HAL_RCC_OscConfig+0x158>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x11c>
 8003d22:	4b7b      	ldr	r3, [pc, #492]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7a      	ldr	r2, [pc, #488]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b78      	ldr	r3, [pc, #480]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a77      	ldr	r2, [pc, #476]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e01d      	b.n	8003d78 <HAL_RCC_OscConfig+0x158>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x140>
 8003d46:	4b72      	ldr	r3, [pc, #456]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a71      	ldr	r2, [pc, #452]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b6f      	ldr	r3, [pc, #444]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6e      	ldr	r2, [pc, #440]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCC_OscConfig+0x158>
 8003d60:	4b6b      	ldr	r3, [pc, #428]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6a      	ldr	r2, [pc, #424]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4b68      	ldr	r3, [pc, #416]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a67      	ldr	r2, [pc, #412]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d014      	beq.n	8003daa <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fd f93c 	bl	8000ffc <HAL_GetTick>
 8003d84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d86:	e009      	b.n	8003d9c <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d88:	f7fd f938 	bl	8000ffc <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d902      	bls.n	8003d9c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	f000 bc35 	b.w	8004606 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d9c:	4b5c      	ldr	r3, [pc, #368]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ef      	beq.n	8003d88 <HAL_RCC_OscConfig+0x168>
 8003da8:	e015      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fd f927 	bl	8000ffc <HAL_GetTick>
 8003dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003db0:	e009      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db2:	f7fd f923 	bl	8000ffc <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b64      	cmp	r3, #100	; 0x64
 8003dbe:	d902      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	f000 bc20 	b.w	8004606 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dc6:	4b52      	ldr	r3, [pc, #328]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1ef      	bne.n	8003db2 <HAL_RCC_OscConfig+0x192>
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80bc 	beq.w	8003f5c <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d018      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1fe>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d014      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1fe>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d010      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1fe>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d00c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1fe>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b11      	cmp	r3, #17
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1fe>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b19      	cmp	r3, #25
 8003e12:	d004      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1fe>
 8003e14:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003e18:	483c      	ldr	r0, [pc, #240]	; (8003f0c <HAL_RCC_OscConfig+0x2ec>)
 8003e1a:	f7fc fed2 	bl	8000bc2 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b7f      	cmp	r3, #127	; 0x7f
 8003e24:	d904      	bls.n	8003e30 <HAL_RCC_OscConfig+0x210>
 8003e26:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003e2a:	4838      	ldr	r0, [pc, #224]	; (8003f0c <HAL_RCC_OscConfig+0x2ec>)
 8003e2c:	f7fc fec9 	bl	8000bc2 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e30:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e3a:	4b35      	ldr	r3, [pc, #212]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <HAL_RCC_OscConfig+0x236>
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	2b18      	cmp	r3, #24
 8003e4a:	d12d      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x288>
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d128      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x288>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_RCC_OscConfig+0x24e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e3cb      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	f7fd f8f3 	bl	8001058 <HAL_GetREVID>
 8003e72:	4602      	mov	r2, r0
 8003e74:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d80a      	bhi.n	8003e92 <HAL_RCC_OscConfig+0x272>
 8003e7c:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	031b      	lsls	r3, r3, #12
 8003e8a:	4921      	ldr	r1, [pc, #132]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e90:	e064      	b.n	8003f5c <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e92:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	061b      	lsls	r3, r3, #24
 8003ea0:	491b      	ldr	r1, [pc, #108]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea6:	e059      	b.n	8003f5c <HAL_RCC_OscConfig+0x33c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03c      	beq.n	8003f2a <HAL_RCC_OscConfig+0x30a>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 0219 	bic.w	r2, r3, #25
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4914      	ldr	r1, [pc, #80]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fd f89b 	bl	8000ffc <HAL_GetTick>
 8003ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x2bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eca:	f7fd f897 	bl	8000ffc <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x2bc>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e394      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x2aa>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee8:	f7fd f8b6 	bl	8001058 <HAL_GetREVID>
 8003eec:	4602      	mov	r2, r0
 8003eee:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d80e      	bhi.n	8003f14 <HAL_RCC_OscConfig+0x2f4>
 8003ef6:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	031b      	lsls	r3, r3, #12
 8003f04:	4902      	ldr	r1, [pc, #8]	; (8003f10 <HAL_RCC_OscConfig+0x2f0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]
 8003f0a:	e027      	b.n	8003f5c <HAL_RCC_OscConfig+0x33c>
 8003f0c:	08009e14 	.word	0x08009e14
 8003f10:	58024400 	.word	0x58024400
 8003f14:	4ba5      	ldr	r3, [pc, #660]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	49a2      	ldr	r1, [pc, #648]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
 8003f28:	e018      	b.n	8003f5c <HAL_RCC_OscConfig+0x33c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2a:	4ba0      	ldr	r3, [pc, #640]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a9f      	ldr	r2, [pc, #636]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd f861 	bl	8000ffc <HAL_GetTick>
 8003f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x330>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3e:	f7fd f85d 	bl	8000ffc <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e35a      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f50:	4b96      	ldr	r3, [pc, #600]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0x31e>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80a5 	beq.w	80040b4 <HAL_RCC_OscConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_RCC_OscConfig+0x364>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b80      	cmp	r3, #128	; 0x80
 8003f78:	d004      	beq.n	8003f84 <HAL_RCC_OscConfig+0x364>
 8003f7a:	f240 211a 	movw	r1, #538	; 0x21a
 8003f7e:	488c      	ldr	r0, [pc, #560]	; (80041b0 <HAL_RCC_OscConfig+0x590>)
 8003f80:	f7fc fe1f 	bl	8000bc2 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	2b3f      	cmp	r3, #63	; 0x3f
 8003f8a:	d904      	bls.n	8003f96 <HAL_RCC_OscConfig+0x376>
 8003f8c:	f240 211b 	movw	r1, #539	; 0x21b
 8003f90:	4887      	ldr	r0, [pc, #540]	; (80041b0 <HAL_RCC_OscConfig+0x590>)
 8003f92:	f7fc fe16 	bl	8000bc2 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f96:	4b85      	ldr	r3, [pc, #532]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fa0:	4b82      	ldr	r3, [pc, #520]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d007      	beq.n	8003fbc <HAL_RCC_OscConfig+0x39c>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b18      	cmp	r3, #24
 8003fb0:	d12d      	bne.n	800400e <HAL_RCC_OscConfig+0x3ee>
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d128      	bne.n	800400e <HAL_RCC_OscConfig+0x3ee>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fbc:	4b7b      	ldr	r3, [pc, #492]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x3b4>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x3b4>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e318      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fd4:	f7fd f840 	bl	8001058 <HAL_GetREVID>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	f241 0303 	movw	r3, #4099	; 0x1003
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d80a      	bhi.n	8003ff8 <HAL_RCC_OscConfig+0x3d8>
 8003fe2:	4b72      	ldr	r3, [pc, #456]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	069b      	lsls	r3, r3, #26
 8003ff0:	496e      	ldr	r1, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ff6:	e05d      	b.n	80040b4 <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ff8:	4b6c      	ldr	r3, [pc, #432]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	4969      	ldr	r1, [pc, #420]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800400c:	e052      	b.n	80040b4 <HAL_RCC_OscConfig+0x494>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d035      	beq.n	8004082 <HAL_RCC_OscConfig+0x462>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004016:	4b65      	ldr	r3, [pc, #404]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a64      	ldr	r2, [pc, #400]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 800401c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7fc ffeb 	bl	8000ffc <HAL_GetTick>
 8004026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x41c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800402a:	f7fc ffe7 	bl	8000ffc <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e2e4      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800403c:	4b5b      	ldr	r3, [pc, #364]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004048:	f7fd f806 	bl	8001058 <HAL_GetREVID>
 800404c:	4602      	mov	r2, r0
 800404e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004052:	429a      	cmp	r2, r3
 8004054:	d80a      	bhi.n	800406c <HAL_RCC_OscConfig+0x44c>
 8004056:	4b55      	ldr	r3, [pc, #340]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	069b      	lsls	r3, r3, #26
 8004064:	4951      	ldr	r1, [pc, #324]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]
 800406a:	e023      	b.n	80040b4 <HAL_RCC_OscConfig+0x494>
 800406c:	4b4f      	ldr	r3, [pc, #316]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	061b      	lsls	r3, r3, #24
 800407a:	494c      	ldr	r1, [pc, #304]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 800407c:	4313      	orrs	r3, r2
 800407e:	60cb      	str	r3, [r1, #12]
 8004080:	e018      	b.n	80040b4 <HAL_RCC_OscConfig+0x494>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004082:	4b4a      	ldr	r3, [pc, #296]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a49      	ldr	r2, [pc, #292]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8004088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800408c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fc ffb5 	bl	8000ffc <HAL_GetTick>
 8004092:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004096:	f7fc ffb1 	bl	8000ffc <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e2ae      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040a8:	4b40      	ldr	r3, [pc, #256]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d043      	beq.n	8004148 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCC_OscConfig+0x4ba>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d004      	beq.n	80040da <HAL_RCC_OscConfig+0x4ba>
 80040d0:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80040d4:	4836      	ldr	r0, [pc, #216]	; (80041b0 <HAL_RCC_OscConfig+0x590>)
 80040d6:	f7fc fd74 	bl	8000bc2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d019      	beq.n	8004116 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e2:	4b32      	ldr	r3, [pc, #200]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 80040e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e6:	4a31      	ldr	r2, [pc, #196]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ee:	f7fc ff85 	bl	8000ffc <HAL_GetTick>
 80040f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f6:	f7fc ff81 	bl	8000ffc <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e27e      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004108:	4b28      	ldr	r3, [pc, #160]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 800410a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x4d6>
 8004114:	e018      	b.n	8004148 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004116:	4b25      	ldr	r3, [pc, #148]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8004118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411a:	4a24      	ldr	r2, [pc, #144]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004122:	f7fc ff6b 	bl	8000ffc <HAL_GetTick>
 8004126:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x51c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412a:	f7fc ff67 	bl	8000ffc <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x51c>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e264      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800413c:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 800413e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <HAL_RCC_OscConfig+0x50a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d048      	beq.n	80041e6 <HAL_RCC_OscConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_RCC_OscConfig+0x54e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d004      	beq.n	800416e <HAL_RCC_OscConfig+0x54e>
 8004164:	f240 2187 	movw	r1, #647	; 0x287
 8004168:	4811      	ldr	r0, [pc, #68]	; (80041b0 <HAL_RCC_OscConfig+0x590>)
 800416a:	f7fc fd2a 	bl	8000bc2 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01e      	beq.n	80041b4 <HAL_RCC_OscConfig+0x594>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 800417c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004180:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004182:	f7fc ff3b 	bl	8000ffc <HAL_GetTick>
 8004186:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800418a:	f7fc ff37 	bl	8000ffc <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e234      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_RCC_OscConfig+0x58c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x56a>
 80041a8:	e01d      	b.n	80041e6 <HAL_RCC_OscConfig+0x5c6>
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
 80041b0:	08009e14 	.word	0x08009e14
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041b4:	4ba3      	ldr	r3, [pc, #652]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4aa2      	ldr	r2, [pc, #648]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 80041ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041c0:	f7fc ff1c 	bl	8000ffc <HAL_GetTick>
 80041c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x5ba>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041c8:	f7fc ff18 	bl	8000ffc <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x5ba>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e215      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041da:	4b9a      	ldr	r3, [pc, #616]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x5a8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 8092 	beq.w	8004318 <HAL_RCC_OscConfig+0x6f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00c      	beq.n	8004216 <HAL_RCC_OscConfig+0x5f6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d008      	beq.n	8004216 <HAL_RCC_OscConfig+0x5f6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b05      	cmp	r3, #5
 800420a:	d004      	beq.n	8004216 <HAL_RCC_OscConfig+0x5f6>
 800420c:	f240 21b1 	movw	r1, #689	; 0x2b1
 8004210:	488d      	ldr	r0, [pc, #564]	; (8004448 <HAL_RCC_OscConfig+0x828>)
 8004212:	f7fc fcd6 	bl	8000bc2 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004216:	4b8d      	ldr	r3, [pc, #564]	; (800444c <HAL_RCC_OscConfig+0x82c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a8c      	ldr	r2, [pc, #560]	; (800444c <HAL_RCC_OscConfig+0x82c>)
 800421c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004220:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004222:	f7fc feeb 	bl	8000ffc <HAL_GetTick>
 8004226:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x61c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800422a:	f7fc fee7 	bl	8000ffc <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b64      	cmp	r3, #100	; 0x64
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x61c>
      {
        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e1e4      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800423c:	4b83      	ldr	r3, [pc, #524]	; (800444c <HAL_RCC_OscConfig+0x82c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x60a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d106      	bne.n	800425e <HAL_RCC_OscConfig+0x63e>
 8004250:	4b7c      	ldr	r3, [pc, #496]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a7b      	ldr	r2, [pc, #492]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
 800425c:	e02d      	b.n	80042ba <HAL_RCC_OscConfig+0x69a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x660>
 8004266:	4b77      	ldr	r3, [pc, #476]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a76      	ldr	r2, [pc, #472]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	4b74      	ldr	r3, [pc, #464]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a73      	ldr	r2, [pc, #460]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	e01c      	b.n	80042ba <HAL_RCC_OscConfig+0x69a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b05      	cmp	r3, #5
 8004286:	d10c      	bne.n	80042a2 <HAL_RCC_OscConfig+0x682>
 8004288:	4b6e      	ldr	r3, [pc, #440]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a6d      	ldr	r2, [pc, #436]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 800428e:	f043 0304 	orr.w	r3, r3, #4
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
 8004294:	4b6b      	ldr	r3, [pc, #428]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a6a      	ldr	r2, [pc, #424]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
 80042a0:	e00b      	b.n	80042ba <HAL_RCC_OscConfig+0x69a>
 80042a2:	4b68      	ldr	r3, [pc, #416]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4a67      	ldr	r2, [pc, #412]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70
 80042ae:	4b65      	ldr	r3, [pc, #404]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	4a64      	ldr	r2, [pc, #400]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 80042b4:	f023 0304 	bic.w	r3, r3, #4
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d015      	beq.n	80042ee <HAL_RCC_OscConfig+0x6ce>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fc fe9b 	bl	8000ffc <HAL_GetTick>
 80042c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c8:	e00a      	b.n	80042e0 <HAL_RCC_OscConfig+0x6c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fc fe97 	bl	8000ffc <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d8:	4293      	cmp	r3, r2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x6c0>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e192      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042e0:	4b58      	ldr	r3, [pc, #352]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ee      	beq.n	80042ca <HAL_RCC_OscConfig+0x6aa>
 80042ec:	e014      	b.n	8004318 <HAL_RCC_OscConfig+0x6f8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ee:	f7fc fe85 	bl	8000ffc <HAL_GetTick>
 80042f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042f4:	e00a      	b.n	800430c <HAL_RCC_OscConfig+0x6ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fc fe81 	bl	8000ffc <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f241 3288 	movw	r2, #5000	; 0x1388
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x6ec>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e17c      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800430c:	4b4d      	ldr	r3, [pc, #308]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ee      	bne.n	80042f6 <HAL_RCC_OscConfig+0x6d6>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00c      	beq.n	800433a <HAL_RCC_OscConfig+0x71a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	2b01      	cmp	r3, #1
 8004326:	d008      	beq.n	800433a <HAL_RCC_OscConfig+0x71a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	2b02      	cmp	r3, #2
 800432e:	d004      	beq.n	800433a <HAL_RCC_OscConfig+0x71a>
 8004330:	f240 21e3 	movw	r1, #739	; 0x2e3
 8004334:	4844      	ldr	r0, [pc, #272]	; (8004448 <HAL_RCC_OscConfig+0x828>)
 8004336:	f7fc fc44 	bl	8000bc2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 8160 	beq.w	8004604 <HAL_RCC_OscConfig+0x9e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004344:	4b3f      	ldr	r3, [pc, #252]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800434c:	2b18      	cmp	r3, #24
 800434e:	f000 811b 	beq.w	8004588 <HAL_RCC_OscConfig+0x968>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2b02      	cmp	r3, #2
 8004358:	f040 80fc 	bne.w	8004554 <HAL_RCC_OscConfig+0x934>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	2b01      	cmp	r3, #1
 8004362:	d010      	beq.n	8004386 <HAL_RCC_OscConfig+0x766>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00c      	beq.n	8004386 <HAL_RCC_OscConfig+0x766>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	2b03      	cmp	r3, #3
 8004372:	d008      	beq.n	8004386 <HAL_RCC_OscConfig+0x766>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	2b02      	cmp	r3, #2
 800437a:	d004      	beq.n	8004386 <HAL_RCC_OscConfig+0x766>
 800437c:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8004380:	4831      	ldr	r0, [pc, #196]	; (8004448 <HAL_RCC_OscConfig+0x828>)
 8004382:	f7fc fc1e 	bl	8000bc2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_RCC_OscConfig+0x776>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	2b3f      	cmp	r3, #63	; 0x3f
 8004394:	d904      	bls.n	80043a0 <HAL_RCC_OscConfig+0x780>
 8004396:	f240 21ed 	movw	r1, #749	; 0x2ed
 800439a:	482b      	ldr	r0, [pc, #172]	; (8004448 <HAL_RCC_OscConfig+0x828>)
 800439c:	f7fc fc11 	bl	8000bc2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d904      	bls.n	80043b2 <HAL_RCC_OscConfig+0x792>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b0:	d904      	bls.n	80043bc <HAL_RCC_OscConfig+0x79c>
 80043b2:	f240 21ee 	movw	r1, #750	; 0x2ee
 80043b6:	4824      	ldr	r0, [pc, #144]	; (8004448 <HAL_RCC_OscConfig+0x828>)
 80043b8:	f7fc fc03 	bl	8000bc2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_RCC_OscConfig+0x7ac>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c8:	2b80      	cmp	r3, #128	; 0x80
 80043ca:	d904      	bls.n	80043d6 <HAL_RCC_OscConfig+0x7b6>
 80043cc:	f240 21ef 	movw	r1, #751	; 0x2ef
 80043d0:	481d      	ldr	r0, [pc, #116]	; (8004448 <HAL_RCC_OscConfig+0x828>)
 80043d2:	f7fc fbf6 	bl	8000bc2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_OscConfig+0x7c6>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d904      	bls.n	80043f0 <HAL_RCC_OscConfig+0x7d0>
 80043e6:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80043ea:	4817      	ldr	r0, [pc, #92]	; (8004448 <HAL_RCC_OscConfig+0x828>)
 80043ec:	f7fc fbe9 	bl	8000bc2 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_RCC_OscConfig+0x7e0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d904      	bls.n	800440a <HAL_RCC_OscConfig+0x7ea>
 8004400:	f240 21f1 	movw	r1, #753	; 0x2f1
 8004404:	4810      	ldr	r0, [pc, #64]	; (8004448 <HAL_RCC_OscConfig+0x828>)
 8004406:	f7fc fbdc 	bl	8000bc2 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004412:	d304      	bcc.n	800441e <HAL_RCC_OscConfig+0x7fe>
 8004414:	f240 21f2 	movw	r1, #754	; 0x2f2
 8004418:	480b      	ldr	r0, [pc, #44]	; (8004448 <HAL_RCC_OscConfig+0x828>)
 800441a:	f7fc fbd2 	bl	8000bc2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a08      	ldr	r2, [pc, #32]	; (8004444 <HAL_RCC_OscConfig+0x824>)
 8004424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fc fde7 	bl	8000ffc <HAL_GetTick>
 800442e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004430:	e00e      	b.n	8004450 <HAL_RCC_OscConfig+0x830>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004432:	f7fc fde3 	bl	8000ffc <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d907      	bls.n	8004450 <HAL_RCC_OscConfig+0x830>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e0e0      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
 8004444:	58024400 	.word	0x58024400
 8004448:	08009e14 	.word	0x08009e14
 800444c:	58024800 	.word	0x58024800
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004450:	4b6f      	ldr	r3, [pc, #444]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ea      	bne.n	8004432 <HAL_RCC_OscConfig+0x812>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800445c:	4b6c      	ldr	r3, [pc, #432]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 800445e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004460:	4b6c      	ldr	r3, [pc, #432]	; (8004614 <HAL_RCC_OscConfig+0x9f4>)
 8004462:	4013      	ands	r3, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800446c:	0112      	lsls	r2, r2, #4
 800446e:	430a      	orrs	r2, r1
 8004470:	4967      	ldr	r1, [pc, #412]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 8004472:	4313      	orrs	r3, r2
 8004474:	628b      	str	r3, [r1, #40]	; 0x28
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	3b01      	subs	r3, #1
 800447c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	3b01      	subs	r3, #1
 8004486:	025b      	lsls	r3, r3, #9
 8004488:	b29b      	uxth	r3, r3
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	3b01      	subs	r3, #1
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	3b01      	subs	r3, #1
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044a6:	495a      	ldr	r1, [pc, #360]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044ac:	4b58      	ldr	r3, [pc, #352]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	4a57      	ldr	r2, [pc, #348]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044b8:	4b55      	ldr	r3, [pc, #340]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044bc:	4b56      	ldr	r3, [pc, #344]	; (8004618 <HAL_RCC_OscConfig+0x9f8>)
 80044be:	4013      	ands	r3, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044c4:	00d2      	lsls	r2, r2, #3
 80044c6:	4952      	ldr	r1, [pc, #328]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044cc:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f023 020c 	bic.w	r2, r3, #12
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	494d      	ldr	r1, [pc, #308]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044de:	4b4c      	ldr	r3, [pc, #304]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	f023 0202 	bic.w	r2, r3, #2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	4949      	ldr	r1, [pc, #292]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044f0:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	4a46      	ldr	r2, [pc, #280]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fc:	4b44      	ldr	r3, [pc, #272]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4a43      	ldr	r2, [pc, #268]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 8004502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004508:	4b41      	ldr	r3, [pc, #260]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	4a40      	ldr	r2, [pc, #256]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 800450e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004514:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	4a3d      	ldr	r2, [pc, #244]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004520:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a3a      	ldr	r2, [pc, #232]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 8004526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fc fd66 	bl	8000ffc <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x926>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fc fd62 	bl	8000ffc <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x926>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e05f      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004546:	4b32      	ldr	r3, [pc, #200]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x914>
 8004552:	e057      	b.n	8004604 <HAL_RCC_OscConfig+0x9e4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004554:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2d      	ldr	r2, [pc, #180]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 800455a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fc fd4c 	bl	8000ffc <HAL_GetTick>
 8004564:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x95a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004568:	f7fc fd48 	bl	8000ffc <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x95a>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e045      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800457a:	4b25      	ldr	r3, [pc, #148]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x948>
 8004586:	e03d      	b.n	8004604 <HAL_RCC_OscConfig+0x9e4>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004588:	4b21      	ldr	r3, [pc, #132]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_RCC_OscConfig+0x9f0>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b01      	cmp	r3, #1
 800459a:	d031      	beq.n	8004600 <HAL_RCC_OscConfig+0x9e0>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f003 0203 	and.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d12a      	bne.n	8004600 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d122      	bne.n	8004600 <HAL_RCC_OscConfig+0x9e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d11a      	bne.n	8004600 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	0a5b      	lsrs	r3, r3, #9
 80045ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d111      	bne.n	8004600 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d108      	bne.n	8004600 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_OscConfig+0x9e4>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <HAL_RCC_OscConfig+0x9e6>
      }
    }
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3730      	adds	r7, #48	; 0x30
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	58024400 	.word	0x58024400
 8004614:	fffffc0c 	.word	0xfffffc0c
 8004618:	ffff0007 	.word	0xffff0007

0800461c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e354      	b.n	8004cda <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_RCC_ClockConfig+0x24>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b3f      	cmp	r3, #63	; 0x3f
 800463e:	d904      	bls.n	800464a <HAL_RCC_ClockConfig+0x2e>
 8004640:	f240 317f 	movw	r1, #895	; 0x37f
 8004644:	4827      	ldr	r0, [pc, #156]	; (80046e4 <HAL_RCC_ClockConfig+0xc8>)
 8004646:	f7fc fabc 	bl	8000bc2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d031      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d02e      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d02b      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b03      	cmp	r3, #3
 8004660:	d028      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b04      	cmp	r3, #4
 8004666:	d025      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b05      	cmp	r3, #5
 800466c:	d022      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b06      	cmp	r3, #6
 8004672:	d01f      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b07      	cmp	r3, #7
 8004678:	d01c      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d019      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b09      	cmp	r3, #9
 8004684:	d016      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b0a      	cmp	r3, #10
 800468a:	d013      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b0b      	cmp	r3, #11
 8004690:	d010      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b0c      	cmp	r3, #12
 8004696:	d00d      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b0d      	cmp	r3, #13
 800469c:	d00a      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b0e      	cmp	r3, #14
 80046a2:	d007      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b0f      	cmp	r3, #15
 80046a8:	d004      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x98>
 80046aa:	f44f 7160 	mov.w	r1, #896	; 0x380
 80046ae:	480d      	ldr	r0, [pc, #52]	; (80046e4 <HAL_RCC_ClockConfig+0xc8>)
 80046b0:	f7fc fa87 	bl	8000bc2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <HAL_RCC_ClockConfig+0xcc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d914      	bls.n	80046ec <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0xcc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 020f 	bic.w	r2, r3, #15
 80046ca:	4907      	ldr	r1, [pc, #28]	; (80046e8 <HAL_RCC_ClockConfig+0xcc>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCC_ClockConfig+0xcc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e2fa      	b.n	8004cda <HAL_RCC_ClockConfig+0x6be>
 80046e4:	08009e14 	.word	0x08009e14
 80046e8:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d029      	beq.n	800474c <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	4b9a      	ldr	r3, [pc, #616]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004704:	429a      	cmp	r2, r3
 8004706:	d921      	bls.n	800474c <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d014      	beq.n	800473a <HAL_RCC_ClockConfig+0x11e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d010      	beq.n	800473a <HAL_RCC_ClockConfig+0x11e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b50      	cmp	r3, #80	; 0x50
 800471e:	d00c      	beq.n	800473a <HAL_RCC_ClockConfig+0x11e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b60      	cmp	r3, #96	; 0x60
 8004726:	d008      	beq.n	800473a <HAL_RCC_ClockConfig+0x11e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b70      	cmp	r3, #112	; 0x70
 800472e:	d004      	beq.n	800473a <HAL_RCC_ClockConfig+0x11e>
 8004730:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004734:	488d      	ldr	r0, [pc, #564]	; (800496c <HAL_RCC_ClockConfig+0x350>)
 8004736:	f7fc fa44 	bl	8000bc2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800473a:	4b8b      	ldr	r3, [pc, #556]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	4988      	ldr	r1, [pc, #544]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 8004748:	4313      	orrs	r3, r2
 800474a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d029      	beq.n	80047ac <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	695a      	ldr	r2, [r3, #20]
 800475c:	4b82      	ldr	r3, [pc, #520]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004764:	429a      	cmp	r2, r3
 8004766:	d921      	bls.n	80047ac <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d014      	beq.n	800479a <HAL_RCC_ClockConfig+0x17e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d010      	beq.n	800479a <HAL_RCC_ClockConfig+0x17e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	2b50      	cmp	r3, #80	; 0x50
 800477e:	d00c      	beq.n	800479a <HAL_RCC_ClockConfig+0x17e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	2b60      	cmp	r3, #96	; 0x60
 8004786:	d008      	beq.n	800479a <HAL_RCC_ClockConfig+0x17e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	2b70      	cmp	r3, #112	; 0x70
 800478e:	d004      	beq.n	800479a <HAL_RCC_ClockConfig+0x17e>
 8004790:	f240 31ae 	movw	r1, #942	; 0x3ae
 8004794:	4875      	ldr	r0, [pc, #468]	; (800496c <HAL_RCC_ClockConfig+0x350>)
 8004796:	f7fc fa14 	bl	8000bc2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800479a:	4b73      	ldr	r3, [pc, #460]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4970      	ldr	r1, [pc, #448]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02d      	beq.n	8004814 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d925      	bls.n	8004814 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d018      	beq.n	8004802 <HAL_RCC_ClockConfig+0x1e6>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d8:	d013      	beq.n	8004802 <HAL_RCC_ClockConfig+0x1e6>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80047e2:	d00e      	beq.n	8004802 <HAL_RCC_ClockConfig+0x1e6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047ec:	d009      	beq.n	8004802 <HAL_RCC_ClockConfig+0x1e6>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f6:	d004      	beq.n	8004802 <HAL_RCC_ClockConfig+0x1e6>
 80047f8:	f240 31bf 	movw	r1, #959	; 0x3bf
 80047fc:	485b      	ldr	r0, [pc, #364]	; (800496c <HAL_RCC_ClockConfig+0x350>)
 80047fe:	f7fc f9e0 	bl	8000bc2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004802:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	4956      	ldr	r1, [pc, #344]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d029      	beq.n	8004874 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800482c:	429a      	cmp	r2, r3
 800482e:	d921      	bls.n	8004874 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d014      	beq.n	8004862 <HAL_RCC_ClockConfig+0x246>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d010      	beq.n	8004862 <HAL_RCC_ClockConfig+0x246>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	2b50      	cmp	r3, #80	; 0x50
 8004846:	d00c      	beq.n	8004862 <HAL_RCC_ClockConfig+0x246>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b60      	cmp	r3, #96	; 0x60
 800484e:	d008      	beq.n	8004862 <HAL_RCC_ClockConfig+0x246>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	2b70      	cmp	r3, #112	; 0x70
 8004856:	d004      	beq.n	8004862 <HAL_RCC_ClockConfig+0x246>
 8004858:	f240 31d1 	movw	r1, #977	; 0x3d1
 800485c:	4843      	ldr	r0, [pc, #268]	; (800496c <HAL_RCC_ClockConfig+0x350>)
 800485e:	f7fc f9b0 	bl	8000bc2 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004862:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	493e      	ldr	r1, [pc, #248]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d039      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	4b38      	ldr	r3, [pc, #224]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	429a      	cmp	r2, r3
 800488e:	d931      	bls.n	80048f4 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d024      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x2c6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d020      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x2c6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b09      	cmp	r3, #9
 80048a6:	d01c      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x2c6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b0a      	cmp	r3, #10
 80048ae:	d018      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x2c6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b0b      	cmp	r3, #11
 80048b6:	d014      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x2c6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2b0c      	cmp	r3, #12
 80048be:	d010      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x2c6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b0d      	cmp	r3, #13
 80048c6:	d00c      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x2c6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b0e      	cmp	r3, #14
 80048ce:	d008      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x2c6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d004      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x2c6>
 80048d8:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 80048dc:	4823      	ldr	r0, [pc, #140]	; (800496c <HAL_RCC_ClockConfig+0x350>)
 80048de:	f7fc f970 	bl	8000bc2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e2:	4b21      	ldr	r3, [pc, #132]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f023 020f 	bic.w	r2, r3, #15
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	491e      	ldr	r1, [pc, #120]	; (8004968 <HAL_RCC_ClockConfig+0x34c>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a2 	beq.w	8004a46 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d032      	beq.n	8004970 <HAL_RCC_ClockConfig+0x354>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004912:	d02d      	beq.n	8004970 <HAL_RCC_ClockConfig+0x354>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800491c:	d028      	beq.n	8004970 <HAL_RCC_ClockConfig+0x354>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004926:	d023      	beq.n	8004970 <HAL_RCC_ClockConfig+0x354>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004930:	d01e      	beq.n	8004970 <HAL_RCC_ClockConfig+0x354>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800493a:	d019      	beq.n	8004970 <HAL_RCC_ClockConfig+0x354>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004944:	d014      	beq.n	8004970 <HAL_RCC_ClockConfig+0x354>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800494e:	d00f      	beq.n	8004970 <HAL_RCC_ClockConfig+0x354>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004958:	d00a      	beq.n	8004970 <HAL_RCC_ClockConfig+0x354>
 800495a:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 800495e:	4803      	ldr	r0, [pc, #12]	; (800496c <HAL_RCC_ClockConfig+0x350>)
 8004960:	f7fc f92f 	bl	8000bc2 <assert_failed>
 8004964:	e004      	b.n	8004970 <HAL_RCC_ClockConfig+0x354>
 8004966:	bf00      	nop
 8004968:	58024400 	.word	0x58024400
 800496c:	08009e14 	.word	0x08009e14
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d010      	beq.n	800499a <HAL_RCC_ClockConfig+0x37e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <HAL_RCC_ClockConfig+0x37e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d008      	beq.n	800499a <HAL_RCC_ClockConfig+0x37e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d004      	beq.n	800499a <HAL_RCC_ClockConfig+0x37e>
 8004990:	f240 31f5 	movw	r1, #1013	; 0x3f5
 8004994:	4858      	ldr	r0, [pc, #352]	; (8004af8 <HAL_RCC_ClockConfig+0x4dc>)
 8004996:	f7fc f914 	bl	8000bc2 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800499a:	4b58      	ldr	r3, [pc, #352]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	4955      	ldr	r1, [pc, #340]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d107      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049b4:	4b51      	ldr	r3, [pc, #324]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d121      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e18a      	b.n	8004cda <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049cc:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d115      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e17e      	b.n	8004cda <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049e4:	4b45      	ldr	r3, [pc, #276]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e172      	b.n	8004cda <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049f4:	4b41      	ldr	r3, [pc, #260]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e16a      	b.n	8004cda <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a04:	4b3d      	ldr	r3, [pc, #244]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f023 0207 	bic.w	r2, r3, #7
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	493a      	ldr	r1, [pc, #232]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fc faf1 	bl	8000ffc <HAL_GetTick>
 8004a1a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a1e:	f7fc faed 	bl	8000ffc <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e152      	b.n	8004cda <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a34:	4b31      	ldr	r3, [pc, #196]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d1eb      	bne.n	8004a1e <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d039      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	4b29      	ldr	r3, [pc, #164]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d231      	bcs.n	8004ac6 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d024      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x498>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d020      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x498>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b09      	cmp	r3, #9
 8004a78:	d01c      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x498>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b0a      	cmp	r3, #10
 8004a80:	d018      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x498>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b0b      	cmp	r3, #11
 8004a88:	d014      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x498>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d010      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x498>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2b0d      	cmp	r3, #13
 8004a98:	d00c      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x498>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b0e      	cmp	r3, #14
 8004aa0:	d008      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x498>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b0f      	cmp	r3, #15
 8004aa8:	d004      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x498>
 8004aaa:	f240 4136 	movw	r1, #1078	; 0x436
 8004aae:	4812      	ldr	r0, [pc, #72]	; (8004af8 <HAL_RCC_ClockConfig+0x4dc>)
 8004ab0:	f7fc f887 	bl	8000bc2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab4:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	f023 020f 	bic.w	r2, r3, #15
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	490e      	ldr	r1, [pc, #56]	; (8004afc <HAL_RCC_ClockConfig+0x4e0>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <HAL_RCC_ClockConfig+0x4e4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d217      	bcs.n	8004b04 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <HAL_RCC_ClockConfig+0x4e4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f023 020f 	bic.w	r2, r3, #15
 8004adc:	4908      	ldr	r1, [pc, #32]	; (8004b00 <HAL_RCC_ClockConfig+0x4e4>)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_RCC_ClockConfig+0x4e4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d008      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0f1      	b.n	8004cda <HAL_RCC_ClockConfig+0x6be>
 8004af6:	bf00      	nop
 8004af8:	08009e14 	.word	0x08009e14
 8004afc:	58024400 	.word	0x58024400
 8004b00:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d029      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	4b73      	ldr	r3, [pc, #460]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d221      	bcs.n	8004b64 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d014      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x536>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d010      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x536>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b50      	cmp	r3, #80	; 0x50
 8004b36:	d00c      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x536>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b60      	cmp	r3, #96	; 0x60
 8004b3e:	d008      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x536>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b70      	cmp	r3, #112	; 0x70
 8004b46:	d004      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x536>
 8004b48:	f240 4157 	movw	r1, #1111	; 0x457
 8004b4c:	4866      	ldr	r0, [pc, #408]	; (8004ce8 <HAL_RCC_ClockConfig+0x6cc>)
 8004b4e:	f7fc f838 	bl	8000bc2 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b52:	4b64      	ldr	r3, [pc, #400]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	4961      	ldr	r1, [pc, #388]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d029      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695a      	ldr	r2, [r3, #20]
 8004b74:	4b5b      	ldr	r3, [pc, #364]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d221      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d014      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x596>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d010      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x596>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	2b50      	cmp	r3, #80	; 0x50
 8004b96:	d00c      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x596>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	2b60      	cmp	r3, #96	; 0x60
 8004b9e:	d008      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x596>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	2b70      	cmp	r3, #112	; 0x70
 8004ba6:	d004      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x596>
 8004ba8:	f240 4169 	movw	r1, #1129	; 0x469
 8004bac:	484e      	ldr	r0, [pc, #312]	; (8004ce8 <HAL_RCC_ClockConfig+0x6cc>)
 8004bae:	f7fc f808 	bl	8000bc2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bb2:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4949      	ldr	r1, [pc, #292]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d02d      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	4b43      	ldr	r3, [pc, #268]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d225      	bcs.n	8004c2c <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d018      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x5fe>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf0:	d013      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x5fe>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004bfa:	d00e      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x5fe>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c04:	d009      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x5fe>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0e:	d004      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x5fe>
 8004c10:	f240 417b 	movw	r1, #1147	; 0x47b
 8004c14:	4834      	ldr	r0, [pc, #208]	; (8004ce8 <HAL_RCC_ClockConfig+0x6cc>)
 8004c16:	f7fb ffd4 	bl	8000bc2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c1a:	4b32      	ldr	r3, [pc, #200]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	492f      	ldr	r1, [pc, #188]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d029      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d221      	bcs.n	8004c8c <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d014      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x65e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d010      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x65e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	2b50      	cmp	r3, #80	; 0x50
 8004c5e:	d00c      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x65e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	2b60      	cmp	r3, #96	; 0x60
 8004c66:	d008      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x65e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	2b70      	cmp	r3, #112	; 0x70
 8004c6e:	d004      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x65e>
 8004c70:	f240 418d 	movw	r1, #1165	; 0x48d
 8004c74:	481c      	ldr	r0, [pc, #112]	; (8004ce8 <HAL_RCC_ClockConfig+0x6cc>)
 8004c76:	f7fb ffa4 	bl	8000bc2 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	4917      	ldr	r1, [pc, #92]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c8c:	f000 f836 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004c90:	4601      	mov	r1, r0
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	4a13      	ldr	r2, [pc, #76]	; (8004cec <HAL_RCC_ClockConfig+0x6d0>)
 8004c9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	fa21 f303 	lsr.w	r3, r1, r3
 8004ca8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <HAL_RCC_ClockConfig+0x6c8>)
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <HAL_RCC_ClockConfig+0x6d0>)
 8004cb4:	5cd3      	ldrb	r3, [r2, r3]
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	4a0b      	ldr	r2, [pc, #44]	; (8004cf0 <HAL_RCC_ClockConfig+0x6d4>)
 8004cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cc4:	4a0b      	ldr	r2, [pc, #44]	; (8004cf4 <HAL_RCC_ClockConfig+0x6d8>)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_ClockConfig+0x6dc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fc f94a 	bl	8000f68 <HAL_InitTick>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	08009e14 	.word	0x08009e14
 8004cec:	08009f10 	.word	0x08009f10
 8004cf0:	24000004 	.word	0x24000004
 8004cf4:	24000000 	.word	0x24000000
 8004cf8:	24000008 	.word	0x24000008

08004cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b089      	sub	sp, #36	; 0x24
 8004d00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d02:	4baf      	ldr	r3, [pc, #700]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d0a:	2b18      	cmp	r3, #24
 8004d0c:	f200 814e 	bhi.w	8004fac <HAL_RCC_GetSysClockFreq+0x2b0>
 8004d10:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004d7d 	.word	0x08004d7d
 8004d1c:	08004fad 	.word	0x08004fad
 8004d20:	08004fad 	.word	0x08004fad
 8004d24:	08004fad 	.word	0x08004fad
 8004d28:	08004fad 	.word	0x08004fad
 8004d2c:	08004fad 	.word	0x08004fad
 8004d30:	08004fad 	.word	0x08004fad
 8004d34:	08004fad 	.word	0x08004fad
 8004d38:	08004da3 	.word	0x08004da3
 8004d3c:	08004fad 	.word	0x08004fad
 8004d40:	08004fad 	.word	0x08004fad
 8004d44:	08004fad 	.word	0x08004fad
 8004d48:	08004fad 	.word	0x08004fad
 8004d4c:	08004fad 	.word	0x08004fad
 8004d50:	08004fad 	.word	0x08004fad
 8004d54:	08004fad 	.word	0x08004fad
 8004d58:	08004da9 	.word	0x08004da9
 8004d5c:	08004fad 	.word	0x08004fad
 8004d60:	08004fad 	.word	0x08004fad
 8004d64:	08004fad 	.word	0x08004fad
 8004d68:	08004fad 	.word	0x08004fad
 8004d6c:	08004fad 	.word	0x08004fad
 8004d70:	08004fad 	.word	0x08004fad
 8004d74:	08004fad 	.word	0x08004fad
 8004d78:	08004daf 	.word	0x08004daf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d7c:	4b90      	ldr	r3, [pc, #576]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d88:	4b8d      	ldr	r3, [pc, #564]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	08db      	lsrs	r3, r3, #3
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	4a8c      	ldr	r2, [pc, #560]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
 8004d98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004d9a:	e10a      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d9c:	4b89      	ldr	r3, [pc, #548]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004d9e:	61bb      	str	r3, [r7, #24]
    break;
 8004da0:	e107      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004da2:	4b89      	ldr	r3, [pc, #548]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004da4:	61bb      	str	r3, [r7, #24]
    break;
 8004da6:	e104      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004da8:	4b88      	ldr	r3, [pc, #544]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004daa:	61bb      	str	r3, [r7, #24]
    break;
 8004dac:	e101      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dae:	4b84      	ldr	r3, [pc, #528]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004db8:	4b81      	ldr	r3, [pc, #516]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004dc4:	4b7e      	ldr	r3, [pc, #504]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004dce:	4b7c      	ldr	r3, [pc, #496]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd2:	08db      	lsrs	r3, r3, #3
 8004dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	fb02 f303 	mul.w	r3, r2, r3
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80da 	beq.w	8004fa6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d05a      	beq.n	8004eae <HAL_RCC_GetSysClockFreq+0x1b2>
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d302      	bcc.n	8004e02 <HAL_RCC_GetSysClockFreq+0x106>
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d078      	beq.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004e00:	e099      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e02:	4b6f      	ldr	r3, [pc, #444]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d02d      	beq.n	8004e6a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e0e:	4b6c      	ldr	r3, [pc, #432]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	08db      	lsrs	r3, r3, #3
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	4a6a      	ldr	r2, [pc, #424]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e38:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e48:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e4c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004fd0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e64:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e68:	e087      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e74:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004fd4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7c:	4b50      	ldr	r3, [pc, #320]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e90:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004fd0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eac:	e065      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004fd8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec0:	4b3f      	ldr	r3, [pc, #252]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec8:	ee07 3a90 	vmov	s15, r3
 8004ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ed4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004fd0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef0:	e043      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e0>
 8004f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f04:	4b2e      	ldr	r3, [pc, #184]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f14:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f18:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004fd0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f34:	e021      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f40:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004fd8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f58:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f5c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004fd0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004f60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f78:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004f7a:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	0a5b      	lsrs	r3, r3, #9
 8004f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f84:	3301      	adds	r3, #1
 8004f86:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9e:	ee17 3a90 	vmov	r3, s15
 8004fa2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004fa4:	e005      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61bb      	str	r3, [r7, #24]
    break;
 8004faa:	e002      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004fae:	61bb      	str	r3, [r7, #24]
    break;
 8004fb0:	bf00      	nop
  }

  return sysclockfreq;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3724      	adds	r7, #36	; 0x24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	03d09000 	.word	0x03d09000
 8004fc8:	003d0900 	.word	0x003d0900
 8004fcc:	007a1200 	.word	0x007a1200
 8004fd0:	46000000 	.word	0x46000000
 8004fd4:	4c742400 	.word	0x4c742400
 8004fd8:	4a742400 	.word	0x4a742400
 8004fdc:	4af42400 	.word	0x4af42400

08004fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fe6:	f7ff fe89 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004fea:	4601      	mov	r1, r0
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	0a1b      	lsrs	r3, r3, #8
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	4a0f      	ldr	r2, [pc, #60]	; (8005034 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ff8:	5cd3      	ldrb	r3, [r2, r3]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	fa21 f303 	lsr.w	r3, r1, r3
 8005002:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_RCC_GetHCLKFreq+0x50>)
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	4a09      	ldr	r2, [pc, #36]	; (8005034 <HAL_RCC_GetHCLKFreq+0x54>)
 800500e:	5cd3      	ldrb	r3, [r2, r3]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	fa22 f303 	lsr.w	r3, r2, r3
 800501a:	4a07      	ldr	r2, [pc, #28]	; (8005038 <HAL_RCC_GetHCLKFreq+0x58>)
 800501c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800501e:	4a07      	ldr	r2, [pc, #28]	; (800503c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <HAL_RCC_GetHCLKFreq+0x58>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	58024400 	.word	0x58024400
 8005034:	08009f10 	.word	0x08009f10
 8005038:	24000004 	.word	0x24000004
 800503c:	24000000 	.word	0x24000000

08005040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005044:	f7ff ffcc 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005048:	4601      	mov	r1, r0
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	091b      	lsrs	r3, r3, #4
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4a04      	ldr	r2, [pc, #16]	; (8005068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005056:	5cd3      	ldrb	r3, [r2, r3]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}
 8005064:	58024400 	.word	0x58024400
 8005068:	08009f10 	.word	0x08009f10

0800506c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005070:	f7ff ffb6 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005074:	4601      	mov	r1, r0
 8005076:	4b06      	ldr	r3, [pc, #24]	; (8005090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	0a1b      	lsrs	r3, r3, #8
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	4a04      	ldr	r2, [pc, #16]	; (8005094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005082:	5cd3      	ldrb	r3, [r2, r3]
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800508c:	4618      	mov	r0, r3
 800508e:	bd80      	pop	{r7, pc}
 8005090:	58024400 	.word	0x58024400
 8005094:	08009f10 	.word	0x08009f10

08005098 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050a0:	2300      	movs	r3, #0
 80050a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050a4:	2300      	movs	r3, #0
 80050a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d03d      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050bc:	d013      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80050be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c2:	d802      	bhi.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80050c8:	e01f      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80050ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ce:	d013      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80050d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050d4:	d01c      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80050d6:	e018      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d8:	4baf      	ldr	r3, [pc, #700]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	4aae      	ldr	r2, [pc, #696]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80050e4:	e015      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3304      	adds	r3, #4
 80050ea:	2102      	movs	r1, #2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 fc01 	bl	80068f4 <RCCEx_PLL2_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80050f6:	e00c      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3324      	adds	r3, #36	; 0x24
 80050fc:	2102      	movs	r1, #2
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fd1a 	bl	8006b38 <RCCEx_PLL3_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005108:	e003      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	75fb      	strb	r3, [r7, #23]
      break;
 800510e:	e000      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d109      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005118:	4b9f      	ldr	r3, [pc, #636]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005124:	499c      	ldr	r1, [pc, #624]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005126:	4313      	orrs	r3, r2
 8005128:	650b      	str	r3, [r1, #80]	; 0x50
 800512a:	e001      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d03d      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	2b04      	cmp	r3, #4
 8005142:	d826      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005161 	.word	0x08005161
 8005150:	0800516f 	.word	0x0800516f
 8005154:	08005181 	.word	0x08005181
 8005158:	08005199 	.word	0x08005199
 800515c:	08005199 	.word	0x08005199
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005160:	4b8d      	ldr	r3, [pc, #564]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	4a8c      	ldr	r2, [pc, #560]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800516a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800516c:	e015      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3304      	adds	r3, #4
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f001 fbbd 	bl	80068f4 <RCCEx_PLL2_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800517e:	e00c      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3324      	adds	r3, #36	; 0x24
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f001 fcd6 	bl	8006b38 <RCCEx_PLL3_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005190:	e003      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	75fb      	strb	r3, [r7, #23]
      break;
 8005196:	e000      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800519a:	7dfb      	ldrb	r3, [r7, #23]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d109      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051a0:	4b7d      	ldr	r3, [pc, #500]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a4:	f023 0207 	bic.w	r2, r3, #7
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ac:	497a      	ldr	r1, [pc, #488]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	650b      	str	r3, [r1, #80]	; 0x50
 80051b2:	e001      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d03e      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	2b80      	cmp	r3, #128	; 0x80
 80051ca:	d01c      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80051cc:	2b80      	cmp	r3, #128	; 0x80
 80051ce:	d804      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x142>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d00d      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80051d8:	e01e      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80051da:	2bc0      	cmp	r3, #192	; 0xc0
 80051dc:	d01f      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80051de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e2:	d01e      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80051e4:	e018      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e6:	4b6c      	ldr	r3, [pc, #432]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	4a6b      	ldr	r2, [pc, #428]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80051f2:	e017      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3304      	adds	r3, #4
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 fb7a 	bl	80068f4 <RCCEx_PLL2_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005204:	e00e      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3324      	adds	r3, #36	; 0x24
 800520a:	2100      	movs	r1, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f001 fc93 	bl	8006b38 <RCCEx_PLL3_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005216:	e005      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
      break;
 800521c:	e002      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800521e:	bf00      	nop
 8005220:	e000      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005224:	7dfb      	ldrb	r3, [r7, #23]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800522a:	4b5b      	ldr	r3, [pc, #364]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800522c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005236:	4958      	ldr	r1, [pc, #352]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005238:	4313      	orrs	r3, r2
 800523a:	650b      	str	r3, [r1, #80]	; 0x50
 800523c:	e001      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523e:	7dfb      	ldrb	r3, [r7, #23]
 8005240:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524a:	2b00      	cmp	r3, #0
 800524c:	d044      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005258:	d01f      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800525a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800525e:	d805      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005268:	d00e      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800526a:	e01f      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x214>
 800526c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005270:	d01f      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005276:	d01e      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005278:	e018      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800527a:	4b47      	ldr	r3, [pc, #284]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	4a46      	ldr	r2, [pc, #280]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005286:	e017      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	2100      	movs	r1, #0
 800528e:	4618      	mov	r0, r3
 8005290:	f001 fb30 	bl	80068f4 <RCCEx_PLL2_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005298:	e00e      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3324      	adds	r3, #36	; 0x24
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fc49 	bl	8006b38 <RCCEx_PLL3_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052aa:	e005      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	75fb      	strb	r3, [r7, #23]
      break;
 80052b0:	e002      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80052b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80052be:	4b36      	ldr	r3, [pc, #216]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052cc:	4932      	ldr	r1, [pc, #200]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	658b      	str	r3, [r1, #88]	; 0x58
 80052d2:	e001      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d044      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ee:	d01f      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80052f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052f4:	d805      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80052fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052fe:	d00e      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005300:	e01f      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005302:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005306:	d01f      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800530c:	d01e      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800530e:	e018      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005310:	4b21      	ldr	r3, [pc, #132]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	4a20      	ldr	r2, [pc, #128]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800531a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800531c:	e017      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f001 fae5 	bl	80068f4 <RCCEx_PLL2_Config>
 800532a:	4603      	mov	r3, r0
 800532c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800532e:	e00e      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3324      	adds	r3, #36	; 0x24
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f001 fbfe 	bl	8006b38 <RCCEx_PLL3_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005340:	e005      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
      break;
 8005346:	e002      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005348:	bf00      	nop
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800534c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005354:	4b10      	ldr	r3, [pc, #64]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005362:	490d      	ldr	r1, [pc, #52]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005364:	4313      	orrs	r3, r2
 8005366:	658b      	str	r3, [r1, #88]	; 0x58
 8005368:	e001      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536a:	7dfb      	ldrb	r3, [r7, #23]
 800536c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d035      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537e:	2b10      	cmp	r3, #16
 8005380:	d00c      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005382:	2b10      	cmp	r3, #16
 8005384:	d802      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01b      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800538a:	e017      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x324>
 800538c:	2b20      	cmp	r3, #32
 800538e:	d00c      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005390:	2b30      	cmp	r3, #48	; 0x30
 8005392:	d018      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005394:	e012      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005396:	bf00      	nop
 8005398:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539c:	4baf      	ldr	r3, [pc, #700]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	4aae      	ldr	r2, [pc, #696]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80053a8:	e00e      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3304      	adds	r3, #4
 80053ae:	2102      	movs	r1, #2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 fa9f 	bl	80068f4 <RCCEx_PLL2_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80053ba:	e005      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
      break;
 80053c0:	e002      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80053c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053ce:	4ba3      	ldr	r3, [pc, #652]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053da:	49a0      	ldr	r1, [pc, #640]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053e0:	e001      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d042      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fa:	d01f      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80053fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005400:	d805      	bhi.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	d00e      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800540c:	e01f      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800540e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005412:	d01f      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005418:	d01e      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800541a:	e018      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800541c:	4b8f      	ldr	r3, [pc, #572]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	4a8e      	ldr	r2, [pc, #568]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005426:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005428:	e017      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3304      	adds	r3, #4
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f001 fa5f 	bl	80068f4 <RCCEx_PLL2_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800543a:	e00e      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3324      	adds	r3, #36	; 0x24
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f001 fb78 	bl	8006b38 <RCCEx_PLL3_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800544c:	e005      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	75fb      	strb	r3, [r7, #23]
      break;
 8005452:	e002      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005454:	bf00      	nop
 8005456:	e000      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545a:	7dfb      	ldrb	r3, [r7, #23]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d109      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005460:	4b7e      	ldr	r3, [pc, #504]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005464:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546c:	497b      	ldr	r1, [pc, #492]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800546e:	4313      	orrs	r3, r2
 8005470:	650b      	str	r3, [r1, #80]	; 0x50
 8005472:	e001      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d042      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800548c:	d01b      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800548e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005492:	d805      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005494:	2b00      	cmp	r3, #0
 8005496:	d022      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549c:	d00a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800549e:	e01b      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80054a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054a4:	d01d      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80054a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054aa:	d01c      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80054ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054b0:	d01b      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x452>
 80054b2:	e011      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3304      	adds	r3, #4
 80054b8:	2101      	movs	r1, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fa1a 	bl	80068f4 <RCCEx_PLL2_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80054c4:	e012      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3324      	adds	r3, #36	; 0x24
 80054ca:	2101      	movs	r1, #1
 80054cc:	4618      	mov	r0, r3
 80054ce:	f001 fb33 	bl	8006b38 <RCCEx_PLL3_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80054d6:	e009      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	75fb      	strb	r3, [r7, #23]
      break;
 80054dc:	e006      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80054de:	bf00      	nop
 80054e0:	e004      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80054e2:	bf00      	nop
 80054e4:	e002      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80054e6:	bf00      	nop
 80054e8:	e000      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80054ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054f2:	4b5a      	ldr	r3, [pc, #360]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fe:	4957      	ldr	r1, [pc, #348]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005500:	4313      	orrs	r3, r2
 8005502:	650b      	str	r3, [r1, #80]	; 0x50
 8005504:	e001      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d044      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800551c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005520:	d01b      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005526:	d805      	bhi.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d022      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800552c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005532:	e01b      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005538:	d01d      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800553a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800553e:	d01c      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005540:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005544:	d01b      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005546:	e011      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	2101      	movs	r1, #1
 800554e:	4618      	mov	r0, r3
 8005550:	f001 f9d0 	bl	80068f4 <RCCEx_PLL2_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005558:	e012      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3324      	adds	r3, #36	; 0x24
 800555e:	2101      	movs	r1, #1
 8005560:	4618      	mov	r0, r3
 8005562:	f001 fae9 	bl	8006b38 <RCCEx_PLL3_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800556a:	e009      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
      break;
 8005570:	e006      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005572:	bf00      	nop
 8005574:	e004      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005576:	bf00      	nop
 8005578:	e002      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800557a:	bf00      	nop
 800557c:	e000      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800557e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005586:	4b35      	ldr	r3, [pc, #212]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005594:	4931      	ldr	r1, [pc, #196]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005596:	4313      	orrs	r3, r2
 8005598:	658b      	str	r3, [r1, #88]	; 0x58
 800559a:	e001      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d02d      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b4:	d005      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80055b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ba:	d009      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d013      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80055c0:	e00f      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c2:	4b26      	ldr	r3, [pc, #152]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	4a25      	ldr	r2, [pc, #148]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80055ce:	e00c      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	2101      	movs	r1, #1
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 f98c 	bl	80068f4 <RCCEx_PLL2_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80055e0:	e003      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
      break;
 80055e6:	e000      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80055e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055f0:	4b1a      	ldr	r3, [pc, #104]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fc:	4917      	ldr	r1, [pc, #92]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	650b      	str	r3, [r1, #80]	; 0x50
 8005602:	e001      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d037      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	2b03      	cmp	r3, #3
 800561a:	d81b      	bhi.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005661 	.word	0x08005661
 8005628:	08005635 	.word	0x08005635
 800562c:	08005643 	.word	0x08005643
 8005630:	08005661 	.word	0x08005661
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005634:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	4a08      	ldr	r2, [pc, #32]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800563a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800563e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005640:	e00f      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3304      	adds	r3, #4
 8005646:	2102      	movs	r1, #2
 8005648:	4618      	mov	r0, r3
 800564a:	f001 f953 	bl	80068f4 <RCCEx_PLL2_Config>
 800564e:	4603      	mov	r3, r0
 8005650:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005652:	e006      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	75fb      	strb	r3, [r7, #23]
      break;
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800565a:	bf00      	nop
 800565c:	58024400 	.word	0x58024400
      break;
 8005660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005662:	7dfb      	ldrb	r3, [r7, #23]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800566a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566c:	f023 0203 	bic.w	r2, r3, #3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005674:	4901      	ldr	r1, [pc, #4]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005676:	4313      	orrs	r3, r2
 8005678:	64cb      	str	r3, [r1, #76]	; 0x4c
 800567a:	e003      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 800567c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 829b 	beq.w	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800569c:	f000 81a9 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056aa:	f000 81a2 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056b4:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 80056b8:	f000 819b 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056c2:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 80056c6:	f000 8194 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056d0:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 80056d4:	f000 818d 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056de:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 80056e2:	f000 8186 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056ec:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 80056f0:	f000 817f 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056fa:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 80056fe:	f000 8178 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005708:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800570c:	f000 8171 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005716:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800571a:	f000 816a 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005724:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8005728:	f000 8163 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005732:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8005736:	f000 815c 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005740:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8005744:	f000 8155 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800574e:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8005752:	f000 814e 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800575c:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8005760:	f000 8147 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800576a:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 800576e:	f000 8140 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005778:	4aa8      	ldr	r2, [pc, #672]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800577a:	4293      	cmp	r3, r2
 800577c:	f000 8139 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005786:	4aa6      	ldr	r2, [pc, #664]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8005788:	4293      	cmp	r3, r2
 800578a:	f000 8132 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005794:	4aa3      	ldr	r2, [pc, #652]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	f000 812b 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057a2:	4aa1      	ldr	r2, [pc, #644]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	f000 8124 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057b0:	4a9e      	ldr	r2, [pc, #632]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	f000 811d 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057be:	4a9c      	ldr	r2, [pc, #624]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	f000 8116 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057cc:	4a99      	ldr	r2, [pc, #612]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	f000 810f 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057da:	4a97      	ldr	r2, [pc, #604]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	f000 8108 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057e8:	4a94      	ldr	r2, [pc, #592]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	f000 8101 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057f6:	4a92      	ldr	r2, [pc, #584]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	f000 80fa 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005804:	4a8f      	ldr	r2, [pc, #572]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8005806:	4293      	cmp	r3, r2
 8005808:	f000 80f3 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005812:	4a8d      	ldr	r2, [pc, #564]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	f000 80ec 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005820:	4a8a      	ldr	r2, [pc, #552]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	f000 80e5 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800582e:	4a88      	ldr	r2, [pc, #544]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	f000 80de 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800583c:	4a85      	ldr	r2, [pc, #532]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	f000 80d7 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800584a:	4a83      	ldr	r2, [pc, #524]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	f000 80d0 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005858:	4a80      	ldr	r2, [pc, #512]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	f000 80c9 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005866:	4a7e      	ldr	r2, [pc, #504]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	f000 80c2 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005874:	4a7b      	ldr	r2, [pc, #492]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	f000 80bb 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005882:	4a79      	ldr	r2, [pc, #484]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	f000 80b4 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005890:	4a76      	ldr	r2, [pc, #472]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	f000 80ad 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800589e:	4a74      	ldr	r2, [pc, #464]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	f000 80a6 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058ac:	4a71      	ldr	r2, [pc, #452]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	f000 809f 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058ba:	4a6f      	ldr	r2, [pc, #444]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	f000 8098 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058c8:	4a6c      	ldr	r2, [pc, #432]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	f000 8091 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058d6:	4a6a      	ldr	r2, [pc, #424]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	f000 808a 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058e4:	4a67      	ldr	r2, [pc, #412]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	f000 8083 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058f2:	4a65      	ldr	r2, [pc, #404]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d07c      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058fe:	4a63      	ldr	r2, [pc, #396]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d076      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800590a:	4a61      	ldr	r2, [pc, #388]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d070      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005916:	4a5f      	ldr	r2, [pc, #380]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d06a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005922:	4a5d      	ldr	r2, [pc, #372]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d064      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800592e:	4a5b      	ldr	r2, [pc, #364]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d05e      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800593a:	4a59      	ldr	r2, [pc, #356]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d058      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005946:	4a57      	ldr	r2, [pc, #348]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d052      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005952:	4a55      	ldr	r2, [pc, #340]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d04c      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800595e:	4a53      	ldr	r2, [pc, #332]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d046      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800596a:	4a51      	ldr	r2, [pc, #324]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d040      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005976:	4a4f      	ldr	r2, [pc, #316]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d03a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005982:	4a4d      	ldr	r2, [pc, #308]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d034      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800598e:	4a4b      	ldr	r2, [pc, #300]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d02e      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800599a:	4a49      	ldr	r2, [pc, #292]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d028      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059a6:	4a47      	ldr	r2, [pc, #284]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d022      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059b2:	4a45      	ldr	r2, [pc, #276]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d01c      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059be:	4a43      	ldr	r2, [pc, #268]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d016      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059ca:	4a41      	ldr	r2, [pc, #260]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d010      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059d6:	4a3f      	ldr	r2, [pc, #252]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059e2:	4a3d      	ldr	r2, [pc, #244]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059e8:	f44f 715a 	mov.w	r1, #872	; 0x368
 80059ec:	483b      	ldr	r0, [pc, #236]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 80059ee:	f7fb f8e8 	bl	8000bc2 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059f2:	4b3b      	ldr	r3, [pc, #236]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a3a      	ldr	r2, [pc, #232]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 80059f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059fe:	f7fb fafd 	bl	8000ffc <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a04:	e06e      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a06:	f7fb faf9 	bl	8000ffc <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b64      	cmp	r3, #100	; 0x64
 8005a12:	d967      	bls.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	75fb      	strb	r3, [r7, #23]
        break;
 8005a18:	e06a      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8005a1a:	bf00      	nop
 8005a1c:	00010300 	.word	0x00010300
 8005a20:	00011300 	.word	0x00011300
 8005a24:	00012300 	.word	0x00012300
 8005a28:	00013300 	.word	0x00013300
 8005a2c:	00014300 	.word	0x00014300
 8005a30:	00015300 	.word	0x00015300
 8005a34:	00016300 	.word	0x00016300
 8005a38:	00017300 	.word	0x00017300
 8005a3c:	00018300 	.word	0x00018300
 8005a40:	00019300 	.word	0x00019300
 8005a44:	0001a300 	.word	0x0001a300
 8005a48:	0001b300 	.word	0x0001b300
 8005a4c:	0001c300 	.word	0x0001c300
 8005a50:	0001d300 	.word	0x0001d300
 8005a54:	0001e300 	.word	0x0001e300
 8005a58:	0001f300 	.word	0x0001f300
 8005a5c:	00020300 	.word	0x00020300
 8005a60:	00021300 	.word	0x00021300
 8005a64:	00022300 	.word	0x00022300
 8005a68:	00023300 	.word	0x00023300
 8005a6c:	00024300 	.word	0x00024300
 8005a70:	00025300 	.word	0x00025300
 8005a74:	00026300 	.word	0x00026300
 8005a78:	00027300 	.word	0x00027300
 8005a7c:	00028300 	.word	0x00028300
 8005a80:	00029300 	.word	0x00029300
 8005a84:	0002a300 	.word	0x0002a300
 8005a88:	0002b300 	.word	0x0002b300
 8005a8c:	0002c300 	.word	0x0002c300
 8005a90:	0002d300 	.word	0x0002d300
 8005a94:	0002e300 	.word	0x0002e300
 8005a98:	0002f300 	.word	0x0002f300
 8005a9c:	00030300 	.word	0x00030300
 8005aa0:	00031300 	.word	0x00031300
 8005aa4:	00032300 	.word	0x00032300
 8005aa8:	00033300 	.word	0x00033300
 8005aac:	00034300 	.word	0x00034300
 8005ab0:	00035300 	.word	0x00035300
 8005ab4:	00036300 	.word	0x00036300
 8005ab8:	00037300 	.word	0x00037300
 8005abc:	00038300 	.word	0x00038300
 8005ac0:	00039300 	.word	0x00039300
 8005ac4:	0003a300 	.word	0x0003a300
 8005ac8:	0003b300 	.word	0x0003b300
 8005acc:	0003c300 	.word	0x0003c300
 8005ad0:	0003d300 	.word	0x0003d300
 8005ad4:	0003e300 	.word	0x0003e300
 8005ad8:	0003f300 	.word	0x0003f300
 8005adc:	08009e4c 	.word	0x08009e4c
 8005ae0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ae4:	4bb9      	ldr	r3, [pc, #740]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d08a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d166      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005af6:	4bb6      	ldr	r3, [pc, #728]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005af8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b00:	4053      	eors	r3, r2
 8005b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d013      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b0a:	4bb1      	ldr	r3, [pc, #708]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b14:	4bae      	ldr	r3, [pc, #696]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	4aad      	ldr	r2, [pc, #692]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b20:	4bab      	ldr	r3, [pc, #684]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	4aaa      	ldr	r2, [pc, #680]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b2c:	4aa8      	ldr	r2, [pc, #672]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3c:	d115      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3e:	f7fb fa5d 	bl	8000ffc <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b44:	e00b      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b46:	f7fb fa59 	bl	8000ffc <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d902      	bls.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	75fb      	strb	r3, [r7, #23]
            break;
 8005b5c:	e005      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b5e:	4b9c      	ldr	r3, [pc, #624]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0ed      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d126      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b7e:	d10d      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8005b80:	4b93      	ldr	r3, [pc, #588]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b8e:	0919      	lsrs	r1, r3, #4
 8005b90:	4b90      	ldr	r3, [pc, #576]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b92:	400b      	ands	r3, r1
 8005b94:	498e      	ldr	r1, [pc, #568]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	610b      	str	r3, [r1, #16]
 8005b9a:	e005      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8005b9c:	4b8c      	ldr	r3, [pc, #560]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	4a8b      	ldr	r2, [pc, #556]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ba2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ba6:	6113      	str	r3, [r2, #16]
 8005ba8:	4b89      	ldr	r3, [pc, #548]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb6:	4986      	ldr	r1, [pc, #536]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	670b      	str	r3, [r1, #112]	; 0x70
 8005bbc:	e004      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	75bb      	strb	r3, [r7, #22]
 8005bc2:	e001      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d07e      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd8:	2b28      	cmp	r3, #40	; 0x28
 8005bda:	d867      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8005bdc:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005cb3 	.word	0x08005cb3
 8005be8:	08005cad 	.word	0x08005cad
 8005bec:	08005cad 	.word	0x08005cad
 8005bf0:	08005cad 	.word	0x08005cad
 8005bf4:	08005cad 	.word	0x08005cad
 8005bf8:	08005cad 	.word	0x08005cad
 8005bfc:	08005cad 	.word	0x08005cad
 8005c00:	08005cad 	.word	0x08005cad
 8005c04:	08005c89 	.word	0x08005c89
 8005c08:	08005cad 	.word	0x08005cad
 8005c0c:	08005cad 	.word	0x08005cad
 8005c10:	08005cad 	.word	0x08005cad
 8005c14:	08005cad 	.word	0x08005cad
 8005c18:	08005cad 	.word	0x08005cad
 8005c1c:	08005cad 	.word	0x08005cad
 8005c20:	08005cad 	.word	0x08005cad
 8005c24:	08005c9b 	.word	0x08005c9b
 8005c28:	08005cad 	.word	0x08005cad
 8005c2c:	08005cad 	.word	0x08005cad
 8005c30:	08005cad 	.word	0x08005cad
 8005c34:	08005cad 	.word	0x08005cad
 8005c38:	08005cad 	.word	0x08005cad
 8005c3c:	08005cad 	.word	0x08005cad
 8005c40:	08005cad 	.word	0x08005cad
 8005c44:	08005cb3 	.word	0x08005cb3
 8005c48:	08005cad 	.word	0x08005cad
 8005c4c:	08005cad 	.word	0x08005cad
 8005c50:	08005cad 	.word	0x08005cad
 8005c54:	08005cad 	.word	0x08005cad
 8005c58:	08005cad 	.word	0x08005cad
 8005c5c:	08005cad 	.word	0x08005cad
 8005c60:	08005cad 	.word	0x08005cad
 8005c64:	08005cb3 	.word	0x08005cb3
 8005c68:	08005cad 	.word	0x08005cad
 8005c6c:	08005cad 	.word	0x08005cad
 8005c70:	08005cad 	.word	0x08005cad
 8005c74:	08005cad 	.word	0x08005cad
 8005c78:	08005cad 	.word	0x08005cad
 8005c7c:	08005cad 	.word	0x08005cad
 8005c80:	08005cad 	.word	0x08005cad
 8005c84:	08005cb3 	.word	0x08005cb3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fe30 	bl	80068f4 <RCCEx_PLL2_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005c98:	e00c      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3324      	adds	r3, #36	; 0x24
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 ff49 	bl	8006b38 <RCCEx_PLL3_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005caa:	e003      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8005cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005cba:	4b45      	ldr	r3, [pc, #276]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc6:	4942      	ldr	r1, [pc, #264]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	654b      	str	r3, [r1, #84]	; 0x54
 8005ccc:	e001      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d037      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce2:	2b05      	cmp	r3, #5
 8005ce4:	d820      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 8005ce6:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8005ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cec:	08005d2f 	.word	0x08005d2f
 8005cf0:	08005d05 	.word	0x08005d05
 8005cf4:	08005d17 	.word	0x08005d17
 8005cf8:	08005d2f 	.word	0x08005d2f
 8005cfc:	08005d2f 	.word	0x08005d2f
 8005d00:	08005d2f 	.word	0x08005d2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	2101      	movs	r1, #1
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fdf2 	bl	80068f4 <RCCEx_PLL2_Config>
 8005d10:	4603      	mov	r3, r0
 8005d12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d14:	e00c      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3324      	adds	r3, #36	; 0x24
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 ff0b 	bl	8006b38 <RCCEx_PLL3_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d26:	e003      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2c:	e000      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 8005d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d36:	4b26      	ldr	r3, [pc, #152]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3a:	f023 0207 	bic.w	r2, r3, #7
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d42:	4923      	ldr	r1, [pc, #140]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	654b      	str	r3, [r1, #84]	; 0x54
 8005d48:	e001      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d040      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	d821      	bhi.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005d64:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005daf 	.word	0x08005daf
 8005d70:	08005d85 	.word	0x08005d85
 8005d74:	08005d97 	.word	0x08005d97
 8005d78:	08005daf 	.word	0x08005daf
 8005d7c:	08005daf 	.word	0x08005daf
 8005d80:	08005daf 	.word	0x08005daf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fdb2 	bl	80068f4 <RCCEx_PLL2_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005d94:	e00c      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3324      	adds	r3, #36	; 0x24
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fecb 	bl	8006b38 <RCCEx_PLL3_Config>
 8005da2:	4603      	mov	r3, r0
 8005da4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005da6:	e003      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	75fb      	strb	r3, [r7, #23]
      break;
 8005dac:	e000      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d110      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dba:	f023 0207 	bic.w	r2, r3, #7
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc4:	4902      	ldr	r1, [pc, #8]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	658b      	str	r3, [r1, #88]	; 0x58
 8005dca:	e007      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005dcc:	58024800 	.word	0x58024800
 8005dd0:	58024400 	.word	0x58024400
 8005dd4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
 8005dda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d044      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df2:	d01b      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df8:	d805      	bhi.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d022      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e02:	d00a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005e04:	e01b      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xda6>
 8005e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0a:	d01d      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8005e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e10:	d01c      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005e12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e16:	d01b      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8005e18:	e011      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	2100      	movs	r1, #0
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fd67 	bl	80068f4 <RCCEx_PLL2_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e2a:	e012      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3324      	adds	r3, #36	; 0x24
 8005e30:	2102      	movs	r1, #2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fe80 	bl	8006b38 <RCCEx_PLL3_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e3c:	e009      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
      break;
 8005e42:	e006      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005e44:	bf00      	nop
 8005e46:	e004      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005e48:	bf00      	nop
 8005e4a:	e002      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005e4c:	bf00      	nop
 8005e4e:	e000      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e58:	4bb6      	ldr	r3, [pc, #728]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e66:	49b3      	ldr	r1, [pc, #716]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	654b      	str	r3, [r1, #84]	; 0x54
 8005e6c:	e001      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
 8005e70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d044      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e88:	d01b      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 8005e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8e:	d805      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d022      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8005e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e98:	d00a      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8005e9a:	e01b      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8005e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea0:	d01d      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xe46>
 8005ea2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ea6:	d01c      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 8005ea8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eac:	d01b      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 8005eae:	e011      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fd1c 	bl	80068f4 <RCCEx_PLL2_Config>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ec0:	e012      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3324      	adds	r3, #36	; 0x24
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fe35 	bl	8006b38 <RCCEx_PLL3_Config>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ed2:	e009      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed8:	e006      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005eda:	bf00      	nop
 8005edc:	e004      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005ede:	bf00      	nop
 8005ee0:	e002      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005ee2:	bf00      	nop
 8005ee4:	e000      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005eee:	4b91      	ldr	r3, [pc, #580]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005efc:	498d      	ldr	r1, [pc, #564]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	658b      	str	r3, [r1, #88]	; 0x58
 8005f02:	e001      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d044      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1e:	d01b      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 8005f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f24:	d805      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d022      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8005f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2e:	d00a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8005f30:	e01b      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xed2>
 8005f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f36:	d01d      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005f38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f3c:	d01c      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 8005f3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f42:	d01b      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xee4>
 8005f44:	e011      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fcd1 	bl	80068f4 <RCCEx_PLL2_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f56:	e012      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3324      	adds	r3, #36	; 0x24
 8005f5c:	2102      	movs	r1, #2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fdea 	bl	8006b38 <RCCEx_PLL3_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f68:	e009      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f6e:	e006      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005f70:	bf00      	nop
 8005f72:	e004      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005f74:	bf00      	nop
 8005f76:	e002      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005f78:	bf00      	nop
 8005f7a:	e000      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f84:	4b6b      	ldr	r3, [pc, #428]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f92:	4968      	ldr	r1, [pc, #416]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	658b      	str	r3, [r1, #88]	; 0x58
 8005f98:	e001      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d036      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xf80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb4:	d015      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc0:	d00f      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fd6:	d004      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8005fd8:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8005fdc:	4856      	ldr	r0, [pc, #344]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005fde:	f7fa fdf0 	bl	8000bc2 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fec:	d10a      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3324      	adds	r3, #36	; 0x24
 8005ff2:	2102      	movs	r1, #2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fd9f 	bl	8006b38 <RCCEx_PLL3_Config>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
        {
          status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006004:	4b4b      	ldr	r3, [pc, #300]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006012:	4948      	ldr	r1, [pc, #288]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006014:	4313      	orrs	r3, r2
 8006016:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b00      	cmp	r3, #0
 8006022:	d036      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800602a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602e:	d015      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800603a:	d00f      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800604c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006050:	d004      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8006052:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 8006056:	4838      	ldr	r0, [pc, #224]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8006058:	f7fa fdb3 	bl	8000bc2 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006066:	d10a      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xfe6>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3324      	adds	r3, #36	; 0x24
 800606c:	2102      	movs	r1, #2
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fd62 	bl	8006b38 <RCCEx_PLL3_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xfe6>
      {
        status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800607e:	4b2d      	ldr	r3, [pc, #180]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608c:	4929      	ldr	r1, [pc, #164]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800608e:	4313      	orrs	r3, r2
 8006090:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d030      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1068>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a8:	d00d      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x102e>
 80060aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ae:	d016      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d111      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1040>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fc1a 	bl	80068f4 <RCCEx_PLL2_Config>
 80060c0:	4603      	mov	r3, r0
 80060c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80060c4:	e00c      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1048>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3324      	adds	r3, #36	; 0x24
 80060ca:	2102      	movs	r1, #2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fd33 	bl	8006b38 <RCCEx_PLL3_Config>
 80060d2:	4603      	mov	r3, r0
 80060d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80060d6:	e003      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1048>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	75fb      	strb	r3, [r7, #23]
      break;
 80060dc:	e000      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1048>
      break;
 80060de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1064>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060e6:	4b13      	ldr	r3, [pc, #76]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060f4:	490f      	ldr	r1, [pc, #60]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	658b      	str	r3, [r1, #88]	; 0x58
 80060fa:	e001      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d034      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x10de>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006116:	d011      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 8006118:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800611c:	d01a      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800611e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006122:	d114      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006124:	4b03      	ldr	r3, [pc, #12]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	4a02      	ldr	r2, [pc, #8]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800612a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800612e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006130:	e011      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x10be>
 8006132:	bf00      	nop
 8006134:	58024400 	.word	0x58024400
 8006138:	08009e4c 	.word	0x08009e4c

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3324      	adds	r3, #36	; 0x24
 8006140:	2101      	movs	r1, #1
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fcf8 	bl	8006b38 <RCCEx_PLL3_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800614c:	e003      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x10be>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	75fb      	strb	r3, [r7, #23]
      break;
 8006152:	e000      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x10be>
      break;
 8006154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006156:	7dfb      	ldrb	r3, [r7, #23]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x10da>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800615c:	4b8c      	ldr	r3, [pc, #560]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800616a:	4989      	ldr	r1, [pc, #548]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800616c:	4313      	orrs	r3, r2
 800616e:	654b      	str	r3, [r1, #84]	; 0x54
 8006170:	e001      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x10de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d037      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x1106>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006192:	d004      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x1106>
 8006194:	f240 515e 	movw	r1, #1374	; 0x55e
 8006198:	487e      	ldr	r0, [pc, #504]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 800619a:	f7fa fd12 	bl	8000bc2 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80061a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061aa:	d007      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1124>
 80061ac:	e00f      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ae:	4b78      	ldr	r3, [pc, #480]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	4a77      	ldr	r2, [pc, #476]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80061b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80061ba:	e00b      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	2102      	movs	r1, #2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fb96 	bl	80068f4 <RCCEx_PLL2_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80061cc:	e002      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    default:
      ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	75fb      	strb	r3, [r7, #23]
      break;
 80061d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1156>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061da:	4b6d      	ldr	r3, [pc, #436]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80061dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e6:	496a      	ldr	r1, [pc, #424]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061ec:	e001      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x115a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
 80061f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x117c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3324      	adds	r3, #36	; 0x24
 8006202:	2102      	movs	r1, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fc97 	bl	8006b38 <RCCEx_PLL3_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x117c>
    {
      status=HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02f      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006228:	d00c      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x11ac>
 800622a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622e:	d802      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x119e>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d011      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
 8006234:	e00d      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
 8006236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623a:	d00f      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 800623c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006240:	d00e      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006242:	e006      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006244:	4b52      	ldr	r3, [pc, #328]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	4a51      	ldr	r2, [pc, #324]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800624a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800624e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006250:	e007      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	75fb      	strb	r3, [r7, #23]
      break;
 8006256:	e004      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 8006258:	bf00      	nop
 800625a:	e002      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 800625c:	bf00      	nop
 800625e:	e000      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 8006260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d109      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x11e4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006268:	4b49      	ldr	r3, [pc, #292]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800626a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006274:	4946      	ldr	r1, [pc, #280]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006276:	4313      	orrs	r3, r2
 8006278:	654b      	str	r3, [r1, #84]	; 0x54
 800627a:	e001      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d016      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006290:	2b00      	cmp	r3, #0
 8006292:	d009      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1210>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800629c:	d004      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1210>
 800629e:	f240 51bd 	movw	r1, #1469	; 0x5bd
 80062a2:	483c      	ldr	r0, [pc, #240]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 80062a4:	f7fa fc8d 	bl	8000bc2 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062a8:	4b39      	ldr	r3, [pc, #228]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b4:	4936      	ldr	r1, [pc, #216]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d016      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x124a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062d6:	d004      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x124a>
 80062d8:	f240 51d1 	movw	r1, #1489	; 0x5d1
 80062dc:	482d      	ldr	r0, [pc, #180]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 80062de:	f7fa fc70 	bl	8000bc2 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062e2:	4b2b      	ldr	r3, [pc, #172]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ee:	4928      	ldr	r1, [pc, #160]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01d      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x12a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006314:	d004      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 8006316:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800631a:	481e      	ldr	r0, [pc, #120]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 800631c:	f7fa fc51 	bl	8000bc2 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006320:	4b1b      	ldr	r3, [pc, #108]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800632a:	6113      	str	r3, [r2, #16]
 800632c:	4b18      	ldr	r3, [pc, #96]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006336:	4916      	ldr	r1, [pc, #88]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006338:	4313      	orrs	r3, r2
 800633a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	da1b      	bge.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x12e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00e      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006354:	d009      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635e:	d004      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 8006360:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8006364:	480b      	ldr	r0, [pc, #44]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 8006366:	f7fa fc2c 	bl	8000bc2 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800636c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006376:	4906      	ldr	r1, [pc, #24]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006378:	4313      	orrs	r3, r2
 800637a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800637c:	7dbb      	ldrb	r3, [r7, #22]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    return HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	e000      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x12f0>
  }
  return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	58024400 	.word	0x58024400
 8006394:	08009e4c 	.word	0x08009e4c

08006398 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800639c:	f7fe fe20 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 80063a0:	4601      	mov	r1, r0
 80063a2:	4b06      	ldr	r3, [pc, #24]	; (80063bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	091b      	lsrs	r3, r3, #4
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	4a04      	ldr	r2, [pc, #16]	; (80063c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063ae:	5cd3      	ldrb	r3, [r2, r3]
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	58024400 	.word	0x58024400
 80063c0:	08009f10 	.word	0x08009f10

080063c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b089      	sub	sp, #36	; 0x24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063cc:	4b9d      	ldr	r3, [pc, #628]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80063d6:	4b9b      	ldr	r3, [pc, #620]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	0b1b      	lsrs	r3, r3, #12
 80063dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80063e2:	4b98      	ldr	r3, [pc, #608]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	091b      	lsrs	r3, r3, #4
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80063ee:	4b95      	ldr	r3, [pc, #596]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	08db      	lsrs	r3, r3, #3
 80063f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	fb02 f303 	mul.w	r3, r2, r3
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006406:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 810a 	beq.w	8006626 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d05a      	beq.n	80064ce <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006418:	2b01      	cmp	r3, #1
 800641a:	d302      	bcc.n	8006422 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800641c:	2b02      	cmp	r3, #2
 800641e:	d078      	beq.n	8006512 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006420:	e099      	b.n	8006556 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006422:	4b88      	ldr	r3, [pc, #544]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d02d      	beq.n	800648a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800642e:	4b85      	ldr	r3, [pc, #532]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	08db      	lsrs	r3, r3, #3
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	4a83      	ldr	r2, [pc, #524]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800643a:	fa22 f303 	lsr.w	r3, r2, r3
 800643e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	ee07 3a90 	vmov	s15, r3
 8006450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006458:	4b7a      	ldr	r3, [pc, #488]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006468:	ed97 6a03 	vldr	s12, [r7, #12]
 800646c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800664c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800647c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006484:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006488:	e087      	b.n	800659a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006494:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006650 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649c:	4b69      	ldr	r3, [pc, #420]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800664c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80064b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064cc:	e065      	b.n	800659a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80064dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e0:	4b58      	ldr	r3, [pc, #352]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80064f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800664c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80064f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006500:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006504:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006510:	e043      	b.n	800659a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	ee07 3a90 	vmov	s15, r3
 8006518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006658 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006524:	4b47      	ldr	r3, [pc, #284]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652c:	ee07 3a90 	vmov	s15, r3
 8006530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006534:	ed97 6a03 	vldr	s12, [r7, #12]
 8006538:	eddf 5a44 	vldr	s11, [pc, #272]	; 800664c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800653c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006550:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006554:	e021      	b.n	800659a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006560:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006568:	4b36      	ldr	r3, [pc, #216]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	ee07 3a90 	vmov	s15, r3
 8006574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006578:	ed97 6a03 	vldr	s12, [r7, #12]
 800657c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800664c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800658c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006594:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006598:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800659a:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	0a5b      	lsrs	r3, r3, #9
 80065a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c0:	ee17 2a90 	vmov	r2, s15
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80065c8:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	0c1b      	lsrs	r3, r3, #16
 80065ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ee:	ee17 2a90 	vmov	r2, s15
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80065f6:	4b13      	ldr	r3, [pc, #76]	; (8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	0e1b      	lsrs	r3, r3, #24
 80065fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800660c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006610:	edd7 6a07 	vldr	s13, [r7, #28]
 8006614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800661c:	ee17 2a90 	vmov	r2, s15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006624:	e008      	b.n	8006638 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	609a      	str	r2, [r3, #8]
}
 8006638:	bf00      	nop
 800663a:	3724      	adds	r7, #36	; 0x24
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	58024400 	.word	0x58024400
 8006648:	03d09000 	.word	0x03d09000
 800664c:	46000000 	.word	0x46000000
 8006650:	4c742400 	.word	0x4c742400
 8006654:	4a742400 	.word	0x4a742400
 8006658:	4af42400 	.word	0x4af42400

0800665c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800665c:	b480      	push	{r7}
 800665e:	b089      	sub	sp, #36	; 0x24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006664:	4b9d      	ldr	r3, [pc, #628]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800666e:	4b9b      	ldr	r3, [pc, #620]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006672:	0d1b      	lsrs	r3, r3, #20
 8006674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006678:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800667a:	4b98      	ldr	r3, [pc, #608]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	0a1b      	lsrs	r3, r3, #8
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006686:	4b95      	ldr	r3, [pc, #596]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	08db      	lsrs	r3, r3, #3
 800668c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	fb02 f303 	mul.w	r3, r2, r3
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 810a 	beq.w	80068be <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d05a      	beq.n	8006766 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d302      	bcc.n	80066ba <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d078      	beq.n	80067aa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80066b8:	e099      	b.n	80067ee <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066ba:	4b88      	ldr	r3, [pc, #544]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d02d      	beq.n	8006722 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066c6:	4b85      	ldr	r3, [pc, #532]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	08db      	lsrs	r3, r3, #3
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	4a83      	ldr	r2, [pc, #524]	; (80068e0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80066d2:	fa22 f303 	lsr.w	r3, r2, r3
 80066d6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066f0:	4b7a      	ldr	r3, [pc, #488]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006700:	ed97 6a03 	vldr	s12, [r7, #12]
 8006704:	eddf 5a77 	vldr	s11, [pc, #476]	; 80068e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006720:	e087      	b.n	8006832 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	ee07 3a90 	vmov	s15, r3
 8006728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80068e8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006734:	4b69      	ldr	r3, [pc, #420]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673c:	ee07 3a90 	vmov	s15, r3
 8006740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006744:	ed97 6a03 	vldr	s12, [r7, #12]
 8006748:	eddf 5a66 	vldr	s11, [pc, #408]	; 80068e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800674c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006760:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006764:	e065      	b.n	8006832 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	ee07 3a90 	vmov	s15, r3
 800676c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006770:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80068ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006778:	4b58      	ldr	r3, [pc, #352]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006780:	ee07 3a90 	vmov	s15, r3
 8006784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006788:	ed97 6a03 	vldr	s12, [r7, #12]
 800678c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80068e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800679c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067a8:	e043      	b.n	8006832 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80067b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067bc:	4b47      	ldr	r3, [pc, #284]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c4:	ee07 3a90 	vmov	s15, r3
 80067c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80067d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80068e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80067d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067ec:	e021      	b.n	8006832 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80068ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80067fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006800:	4b36      	ldr	r3, [pc, #216]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006810:	ed97 6a03 	vldr	s12, [r7, #12]
 8006814:	eddf 5a33 	vldr	s11, [pc, #204]	; 80068e4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006818:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800681c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006830:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006832:	4b2a      	ldr	r3, [pc, #168]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	0a5b      	lsrs	r3, r3, #9
 8006838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006848:	ee37 7a87 	vadd.f32	s14, s15, s14
 800684c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006858:	ee17 2a90 	vmov	r2, s15
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006860:	4b1e      	ldr	r3, [pc, #120]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800687a:	edd7 6a07 	vldr	s13, [r7, #28]
 800687e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006886:	ee17 2a90 	vmov	r2, s15
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	0e1b      	lsrs	r3, r3, #24
 8006894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006898:	ee07 3a90 	vmov	s15, r3
 800689c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b4:	ee17 2a90 	vmov	r2, s15
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80068bc:	e008      	b.n	80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	609a      	str	r2, [r3, #8]
}
 80068d0:	bf00      	nop
 80068d2:	3724      	adds	r7, #36	; 0x24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	58024400 	.word	0x58024400
 80068e0:	03d09000 	.word	0x03d09000
 80068e4:	46000000 	.word	0x46000000
 80068e8:	4c742400 	.word	0x4c742400
 80068ec:	4a742400 	.word	0x4a742400
 80068f0:	4af42400 	.word	0x4af42400

080068f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <RCCEx_PLL2_Config+0x1e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b3f      	cmp	r3, #63	; 0x3f
 8006910:	d904      	bls.n	800691c <RCCEx_PLL2_Config+0x28>
 8006912:	f640 417f 	movw	r1, #3199	; 0xc7f
 8006916:	4885      	ldr	r0, [pc, #532]	; (8006b2c <RCCEx_PLL2_Config+0x238>)
 8006918:	f7fa f953 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b03      	cmp	r3, #3
 8006922:	d904      	bls.n	800692e <RCCEx_PLL2_Config+0x3a>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692c:	d904      	bls.n	8006938 <RCCEx_PLL2_Config+0x44>
 800692e:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8006932:	487e      	ldr	r0, [pc, #504]	; (8006b2c <RCCEx_PLL2_Config+0x238>)
 8006934:	f7fa f945 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <RCCEx_PLL2_Config+0x54>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b80      	cmp	r3, #128	; 0x80
 8006946:	d904      	bls.n	8006952 <RCCEx_PLL2_Config+0x5e>
 8006948:	f640 4181 	movw	r1, #3201	; 0xc81
 800694c:	4877      	ldr	r0, [pc, #476]	; (8006b2c <RCCEx_PLL2_Config+0x238>)
 800694e:	f7fa f938 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <RCCEx_PLL2_Config+0x6e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b80      	cmp	r3, #128	; 0x80
 8006960:	d904      	bls.n	800696c <RCCEx_PLL2_Config+0x78>
 8006962:	f640 4182 	movw	r1, #3202	; 0xc82
 8006966:	4871      	ldr	r0, [pc, #452]	; (8006b2c <RCCEx_PLL2_Config+0x238>)
 8006968:	f7fa f92b 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <RCCEx_PLL2_Config+0x88>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	2b80      	cmp	r3, #128	; 0x80
 800697a:	d904      	bls.n	8006986 <RCCEx_PLL2_Config+0x92>
 800697c:	f640 4183 	movw	r1, #3203	; 0xc83
 8006980:	486a      	ldr	r0, [pc, #424]	; (8006b2c <RCCEx_PLL2_Config+0x238>)
 8006982:	f7fa f91e 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d010      	beq.n	80069b0 <RCCEx_PLL2_Config+0xbc>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d00c      	beq.n	80069b0 <RCCEx_PLL2_Config+0xbc>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	2b80      	cmp	r3, #128	; 0x80
 800699c:	d008      	beq.n	80069b0 <RCCEx_PLL2_Config+0xbc>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	2bc0      	cmp	r3, #192	; 0xc0
 80069a4:	d004      	beq.n	80069b0 <RCCEx_PLL2_Config+0xbc>
 80069a6:	f640 4184 	movw	r1, #3204	; 0xc84
 80069aa:	4860      	ldr	r0, [pc, #384]	; (8006b2c <RCCEx_PLL2_Config+0x238>)
 80069ac:	f7fa f909 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <RCCEx_PLL2_Config+0xd6>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d004      	beq.n	80069ca <RCCEx_PLL2_Config+0xd6>
 80069c0:	f640 4185 	movw	r1, #3205	; 0xc85
 80069c4:	4859      	ldr	r0, [pc, #356]	; (8006b2c <RCCEx_PLL2_Config+0x238>)
 80069c6:	f7fa f8fc 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d2:	d304      	bcc.n	80069de <RCCEx_PLL2_Config+0xea>
 80069d4:	f640 4186 	movw	r1, #3206	; 0xc86
 80069d8:	4854      	ldr	r0, [pc, #336]	; (8006b2c <RCCEx_PLL2_Config+0x238>)
 80069da:	f7fa f8f2 	bl	8000bc2 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069de:	4b54      	ldr	r3, [pc, #336]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d101      	bne.n	80069ee <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e099      	b.n	8006b22 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80069ee:	4b50      	ldr	r3, [pc, #320]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a4f      	ldr	r2, [pc, #316]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 80069f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069fa:	f7fa faff 	bl	8000ffc <HAL_GetTick>
 80069fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a00:	e008      	b.n	8006a14 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a02:	f7fa fafb 	bl	8000ffc <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e086      	b.n	8006b22 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a14:	4b46      	ldr	r3, [pc, #280]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f0      	bne.n	8006a02 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a20:	4b43      	ldr	r3, [pc, #268]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	031b      	lsls	r3, r3, #12
 8006a2e:	4940      	ldr	r1, [pc, #256]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	628b      	str	r3, [r1, #40]	; 0x28
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	025b      	lsls	r3, r3, #9
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	041b      	lsls	r3, r3, #16
 8006a52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	061b      	lsls	r3, r3, #24
 8006a60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a64:	4932      	ldr	r1, [pc, #200]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a6a:	4b31      	ldr	r3, [pc, #196]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	492e      	ldr	r1, [pc, #184]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a7c:	4b2c      	ldr	r3, [pc, #176]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	f023 0220 	bic.w	r2, r3, #32
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	4929      	ldr	r1, [pc, #164]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a8e:	4b28      	ldr	r3, [pc, #160]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	4a27      	ldr	r2, [pc, #156]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a94:	f023 0310 	bic.w	r3, r3, #16
 8006a98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a9a:	4b25      	ldr	r3, [pc, #148]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a9e:	4b25      	ldr	r3, [pc, #148]	; (8006b34 <RCCEx_PLL2_Config+0x240>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	69d2      	ldr	r2, [r2, #28]
 8006aa6:	00d2      	lsls	r2, r2, #3
 8006aa8:	4921      	ldr	r1, [pc, #132]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006aae:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab2:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006ab4:	f043 0310 	orr.w	r3, r3, #16
 8006ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d106      	bne.n	8006ace <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ac0:	4b1b      	ldr	r3, [pc, #108]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	4a1a      	ldr	r2, [pc, #104]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006acc:	e00f      	b.n	8006aee <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d106      	bne.n	8006ae2 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ad4:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	4a15      	ldr	r2, [pc, #84]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ade:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ae0:	e005      	b.n	8006aee <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ae2:	4b13      	ldr	r3, [pc, #76]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	4a12      	ldr	r2, [pc, #72]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006aec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a0f      	ldr	r2, [pc, #60]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006af4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006afa:	f7fa fa7f 	bl	8000ffc <HAL_GetTick>
 8006afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b00:	e008      	b.n	8006b14 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b02:	f7fa fa7b 	bl	8000ffc <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e006      	b.n	8006b22 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b14:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <RCCEx_PLL2_Config+0x23c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	08009e4c 	.word	0x08009e4c
 8006b30:	58024400 	.word	0x58024400
 8006b34:	ffff0007 	.word	0xffff0007

08006b38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <RCCEx_PLL3_Config+0x1e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b3f      	cmp	r3, #63	; 0x3f
 8006b54:	d904      	bls.n	8006b60 <RCCEx_PLL3_Config+0x28>
 8006b56:	f640 41e7 	movw	r1, #3303	; 0xce7
 8006b5a:	4887      	ldr	r0, [pc, #540]	; (8006d78 <RCCEx_PLL3_Config+0x240>)
 8006b5c:	f7fa f831 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d904      	bls.n	8006b72 <RCCEx_PLL3_Config+0x3a>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b70:	d904      	bls.n	8006b7c <RCCEx_PLL3_Config+0x44>
 8006b72:	f640 41e8 	movw	r1, #3304	; 0xce8
 8006b76:	4880      	ldr	r0, [pc, #512]	; (8006d78 <RCCEx_PLL3_Config+0x240>)
 8006b78:	f7fa f823 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <RCCEx_PLL3_Config+0x54>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b80      	cmp	r3, #128	; 0x80
 8006b8a:	d904      	bls.n	8006b96 <RCCEx_PLL3_Config+0x5e>
 8006b8c:	f640 41e9 	movw	r1, #3305	; 0xce9
 8006b90:	4879      	ldr	r0, [pc, #484]	; (8006d78 <RCCEx_PLL3_Config+0x240>)
 8006b92:	f7fa f816 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <RCCEx_PLL3_Config+0x6e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b80      	cmp	r3, #128	; 0x80
 8006ba4:	d904      	bls.n	8006bb0 <RCCEx_PLL3_Config+0x78>
 8006ba6:	f640 41ea 	movw	r1, #3306	; 0xcea
 8006baa:	4873      	ldr	r0, [pc, #460]	; (8006d78 <RCCEx_PLL3_Config+0x240>)
 8006bac:	f7fa f809 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <RCCEx_PLL3_Config+0x88>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	2b80      	cmp	r3, #128	; 0x80
 8006bbe:	d904      	bls.n	8006bca <RCCEx_PLL3_Config+0x92>
 8006bc0:	f640 41eb 	movw	r1, #3307	; 0xceb
 8006bc4:	486c      	ldr	r0, [pc, #432]	; (8006d78 <RCCEx_PLL3_Config+0x240>)
 8006bc6:	f7f9 fffc 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d013      	beq.n	8006bfa <RCCEx_PLL3_Config+0xc2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bda:	d00e      	beq.n	8006bfa <RCCEx_PLL3_Config+0xc2>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be4:	d009      	beq.n	8006bfa <RCCEx_PLL3_Config+0xc2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bee:	d004      	beq.n	8006bfa <RCCEx_PLL3_Config+0xc2>
 8006bf0:	f640 41ec 	movw	r1, #3308	; 0xcec
 8006bf4:	4860      	ldr	r0, [pc, #384]	; (8006d78 <RCCEx_PLL3_Config+0x240>)
 8006bf6:	f7f9 ffe4 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d009      	beq.n	8006c16 <RCCEx_PLL3_Config+0xde>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0a:	d004      	beq.n	8006c16 <RCCEx_PLL3_Config+0xde>
 8006c0c:	f640 41ed 	movw	r1, #3309	; 0xced
 8006c10:	4859      	ldr	r0, [pc, #356]	; (8006d78 <RCCEx_PLL3_Config+0x240>)
 8006c12:	f7f9 ffd6 	bl	8000bc2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c1e:	d304      	bcc.n	8006c2a <RCCEx_PLL3_Config+0xf2>
 8006c20:	f640 41ee 	movw	r1, #3310	; 0xcee
 8006c24:	4854      	ldr	r0, [pc, #336]	; (8006d78 <RCCEx_PLL3_Config+0x240>)
 8006c26:	f7f9 ffcc 	bl	8000bc2 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c2a:	4b54      	ldr	r3, [pc, #336]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d101      	bne.n	8006c3a <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e099      	b.n	8006d6e <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006c3a:	4b50      	ldr	r3, [pc, #320]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a4f      	ldr	r2, [pc, #316]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c46:	f7fa f9d9 	bl	8000ffc <HAL_GetTick>
 8006c4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c4c:	e008      	b.n	8006c60 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c4e:	f7fa f9d5 	bl	8000ffc <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e086      	b.n	8006d6e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c60:	4b46      	ldr	r3, [pc, #280]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f0      	bne.n	8006c4e <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c6c:	4b43      	ldr	r3, [pc, #268]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	051b      	lsls	r3, r3, #20
 8006c7a:	4940      	ldr	r1, [pc, #256]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	628b      	str	r3, [r1, #40]	; 0x28
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	025b      	lsls	r3, r3, #9
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	041b      	lsls	r3, r3, #16
 8006c9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	061b      	lsls	r3, r3, #24
 8006cac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006cb0:	4932      	ldr	r1, [pc, #200]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006cb6:	4b31      	ldr	r3, [pc, #196]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	492e      	ldr	r1, [pc, #184]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006cc8:	4b2c      	ldr	r3, [pc, #176]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	4929      	ldr	r1, [pc, #164]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006cda:	4b28      	ldr	r3, [pc, #160]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cde:	4a27      	ldr	r2, [pc, #156]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ce6:	4b25      	ldr	r3, [pc, #148]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cea:	4b25      	ldr	r3, [pc, #148]	; (8006d80 <RCCEx_PLL3_Config+0x248>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	69d2      	ldr	r2, [r2, #28]
 8006cf2:	00d2      	lsls	r2, r2, #3
 8006cf4:	4921      	ldr	r1, [pc, #132]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006cfa:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	4a1f      	ldr	r2, [pc, #124]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d106      	bne.n	8006d1a <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d0c:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	4a1a      	ldr	r2, [pc, #104]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d18:	e00f      	b.n	8006d3a <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d106      	bne.n	8006d2e <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006d20:	4b16      	ldr	r3, [pc, #88]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	4a15      	ldr	r2, [pc, #84]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d2c:	e005      	b.n	8006d3a <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006d2e:	4b13      	ldr	r3, [pc, #76]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	4a12      	ldr	r2, [pc, #72]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006d3a:	4b10      	ldr	r3, [pc, #64]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a0f      	ldr	r2, [pc, #60]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d46:	f7fa f959 	bl	8000ffc <HAL_GetTick>
 8006d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d4c:	e008      	b.n	8006d60 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006d4e:	f7fa f955 	bl	8000ffc <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e006      	b.n	8006d6e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <RCCEx_PLL3_Config+0x244>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	08009e4c 	.word	0x08009e4c
 8006d7c:	58024400 	.word	0x58024400
 8006d80:	ffff0007 	.word	0xffff0007

08006d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e0ab      	b.n	8006eee <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d032      	beq.n	8006e04 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a55      	ldr	r2, [pc, #340]	; (8006ef8 <HAL_UART_Init+0x174>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d05f      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a53      	ldr	r2, [pc, #332]	; (8006efc <HAL_UART_Init+0x178>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d05a      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a52      	ldr	r2, [pc, #328]	; (8006f00 <HAL_UART_Init+0x17c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d055      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a50      	ldr	r2, [pc, #320]	; (8006f04 <HAL_UART_Init+0x180>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d050      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a4f      	ldr	r2, [pc, #316]	; (8006f08 <HAL_UART_Init+0x184>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d04b      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a4d      	ldr	r2, [pc, #308]	; (8006f0c <HAL_UART_Init+0x188>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d046      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a4c      	ldr	r2, [pc, #304]	; (8006f10 <HAL_UART_Init+0x18c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d041      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a4a      	ldr	r2, [pc, #296]	; (8006f14 <HAL_UART_Init+0x190>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d03c      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a49      	ldr	r2, [pc, #292]	; (8006f18 <HAL_UART_Init+0x194>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d037      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006df8:	f44f 7199 	mov.w	r1, #306	; 0x132
 8006dfc:	4847      	ldr	r0, [pc, #284]	; (8006f1c <HAL_UART_Init+0x198>)
 8006dfe:	f7f9 fee0 	bl	8000bc2 <assert_failed>
 8006e02:	e031      	b.n	8006e68 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3b      	ldr	r2, [pc, #236]	; (8006ef8 <HAL_UART_Init+0x174>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d02c      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a3a      	ldr	r2, [pc, #232]	; (8006efc <HAL_UART_Init+0x178>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d027      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a38      	ldr	r2, [pc, #224]	; (8006f00 <HAL_UART_Init+0x17c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d022      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a37      	ldr	r2, [pc, #220]	; (8006f04 <HAL_UART_Init+0x180>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d01d      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a35      	ldr	r2, [pc, #212]	; (8006f08 <HAL_UART_Init+0x184>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d018      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a34      	ldr	r2, [pc, #208]	; (8006f0c <HAL_UART_Init+0x188>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d013      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a32      	ldr	r2, [pc, #200]	; (8006f10 <HAL_UART_Init+0x18c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00e      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a31      	ldr	r2, [pc, #196]	; (8006f14 <HAL_UART_Init+0x190>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d009      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a2f      	ldr	r2, [pc, #188]	; (8006f18 <HAL_UART_Init+0x194>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_UART_Init+0xe4>
 8006e5e:	f240 1137 	movw	r1, #311	; 0x137
 8006e62:	482e      	ldr	r0, [pc, #184]	; (8006f1c <HAL_UART_Init+0x198>)
 8006e64:	f7f9 fead 	bl	8000bc2 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7f9 ff20 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2224      	movs	r2, #36	; 0x24
 8006e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f841 	bl	8006f20 <UART_SetConfig>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e022      	b.n	8006eee <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f002 fa93 	bl	80093dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ec4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ed4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 0201 	orr.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f002 fbee 	bl	80096c8 <UART_CheckIdleState>
 8006eec:	4603      	mov	r3, r0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40011000 	.word	0x40011000
 8006efc:	40004400 	.word	0x40004400
 8006f00:	40004800 	.word	0x40004800
 8006f04:	40004c00 	.word	0x40004c00
 8006f08:	40005000 	.word	0x40005000
 8006f0c:	40011400 	.word	0x40011400
 8006f10:	40007800 	.word	0x40007800
 8006f14:	40007c00 	.word	0x40007c00
 8006f18:	58000c00 	.word	0x58000c00
 8006f1c:	08009e88 	.word	0x08009e88

08006f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f20:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006f24:	b090      	sub	sp, #64	; 0x40
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	4a17      	ldr	r2, [pc, #92]	; (8006f9c <UART_SetConfig+0x7c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d904      	bls.n	8006f4c <UART_SetConfig+0x2c>
 8006f42:	f640 3134 	movw	r1, #2868	; 0xb34
 8006f46:	4816      	ldr	r0, [pc, #88]	; (8006fa0 <UART_SetConfig+0x80>)
 8006f48:	f7f9 fe3b 	bl	8000bc2 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f54:	d00d      	beq.n	8006f72 <UART_SetConfig+0x52>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <UART_SetConfig+0x52>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	d004      	beq.n	8006f72 <UART_SetConfig+0x52>
 8006f68:	f640 3135 	movw	r1, #2869	; 0xb35
 8006f6c:	480c      	ldr	r0, [pc, #48]	; (8006fa0 <UART_SetConfig+0x80>)
 8006f6e:	f7f9 fe28 	bl	8000bc2 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a0b      	ldr	r2, [pc, #44]	; (8006fa4 <UART_SetConfig+0x84>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d115      	bne.n	8006fa8 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d037      	beq.n	8006ff4 <UART_SetConfig+0xd4>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8c:	d032      	beq.n	8006ff4 <UART_SetConfig+0xd4>
 8006f8e:	f640 3138 	movw	r1, #2872	; 0xb38
 8006f92:	4803      	ldr	r0, [pc, #12]	; (8006fa0 <UART_SetConfig+0x80>)
 8006f94:	f7f9 fe15 	bl	8000bc2 <assert_failed>
 8006f98:	e02c      	b.n	8006ff4 <UART_SetConfig+0xd4>
 8006f9a:	bf00      	nop
 8006f9c:	00bebc20 	.word	0x00bebc20
 8006fa0:	08009e88 	.word	0x08009e88
 8006fa4:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb0:	d012      	beq.n	8006fd8 <UART_SetConfig+0xb8>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00e      	beq.n	8006fd8 <UART_SetConfig+0xb8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fc2:	d009      	beq.n	8006fd8 <UART_SetConfig+0xb8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fcc:	d004      	beq.n	8006fd8 <UART_SetConfig+0xb8>
 8006fce:	f640 313c 	movw	r1, #2876	; 0xb3c
 8006fd2:	48aa      	ldr	r0, [pc, #680]	; (800727c <UART_SetConfig+0x35c>)
 8006fd4:	f7f9 fdf5 	bl	8000bc2 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d009      	beq.n	8006ff4 <UART_SetConfig+0xd4>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fe8:	d004      	beq.n	8006ff4 <UART_SetConfig+0xd4>
 8006fea:	f640 313d 	movw	r1, #2877	; 0xb3d
 8006fee:	48a3      	ldr	r0, [pc, #652]	; (800727c <UART_SetConfig+0x35c>)
 8006ff0:	f7f9 fde7 	bl	8000bc2 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00e      	beq.n	800701a <UART_SetConfig+0xfa>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007004:	d009      	beq.n	800701a <UART_SetConfig+0xfa>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800700e:	d004      	beq.n	800701a <UART_SetConfig+0xfa>
 8007010:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8007014:	4899      	ldr	r0, [pc, #612]	; (800727c <UART_SetConfig+0x35c>)
 8007016:	f7f9 fdd4 	bl	8000bc2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f023 030c 	bic.w	r3, r3, #12
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <UART_SetConfig+0x10e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d104      	bne.n	8007038 <UART_SetConfig+0x118>
 800702e:	f640 3141 	movw	r1, #2881	; 0xb41
 8007032:	4892      	ldr	r0, [pc, #584]	; (800727c <UART_SetConfig+0x35c>)
 8007034:	f7f9 fdc5 	bl	8000bc2 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d013      	beq.n	8007068 <UART_SetConfig+0x148>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007048:	d00e      	beq.n	8007068 <UART_SetConfig+0x148>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007052:	d009      	beq.n	8007068 <UART_SetConfig+0x148>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705c:	d004      	beq.n	8007068 <UART_SetConfig+0x148>
 800705e:	f640 3142 	movw	r1, #2882	; 0xb42
 8007062:	4886      	ldr	r0, [pc, #536]	; (800727c <UART_SetConfig+0x35c>)
 8007064:	f7f9 fdad 	bl	8000bc2 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <UART_SetConfig+0x164>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007078:	d004      	beq.n	8007084 <UART_SetConfig+0x164>
 800707a:	f640 3143 	movw	r1, #2883	; 0xb43
 800707e:	487f      	ldr	r0, [pc, #508]	; (800727c <UART_SetConfig+0x35c>)
 8007080:	f7f9 fd9f 	bl	8000bc2 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	2b00      	cmp	r3, #0
 800708a:	d030      	beq.n	80070ee <UART_SetConfig+0x1ce>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	2b01      	cmp	r3, #1
 8007092:	d02c      	beq.n	80070ee <UART_SetConfig+0x1ce>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	2b02      	cmp	r3, #2
 800709a:	d028      	beq.n	80070ee <UART_SetConfig+0x1ce>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d024      	beq.n	80070ee <UART_SetConfig+0x1ce>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d020      	beq.n	80070ee <UART_SetConfig+0x1ce>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	2b05      	cmp	r3, #5
 80070b2:	d01c      	beq.n	80070ee <UART_SetConfig+0x1ce>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	2b06      	cmp	r3, #6
 80070ba:	d018      	beq.n	80070ee <UART_SetConfig+0x1ce>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	2b07      	cmp	r3, #7
 80070c2:	d014      	beq.n	80070ee <UART_SetConfig+0x1ce>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d010      	beq.n	80070ee <UART_SetConfig+0x1ce>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	2b09      	cmp	r3, #9
 80070d2:	d00c      	beq.n	80070ee <UART_SetConfig+0x1ce>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	2b0a      	cmp	r3, #10
 80070da:	d008      	beq.n	80070ee <UART_SetConfig+0x1ce>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	2b0b      	cmp	r3, #11
 80070e2:	d004      	beq.n	80070ee <UART_SetConfig+0x1ce>
 80070e4:	f640 3144 	movw	r1, #2884	; 0xb44
 80070e8:	4864      	ldr	r0, [pc, #400]	; (800727c <UART_SetConfig+0x35c>)
 80070ea:	f7f9 fd6a 	bl	8000bc2 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	4313      	orrs	r3, r2
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800710a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800710c:	4313      	orrs	r3, r2
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	4b5a      	ldr	r3, [pc, #360]	; (8007280 <UART_SetConfig+0x360>)
 8007118:	4013      	ands	r3, r2
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6812      	ldr	r2, [r2, #0]
 800711e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007120:	430b      	orrs	r3, r1
 8007122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a4f      	ldr	r2, [pc, #316]	; (8007284 <UART_SetConfig+0x364>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007150:	4313      	orrs	r3, r2
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	4b4b      	ldr	r3, [pc, #300]	; (8007288 <UART_SetConfig+0x368>)
 800715c:	4013      	ands	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6812      	ldr	r2, [r2, #0]
 8007162:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007164:	430b      	orrs	r3, r1
 8007166:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716e:	f023 010f 	bic.w	r1, r3, #15
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a42      	ldr	r2, [pc, #264]	; (800728c <UART_SetConfig+0x36c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	f040 8085 	bne.w	8007294 <UART_SetConfig+0x374>
 800718a:	4b41      	ldr	r3, [pc, #260]	; (8007290 <UART_SetConfig+0x370>)
 800718c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007192:	2b28      	cmp	r3, #40	; 0x28
 8007194:	d86c      	bhi.n	8007270 <UART_SetConfig+0x350>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <UART_SetConfig+0x27c>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	08007241 	.word	0x08007241
 80071a0:	08007271 	.word	0x08007271
 80071a4:	08007271 	.word	0x08007271
 80071a8:	08007271 	.word	0x08007271
 80071ac:	08007271 	.word	0x08007271
 80071b0:	08007271 	.word	0x08007271
 80071b4:	08007271 	.word	0x08007271
 80071b8:	08007271 	.word	0x08007271
 80071bc:	08007249 	.word	0x08007249
 80071c0:	08007271 	.word	0x08007271
 80071c4:	08007271 	.word	0x08007271
 80071c8:	08007271 	.word	0x08007271
 80071cc:	08007271 	.word	0x08007271
 80071d0:	08007271 	.word	0x08007271
 80071d4:	08007271 	.word	0x08007271
 80071d8:	08007271 	.word	0x08007271
 80071dc:	08007251 	.word	0x08007251
 80071e0:	08007271 	.word	0x08007271
 80071e4:	08007271 	.word	0x08007271
 80071e8:	08007271 	.word	0x08007271
 80071ec:	08007271 	.word	0x08007271
 80071f0:	08007271 	.word	0x08007271
 80071f4:	08007271 	.word	0x08007271
 80071f8:	08007271 	.word	0x08007271
 80071fc:	08007259 	.word	0x08007259
 8007200:	08007271 	.word	0x08007271
 8007204:	08007271 	.word	0x08007271
 8007208:	08007271 	.word	0x08007271
 800720c:	08007271 	.word	0x08007271
 8007210:	08007271 	.word	0x08007271
 8007214:	08007271 	.word	0x08007271
 8007218:	08007271 	.word	0x08007271
 800721c:	08007261 	.word	0x08007261
 8007220:	08007271 	.word	0x08007271
 8007224:	08007271 	.word	0x08007271
 8007228:	08007271 	.word	0x08007271
 800722c:	08007271 	.word	0x08007271
 8007230:	08007271 	.word	0x08007271
 8007234:	08007271 	.word	0x08007271
 8007238:	08007271 	.word	0x08007271
 800723c:	08007269 	.word	0x08007269
 8007240:	2301      	movs	r3, #1
 8007242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007246:	e23b      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007248:	2304      	movs	r3, #4
 800724a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800724e:	e237      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007250:	2308      	movs	r3, #8
 8007252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007256:	e233      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800725e:	e22f      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007260:	2320      	movs	r3, #32
 8007262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007266:	e22b      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007268:	2340      	movs	r3, #64	; 0x40
 800726a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800726e:	e227      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007270:	2380      	movs	r3, #128	; 0x80
 8007272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007276:	bf00      	nop
 8007278:	e222      	b.n	80076c0 <UART_SetConfig+0x7a0>
 800727a:	bf00      	nop
 800727c:	08009e88 	.word	0x08009e88
 8007280:	cfff69f3 	.word	0xcfff69f3
 8007284:	58000c00 	.word	0x58000c00
 8007288:	11fff4ff 	.word	0x11fff4ff
 800728c:	40011000 	.word	0x40011000
 8007290:	58024400 	.word	0x58024400
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4ac9      	ldr	r2, [pc, #804]	; (80075c0 <UART_SetConfig+0x6a0>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d131      	bne.n	8007302 <UART_SetConfig+0x3e2>
 800729e:	4bc9      	ldr	r3, [pc, #804]	; (80075c4 <UART_SetConfig+0x6a4>)
 80072a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d826      	bhi.n	80072f8 <UART_SetConfig+0x3d8>
 80072aa:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <UART_SetConfig+0x390>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	080072c9 	.word	0x080072c9
 80072b4:	080072d1 	.word	0x080072d1
 80072b8:	080072d9 	.word	0x080072d9
 80072bc:	080072e1 	.word	0x080072e1
 80072c0:	080072e9 	.word	0x080072e9
 80072c4:	080072f1 	.word	0x080072f1
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072ce:	e1f7      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80072d0:	2304      	movs	r3, #4
 80072d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072d6:	e1f3      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80072d8:	2308      	movs	r3, #8
 80072da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072de:	e1ef      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80072e0:	2310      	movs	r3, #16
 80072e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072e6:	e1eb      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80072e8:	2320      	movs	r3, #32
 80072ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072ee:	e1e7      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072f6:	e1e3      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80072f8:	2380      	movs	r3, #128	; 0x80
 80072fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072fe:	bf00      	nop
 8007300:	e1de      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4ab0      	ldr	r2, [pc, #704]	; (80075c8 <UART_SetConfig+0x6a8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d132      	bne.n	8007372 <UART_SetConfig+0x452>
 800730c:	4bad      	ldr	r3, [pc, #692]	; (80075c4 <UART_SetConfig+0x6a4>)
 800730e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	2b05      	cmp	r3, #5
 8007316:	d827      	bhi.n	8007368 <UART_SetConfig+0x448>
 8007318:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <UART_SetConfig+0x400>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007339 	.word	0x08007339
 8007324:	08007341 	.word	0x08007341
 8007328:	08007349 	.word	0x08007349
 800732c:	08007351 	.word	0x08007351
 8007330:	08007359 	.word	0x08007359
 8007334:	08007361 	.word	0x08007361
 8007338:	2300      	movs	r3, #0
 800733a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800733e:	e1bf      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007346:	e1bb      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800734e:	e1b7      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007356:	e1b3      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007358:	2320      	movs	r3, #32
 800735a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800735e:	e1af      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007366:	e1ab      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007368:	2380      	movs	r3, #128	; 0x80
 800736a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800736e:	bf00      	nop
 8007370:	e1a6      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a95      	ldr	r2, [pc, #596]	; (80075cc <UART_SetConfig+0x6ac>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d132      	bne.n	80073e2 <UART_SetConfig+0x4c2>
 800737c:	4b91      	ldr	r3, [pc, #580]	; (80075c4 <UART_SetConfig+0x6a4>)
 800737e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	2b05      	cmp	r3, #5
 8007386:	d827      	bhi.n	80073d8 <UART_SetConfig+0x4b8>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0x470>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073a9 	.word	0x080073a9
 8007394:	080073b1 	.word	0x080073b1
 8007398:	080073b9 	.word	0x080073b9
 800739c:	080073c1 	.word	0x080073c1
 80073a0:	080073c9 	.word	0x080073c9
 80073a4:	080073d1 	.word	0x080073d1
 80073a8:	2300      	movs	r3, #0
 80073aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073ae:	e187      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80073b0:	2304      	movs	r3, #4
 80073b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073b6:	e183      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80073b8:	2308      	movs	r3, #8
 80073ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073be:	e17f      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80073c0:	2310      	movs	r3, #16
 80073c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073c6:	e17b      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80073c8:	2320      	movs	r3, #32
 80073ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073ce:	e177      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80073d0:	2340      	movs	r3, #64	; 0x40
 80073d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073d6:	e173      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80073d8:	2380      	movs	r3, #128	; 0x80
 80073da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073de:	bf00      	nop
 80073e0:	e16e      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a7a      	ldr	r2, [pc, #488]	; (80075d0 <UART_SetConfig+0x6b0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d132      	bne.n	8007452 <UART_SetConfig+0x532>
 80073ec:	4b75      	ldr	r3, [pc, #468]	; (80075c4 <UART_SetConfig+0x6a4>)
 80073ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	2b05      	cmp	r3, #5
 80073f6:	d827      	bhi.n	8007448 <UART_SetConfig+0x528>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <UART_SetConfig+0x4e0>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	08007419 	.word	0x08007419
 8007404:	08007421 	.word	0x08007421
 8007408:	08007429 	.word	0x08007429
 800740c:	08007431 	.word	0x08007431
 8007410:	08007439 	.word	0x08007439
 8007414:	08007441 	.word	0x08007441
 8007418:	2300      	movs	r3, #0
 800741a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800741e:	e14f      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007420:	2304      	movs	r3, #4
 8007422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007426:	e14b      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007428:	2308      	movs	r3, #8
 800742a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800742e:	e147      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007430:	2310      	movs	r3, #16
 8007432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007436:	e143      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007438:	2320      	movs	r3, #32
 800743a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800743e:	e13f      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007440:	2340      	movs	r3, #64	; 0x40
 8007442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007446:	e13b      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007448:	2380      	movs	r3, #128	; 0x80
 800744a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800744e:	bf00      	nop
 8007450:	e136      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a5f      	ldr	r2, [pc, #380]	; (80075d4 <UART_SetConfig+0x6b4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d178      	bne.n	800754e <UART_SetConfig+0x62e>
 800745c:	4b59      	ldr	r3, [pc, #356]	; (80075c4 <UART_SetConfig+0x6a4>)
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007464:	2b28      	cmp	r3, #40	; 0x28
 8007466:	d86d      	bhi.n	8007544 <UART_SetConfig+0x624>
 8007468:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <UART_SetConfig+0x550>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007515 	.word	0x08007515
 8007474:	08007545 	.word	0x08007545
 8007478:	08007545 	.word	0x08007545
 800747c:	08007545 	.word	0x08007545
 8007480:	08007545 	.word	0x08007545
 8007484:	08007545 	.word	0x08007545
 8007488:	08007545 	.word	0x08007545
 800748c:	08007545 	.word	0x08007545
 8007490:	0800751d 	.word	0x0800751d
 8007494:	08007545 	.word	0x08007545
 8007498:	08007545 	.word	0x08007545
 800749c:	08007545 	.word	0x08007545
 80074a0:	08007545 	.word	0x08007545
 80074a4:	08007545 	.word	0x08007545
 80074a8:	08007545 	.word	0x08007545
 80074ac:	08007545 	.word	0x08007545
 80074b0:	08007525 	.word	0x08007525
 80074b4:	08007545 	.word	0x08007545
 80074b8:	08007545 	.word	0x08007545
 80074bc:	08007545 	.word	0x08007545
 80074c0:	08007545 	.word	0x08007545
 80074c4:	08007545 	.word	0x08007545
 80074c8:	08007545 	.word	0x08007545
 80074cc:	08007545 	.word	0x08007545
 80074d0:	0800752d 	.word	0x0800752d
 80074d4:	08007545 	.word	0x08007545
 80074d8:	08007545 	.word	0x08007545
 80074dc:	08007545 	.word	0x08007545
 80074e0:	08007545 	.word	0x08007545
 80074e4:	08007545 	.word	0x08007545
 80074e8:	08007545 	.word	0x08007545
 80074ec:	08007545 	.word	0x08007545
 80074f0:	08007535 	.word	0x08007535
 80074f4:	08007545 	.word	0x08007545
 80074f8:	08007545 	.word	0x08007545
 80074fc:	08007545 	.word	0x08007545
 8007500:	08007545 	.word	0x08007545
 8007504:	08007545 	.word	0x08007545
 8007508:	08007545 	.word	0x08007545
 800750c:	08007545 	.word	0x08007545
 8007510:	0800753d 	.word	0x0800753d
 8007514:	2301      	movs	r3, #1
 8007516:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800751a:	e0d1      	b.n	80076c0 <UART_SetConfig+0x7a0>
 800751c:	2304      	movs	r3, #4
 800751e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007522:	e0cd      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007524:	2308      	movs	r3, #8
 8007526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800752a:	e0c9      	b.n	80076c0 <UART_SetConfig+0x7a0>
 800752c:	2310      	movs	r3, #16
 800752e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007532:	e0c5      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007534:	2320      	movs	r3, #32
 8007536:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800753a:	e0c1      	b.n	80076c0 <UART_SetConfig+0x7a0>
 800753c:	2340      	movs	r3, #64	; 0x40
 800753e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007542:	e0bd      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007544:	2380      	movs	r3, #128	; 0x80
 8007546:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800754a:	bf00      	nop
 800754c:	e0b8      	b.n	80076c0 <UART_SetConfig+0x7a0>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <UART_SetConfig+0x6b8>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d141      	bne.n	80075dc <UART_SetConfig+0x6bc>
 8007558:	4b1a      	ldr	r3, [pc, #104]	; (80075c4 <UART_SetConfig+0x6a4>)
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	2b05      	cmp	r3, #5
 8007562:	d827      	bhi.n	80075b4 <UART_SetConfig+0x694>
 8007564:	a201      	add	r2, pc, #4	; (adr r2, 800756c <UART_SetConfig+0x64c>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	08007585 	.word	0x08007585
 8007570:	0800758d 	.word	0x0800758d
 8007574:	08007595 	.word	0x08007595
 8007578:	0800759d 	.word	0x0800759d
 800757c:	080075a5 	.word	0x080075a5
 8007580:	080075ad 	.word	0x080075ad
 8007584:	2300      	movs	r3, #0
 8007586:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800758a:	e099      	b.n	80076c0 <UART_SetConfig+0x7a0>
 800758c:	2304      	movs	r3, #4
 800758e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007592:	e095      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007594:	2308      	movs	r3, #8
 8007596:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800759a:	e091      	b.n	80076c0 <UART_SetConfig+0x7a0>
 800759c:	2310      	movs	r3, #16
 800759e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075a2:	e08d      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80075a4:	2320      	movs	r3, #32
 80075a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075aa:	e089      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80075ac:	2340      	movs	r3, #64	; 0x40
 80075ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075b2:	e085      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80075b4:	2380      	movs	r3, #128	; 0x80
 80075b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075ba:	bf00      	nop
 80075bc:	e080      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80075be:	bf00      	nop
 80075c0:	40004400 	.word	0x40004400
 80075c4:	58024400 	.word	0x58024400
 80075c8:	40004800 	.word	0x40004800
 80075cc:	40004c00 	.word	0x40004c00
 80075d0:	40005000 	.word	0x40005000
 80075d4:	40011400 	.word	0x40011400
 80075d8:	40007800 	.word	0x40007800
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a98      	ldr	r2, [pc, #608]	; (8007844 <UART_SetConfig+0x924>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d131      	bne.n	800764a <UART_SetConfig+0x72a>
 80075e6:	4b98      	ldr	r3, [pc, #608]	; (8007848 <UART_SetConfig+0x928>)
 80075e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ea:	f003 0307 	and.w	r3, r3, #7
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	d826      	bhi.n	8007640 <UART_SetConfig+0x720>
 80075f2:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <UART_SetConfig+0x6d8>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	08007611 	.word	0x08007611
 80075fc:	08007619 	.word	0x08007619
 8007600:	08007621 	.word	0x08007621
 8007604:	08007629 	.word	0x08007629
 8007608:	08007631 	.word	0x08007631
 800760c:	08007639 	.word	0x08007639
 8007610:	2300      	movs	r3, #0
 8007612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007616:	e053      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007618:	2304      	movs	r3, #4
 800761a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800761e:	e04f      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007620:	2308      	movs	r3, #8
 8007622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007626:	e04b      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007628:	2310      	movs	r3, #16
 800762a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800762e:	e047      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007630:	2320      	movs	r3, #32
 8007632:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007636:	e043      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007638:	2340      	movs	r3, #64	; 0x40
 800763a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800763e:	e03f      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007640:	2380      	movs	r3, #128	; 0x80
 8007642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007646:	bf00      	nop
 8007648:	e03a      	b.n	80076c0 <UART_SetConfig+0x7a0>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a7f      	ldr	r2, [pc, #508]	; (800784c <UART_SetConfig+0x92c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d132      	bne.n	80076ba <UART_SetConfig+0x79a>
 8007654:	4b7c      	ldr	r3, [pc, #496]	; (8007848 <UART_SetConfig+0x928>)
 8007656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	2b05      	cmp	r3, #5
 800765e:	d827      	bhi.n	80076b0 <UART_SetConfig+0x790>
 8007660:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <UART_SetConfig+0x748>)
 8007662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007666:	bf00      	nop
 8007668:	08007681 	.word	0x08007681
 800766c:	08007689 	.word	0x08007689
 8007670:	08007691 	.word	0x08007691
 8007674:	08007699 	.word	0x08007699
 8007678:	080076a1 	.word	0x080076a1
 800767c:	080076a9 	.word	0x080076a9
 8007680:	2302      	movs	r3, #2
 8007682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007686:	e01b      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007688:	2304      	movs	r3, #4
 800768a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800768e:	e017      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007690:	2308      	movs	r3, #8
 8007692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007696:	e013      	b.n	80076c0 <UART_SetConfig+0x7a0>
 8007698:	2310      	movs	r3, #16
 800769a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800769e:	e00f      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80076a0:	2320      	movs	r3, #32
 80076a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076a6:	e00b      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80076a8:	2340      	movs	r3, #64	; 0x40
 80076aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076ae:	e007      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80076b0:	2380      	movs	r3, #128	; 0x80
 80076b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <UART_SetConfig+0x7a0>
 80076ba:	2380      	movs	r3, #128	; 0x80
 80076bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a61      	ldr	r2, [pc, #388]	; (800784c <UART_SetConfig+0x92c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	f040 86f3 	bne.w	80084b2 <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	f000 80bd 	beq.w	8007850 <UART_SetConfig+0x930>
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	dc04      	bgt.n	80076e4 <UART_SetConfig+0x7c4>
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d00c      	beq.n	80076f8 <UART_SetConfig+0x7d8>
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d05b      	beq.n	800779a <UART_SetConfig+0x87a>
 80076e2:	e276      	b.n	8007bd2 <UART_SetConfig+0xcb2>
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	f000 81ad 	beq.w	8007a44 <UART_SetConfig+0xb24>
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	f000 821a 	beq.w	8007b24 <UART_SetConfig+0xc04>
 80076f0:	2b10      	cmp	r3, #16
 80076f2:	f000 8101 	beq.w	80078f8 <UART_SetConfig+0x9d8>
 80076f6:	e26c      	b.n	8007bd2 <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076f8:	f7fe fe4e 	bl	8006398 <HAL_RCCEx_GetD3PCLK1Freq>
 80076fc:	4602      	mov	r2, r0
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b00      	cmp	r3, #0
 8007704:	d044      	beq.n	8007790 <UART_SetConfig+0x870>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	2b01      	cmp	r3, #1
 800770c:	d03e      	beq.n	800778c <UART_SetConfig+0x86c>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	2b02      	cmp	r3, #2
 8007714:	d038      	beq.n	8007788 <UART_SetConfig+0x868>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	2b03      	cmp	r3, #3
 800771c:	d032      	beq.n	8007784 <UART_SetConfig+0x864>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	2b04      	cmp	r3, #4
 8007724:	d02c      	beq.n	8007780 <UART_SetConfig+0x860>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	2b05      	cmp	r3, #5
 800772c:	d026      	beq.n	800777c <UART_SetConfig+0x85c>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	2b06      	cmp	r3, #6
 8007734:	d020      	beq.n	8007778 <UART_SetConfig+0x858>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	2b07      	cmp	r3, #7
 800773c:	d01a      	beq.n	8007774 <UART_SetConfig+0x854>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	2b08      	cmp	r3, #8
 8007744:	d014      	beq.n	8007770 <UART_SetConfig+0x850>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	2b09      	cmp	r3, #9
 800774c:	d00e      	beq.n	800776c <UART_SetConfig+0x84c>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	2b0a      	cmp	r3, #10
 8007754:	d008      	beq.n	8007768 <UART_SetConfig+0x848>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	2b0b      	cmp	r3, #11
 800775c:	d102      	bne.n	8007764 <UART_SetConfig+0x844>
 800775e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007762:	e016      	b.n	8007792 <UART_SetConfig+0x872>
 8007764:	2301      	movs	r3, #1
 8007766:	e014      	b.n	8007792 <UART_SetConfig+0x872>
 8007768:	2380      	movs	r3, #128	; 0x80
 800776a:	e012      	b.n	8007792 <UART_SetConfig+0x872>
 800776c:	2340      	movs	r3, #64	; 0x40
 800776e:	e010      	b.n	8007792 <UART_SetConfig+0x872>
 8007770:	2320      	movs	r3, #32
 8007772:	e00e      	b.n	8007792 <UART_SetConfig+0x872>
 8007774:	2310      	movs	r3, #16
 8007776:	e00c      	b.n	8007792 <UART_SetConfig+0x872>
 8007778:	230c      	movs	r3, #12
 800777a:	e00a      	b.n	8007792 <UART_SetConfig+0x872>
 800777c:	230a      	movs	r3, #10
 800777e:	e008      	b.n	8007792 <UART_SetConfig+0x872>
 8007780:	2308      	movs	r3, #8
 8007782:	e006      	b.n	8007792 <UART_SetConfig+0x872>
 8007784:	2306      	movs	r3, #6
 8007786:	e004      	b.n	8007792 <UART_SetConfig+0x872>
 8007788:	2304      	movs	r3, #4
 800778a:	e002      	b.n	8007792 <UART_SetConfig+0x872>
 800778c:	2302      	movs	r3, #2
 800778e:	e000      	b.n	8007792 <UART_SetConfig+0x872>
 8007790:	2301      	movs	r3, #1
 8007792:	fbb2 f3f3 	udiv	r3, r2, r3
 8007796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007798:	e21f      	b.n	8007bda <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800779a:	f107 0318 	add.w	r3, r7, #24
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fe10 	bl	80063c4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d044      	beq.n	8007838 <UART_SetConfig+0x918>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d03e      	beq.n	8007834 <UART_SetConfig+0x914>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d038      	beq.n	8007830 <UART_SetConfig+0x910>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d032      	beq.n	800782c <UART_SetConfig+0x90c>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	d02c      	beq.n	8007828 <UART_SetConfig+0x908>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	2b05      	cmp	r3, #5
 80077d4:	d026      	beq.n	8007824 <UART_SetConfig+0x904>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	2b06      	cmp	r3, #6
 80077dc:	d020      	beq.n	8007820 <UART_SetConfig+0x900>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	2b07      	cmp	r3, #7
 80077e4:	d01a      	beq.n	800781c <UART_SetConfig+0x8fc>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	2b08      	cmp	r3, #8
 80077ec:	d014      	beq.n	8007818 <UART_SetConfig+0x8f8>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	2b09      	cmp	r3, #9
 80077f4:	d00e      	beq.n	8007814 <UART_SetConfig+0x8f4>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	2b0a      	cmp	r3, #10
 80077fc:	d008      	beq.n	8007810 <UART_SetConfig+0x8f0>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	2b0b      	cmp	r3, #11
 8007804:	d102      	bne.n	800780c <UART_SetConfig+0x8ec>
 8007806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800780a:	e016      	b.n	800783a <UART_SetConfig+0x91a>
 800780c:	2301      	movs	r3, #1
 800780e:	e014      	b.n	800783a <UART_SetConfig+0x91a>
 8007810:	2380      	movs	r3, #128	; 0x80
 8007812:	e012      	b.n	800783a <UART_SetConfig+0x91a>
 8007814:	2340      	movs	r3, #64	; 0x40
 8007816:	e010      	b.n	800783a <UART_SetConfig+0x91a>
 8007818:	2320      	movs	r3, #32
 800781a:	e00e      	b.n	800783a <UART_SetConfig+0x91a>
 800781c:	2310      	movs	r3, #16
 800781e:	e00c      	b.n	800783a <UART_SetConfig+0x91a>
 8007820:	230c      	movs	r3, #12
 8007822:	e00a      	b.n	800783a <UART_SetConfig+0x91a>
 8007824:	230a      	movs	r3, #10
 8007826:	e008      	b.n	800783a <UART_SetConfig+0x91a>
 8007828:	2308      	movs	r3, #8
 800782a:	e006      	b.n	800783a <UART_SetConfig+0x91a>
 800782c:	2306      	movs	r3, #6
 800782e:	e004      	b.n	800783a <UART_SetConfig+0x91a>
 8007830:	2304      	movs	r3, #4
 8007832:	e002      	b.n	800783a <UART_SetConfig+0x91a>
 8007834:	2302      	movs	r3, #2
 8007836:	e000      	b.n	800783a <UART_SetConfig+0x91a>
 8007838:	2301      	movs	r3, #1
 800783a:	fbb2 f3f3 	udiv	r3, r2, r3
 800783e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007840:	e1cb      	b.n	8007bda <UART_SetConfig+0xcba>
 8007842:	bf00      	nop
 8007844:	40007c00 	.word	0x40007c00
 8007848:	58024400 	.word	0x58024400
 800784c:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007850:	f107 030c 	add.w	r3, r7, #12
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe ff01 	bl	800665c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	d044      	beq.n	80078ee <UART_SetConfig+0x9ce>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	2b01      	cmp	r3, #1
 800786a:	d03e      	beq.n	80078ea <UART_SetConfig+0x9ca>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	2b02      	cmp	r3, #2
 8007872:	d038      	beq.n	80078e6 <UART_SetConfig+0x9c6>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	2b03      	cmp	r3, #3
 800787a:	d032      	beq.n	80078e2 <UART_SetConfig+0x9c2>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	2b04      	cmp	r3, #4
 8007882:	d02c      	beq.n	80078de <UART_SetConfig+0x9be>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	2b05      	cmp	r3, #5
 800788a:	d026      	beq.n	80078da <UART_SetConfig+0x9ba>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	2b06      	cmp	r3, #6
 8007892:	d020      	beq.n	80078d6 <UART_SetConfig+0x9b6>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	2b07      	cmp	r3, #7
 800789a:	d01a      	beq.n	80078d2 <UART_SetConfig+0x9b2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d014      	beq.n	80078ce <UART_SetConfig+0x9ae>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	2b09      	cmp	r3, #9
 80078aa:	d00e      	beq.n	80078ca <UART_SetConfig+0x9aa>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	2b0a      	cmp	r3, #10
 80078b2:	d008      	beq.n	80078c6 <UART_SetConfig+0x9a6>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	2b0b      	cmp	r3, #11
 80078ba:	d102      	bne.n	80078c2 <UART_SetConfig+0x9a2>
 80078bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078c0:	e016      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e014      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078c6:	2380      	movs	r3, #128	; 0x80
 80078c8:	e012      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078ca:	2340      	movs	r3, #64	; 0x40
 80078cc:	e010      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078ce:	2320      	movs	r3, #32
 80078d0:	e00e      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078d2:	2310      	movs	r3, #16
 80078d4:	e00c      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078d6:	230c      	movs	r3, #12
 80078d8:	e00a      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078da:	230a      	movs	r3, #10
 80078dc:	e008      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078de:	2308      	movs	r3, #8
 80078e0:	e006      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078e2:	2306      	movs	r3, #6
 80078e4:	e004      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078e6:	2304      	movs	r3, #4
 80078e8:	e002      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078ea:	2302      	movs	r3, #2
 80078ec:	e000      	b.n	80078f0 <UART_SetConfig+0x9d0>
 80078ee:	2301      	movs	r3, #1
 80078f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078f6:	e170      	b.n	8007bda <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078f8:	4b79      	ldr	r3, [pc, #484]	; (8007ae0 <UART_SetConfig+0xbc0>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0320 	and.w	r3, r3, #32
 8007900:	2b00      	cmp	r3, #0
 8007902:	d054      	beq.n	80079ae <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007904:	4b76      	ldr	r3, [pc, #472]	; (8007ae0 <UART_SetConfig+0xbc0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	08db      	lsrs	r3, r3, #3
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	4a75      	ldr	r2, [pc, #468]	; (8007ae4 <UART_SetConfig+0xbc4>)
 8007910:	40da      	lsrs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	2b00      	cmp	r3, #0
 8007918:	d044      	beq.n	80079a4 <UART_SetConfig+0xa84>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b01      	cmp	r3, #1
 8007920:	d03e      	beq.n	80079a0 <UART_SetConfig+0xa80>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	2b02      	cmp	r3, #2
 8007928:	d038      	beq.n	800799c <UART_SetConfig+0xa7c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	2b03      	cmp	r3, #3
 8007930:	d032      	beq.n	8007998 <UART_SetConfig+0xa78>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	2b04      	cmp	r3, #4
 8007938:	d02c      	beq.n	8007994 <UART_SetConfig+0xa74>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	2b05      	cmp	r3, #5
 8007940:	d026      	beq.n	8007990 <UART_SetConfig+0xa70>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	2b06      	cmp	r3, #6
 8007948:	d020      	beq.n	800798c <UART_SetConfig+0xa6c>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	2b07      	cmp	r3, #7
 8007950:	d01a      	beq.n	8007988 <UART_SetConfig+0xa68>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	2b08      	cmp	r3, #8
 8007958:	d014      	beq.n	8007984 <UART_SetConfig+0xa64>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	2b09      	cmp	r3, #9
 8007960:	d00e      	beq.n	8007980 <UART_SetConfig+0xa60>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	2b0a      	cmp	r3, #10
 8007968:	d008      	beq.n	800797c <UART_SetConfig+0xa5c>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	2b0b      	cmp	r3, #11
 8007970:	d102      	bne.n	8007978 <UART_SetConfig+0xa58>
 8007972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007976:	e016      	b.n	80079a6 <UART_SetConfig+0xa86>
 8007978:	2301      	movs	r3, #1
 800797a:	e014      	b.n	80079a6 <UART_SetConfig+0xa86>
 800797c:	2380      	movs	r3, #128	; 0x80
 800797e:	e012      	b.n	80079a6 <UART_SetConfig+0xa86>
 8007980:	2340      	movs	r3, #64	; 0x40
 8007982:	e010      	b.n	80079a6 <UART_SetConfig+0xa86>
 8007984:	2320      	movs	r3, #32
 8007986:	e00e      	b.n	80079a6 <UART_SetConfig+0xa86>
 8007988:	2310      	movs	r3, #16
 800798a:	e00c      	b.n	80079a6 <UART_SetConfig+0xa86>
 800798c:	230c      	movs	r3, #12
 800798e:	e00a      	b.n	80079a6 <UART_SetConfig+0xa86>
 8007990:	230a      	movs	r3, #10
 8007992:	e008      	b.n	80079a6 <UART_SetConfig+0xa86>
 8007994:	2308      	movs	r3, #8
 8007996:	e006      	b.n	80079a6 <UART_SetConfig+0xa86>
 8007998:	2306      	movs	r3, #6
 800799a:	e004      	b.n	80079a6 <UART_SetConfig+0xa86>
 800799c:	2304      	movs	r3, #4
 800799e:	e002      	b.n	80079a6 <UART_SetConfig+0xa86>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e000      	b.n	80079a6 <UART_SetConfig+0xa86>
 80079a4:	2301      	movs	r3, #1
 80079a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80079ac:	e115      	b.n	8007bda <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d043      	beq.n	8007a3e <UART_SetConfig+0xb1e>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d03d      	beq.n	8007a3a <UART_SetConfig+0xb1a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d037      	beq.n	8007a36 <UART_SetConfig+0xb16>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d031      	beq.n	8007a32 <UART_SetConfig+0xb12>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d02b      	beq.n	8007a2e <UART_SetConfig+0xb0e>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	2b05      	cmp	r3, #5
 80079dc:	d025      	beq.n	8007a2a <UART_SetConfig+0xb0a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	2b06      	cmp	r3, #6
 80079e4:	d01f      	beq.n	8007a26 <UART_SetConfig+0xb06>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	2b07      	cmp	r3, #7
 80079ec:	d019      	beq.n	8007a22 <UART_SetConfig+0xb02>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d013      	beq.n	8007a1e <UART_SetConfig+0xafe>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	2b09      	cmp	r3, #9
 80079fc:	d00d      	beq.n	8007a1a <UART_SetConfig+0xafa>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	2b0a      	cmp	r3, #10
 8007a04:	d007      	beq.n	8007a16 <UART_SetConfig+0xaf6>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	2b0b      	cmp	r3, #11
 8007a0c:	d101      	bne.n	8007a12 <UART_SetConfig+0xaf2>
 8007a0e:	4b36      	ldr	r3, [pc, #216]	; (8007ae8 <UART_SetConfig+0xbc8>)
 8007a10:	e016      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a12:	4b34      	ldr	r3, [pc, #208]	; (8007ae4 <UART_SetConfig+0xbc4>)
 8007a14:	e014      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a16:	4b35      	ldr	r3, [pc, #212]	; (8007aec <UART_SetConfig+0xbcc>)
 8007a18:	e012      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a1a:	4b35      	ldr	r3, [pc, #212]	; (8007af0 <UART_SetConfig+0xbd0>)
 8007a1c:	e010      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a1e:	4b35      	ldr	r3, [pc, #212]	; (8007af4 <UART_SetConfig+0xbd4>)
 8007a20:	e00e      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a22:	4b35      	ldr	r3, [pc, #212]	; (8007af8 <UART_SetConfig+0xbd8>)
 8007a24:	e00c      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a26:	4b35      	ldr	r3, [pc, #212]	; (8007afc <UART_SetConfig+0xbdc>)
 8007a28:	e00a      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a2a:	4b35      	ldr	r3, [pc, #212]	; (8007b00 <UART_SetConfig+0xbe0>)
 8007a2c:	e008      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a2e:	4b35      	ldr	r3, [pc, #212]	; (8007b04 <UART_SetConfig+0xbe4>)
 8007a30:	e006      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a32:	4b35      	ldr	r3, [pc, #212]	; (8007b08 <UART_SetConfig+0xbe8>)
 8007a34:	e004      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a36:	4b35      	ldr	r3, [pc, #212]	; (8007b0c <UART_SetConfig+0xbec>)
 8007a38:	e002      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a3a:	4b35      	ldr	r3, [pc, #212]	; (8007b10 <UART_SetConfig+0xbf0>)
 8007a3c:	e000      	b.n	8007a40 <UART_SetConfig+0xb20>
 8007a3e:	4b29      	ldr	r3, [pc, #164]	; (8007ae4 <UART_SetConfig+0xbc4>)
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a42:	e0ca      	b.n	8007bda <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d046      	beq.n	8007ada <UART_SetConfig+0xbba>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d040      	beq.n	8007ad6 <UART_SetConfig+0xbb6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d03a      	beq.n	8007ad2 <UART_SetConfig+0xbb2>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d034      	beq.n	8007ace <UART_SetConfig+0xbae>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d02e      	beq.n	8007aca <UART_SetConfig+0xbaa>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	2b05      	cmp	r3, #5
 8007a72:	d028      	beq.n	8007ac6 <UART_SetConfig+0xba6>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	2b06      	cmp	r3, #6
 8007a7a:	d022      	beq.n	8007ac2 <UART_SetConfig+0xba2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	2b07      	cmp	r3, #7
 8007a82:	d01c      	beq.n	8007abe <UART_SetConfig+0xb9e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d016      	beq.n	8007aba <UART_SetConfig+0xb9a>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	2b09      	cmp	r3, #9
 8007a92:	d00f      	beq.n	8007ab4 <UART_SetConfig+0xb94>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	2b0a      	cmp	r3, #10
 8007a9a:	d008      	beq.n	8007aae <UART_SetConfig+0xb8e>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2b0b      	cmp	r3, #11
 8007aa2:	d102      	bne.n	8007aaa <UART_SetConfig+0xb8a>
 8007aa4:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007aa8:	e018      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007aaa:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <UART_SetConfig+0xbd8>)
 8007aac:	e016      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007aae:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007ab2:	e013      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007ab4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007ab8:	e010      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007aba:	4b16      	ldr	r3, [pc, #88]	; (8007b14 <UART_SetConfig+0xbf4>)
 8007abc:	e00e      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007abe:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <UART_SetConfig+0xbc8>)
 8007ac0:	e00c      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007ac2:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <UART_SetConfig+0xbf8>)
 8007ac4:	e00a      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007ac6:	4b15      	ldr	r3, [pc, #84]	; (8007b1c <UART_SetConfig+0xbfc>)
 8007ac8:	e008      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007aca:	4b08      	ldr	r3, [pc, #32]	; (8007aec <UART_SetConfig+0xbcc>)
 8007acc:	e006      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007ace:	4b14      	ldr	r3, [pc, #80]	; (8007b20 <UART_SetConfig+0xc00>)
 8007ad0:	e004      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <UART_SetConfig+0xbd0>)
 8007ad4:	e002      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007ad6:	4b07      	ldr	r3, [pc, #28]	; (8007af4 <UART_SetConfig+0xbd4>)
 8007ad8:	e000      	b.n	8007adc <UART_SetConfig+0xbbc>
 8007ada:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <UART_SetConfig+0xbd8>)
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ade:	e07c      	b.n	8007bda <UART_SetConfig+0xcba>
 8007ae0:	58024400 	.word	0x58024400
 8007ae4:	03d09000 	.word	0x03d09000
 8007ae8:	0003d090 	.word	0x0003d090
 8007aec:	0007a120 	.word	0x0007a120
 8007af0:	000f4240 	.word	0x000f4240
 8007af4:	001e8480 	.word	0x001e8480
 8007af8:	003d0900 	.word	0x003d0900
 8007afc:	00516155 	.word	0x00516155
 8007b00:	0061a800 	.word	0x0061a800
 8007b04:	007a1200 	.word	0x007a1200
 8007b08:	00a2c2aa 	.word	0x00a2c2aa
 8007b0c:	00f42400 	.word	0x00f42400
 8007b10:	01e84800 	.word	0x01e84800
 8007b14:	0001e848 	.word	0x0001e848
 8007b18:	00051615 	.word	0x00051615
 8007b1c:	00061a80 	.word	0x00061a80
 8007b20:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d04e      	beq.n	8007bca <UART_SetConfig+0xcaa>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d047      	beq.n	8007bc4 <UART_SetConfig+0xca4>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d040      	beq.n	8007bbe <UART_SetConfig+0xc9e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d039      	beq.n	8007bb8 <UART_SetConfig+0xc98>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d032      	beq.n	8007bb2 <UART_SetConfig+0xc92>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	2b05      	cmp	r3, #5
 8007b52:	d02b      	beq.n	8007bac <UART_SetConfig+0xc8c>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	2b06      	cmp	r3, #6
 8007b5a:	d024      	beq.n	8007ba6 <UART_SetConfig+0xc86>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	2b07      	cmp	r3, #7
 8007b62:	d01d      	beq.n	8007ba0 <UART_SetConfig+0xc80>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d016      	beq.n	8007b9a <UART_SetConfig+0xc7a>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	2b09      	cmp	r3, #9
 8007b72:	d00f      	beq.n	8007b94 <UART_SetConfig+0xc74>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	2b0a      	cmp	r3, #10
 8007b7a:	d008      	beq.n	8007b8e <UART_SetConfig+0xc6e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	2b0b      	cmp	r3, #11
 8007b82:	d101      	bne.n	8007b88 <UART_SetConfig+0xc68>
 8007b84:	2380      	movs	r3, #128	; 0x80
 8007b86:	e022      	b.n	8007bce <UART_SetConfig+0xcae>
 8007b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8c:	e01f      	b.n	8007bce <UART_SetConfig+0xcae>
 8007b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b92:	e01c      	b.n	8007bce <UART_SetConfig+0xcae>
 8007b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b98:	e019      	b.n	8007bce <UART_SetConfig+0xcae>
 8007b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b9e:	e016      	b.n	8007bce <UART_SetConfig+0xcae>
 8007ba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ba4:	e013      	b.n	8007bce <UART_SetConfig+0xcae>
 8007ba6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007baa:	e010      	b.n	8007bce <UART_SetConfig+0xcae>
 8007bac:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007bb0:	e00d      	b.n	8007bce <UART_SetConfig+0xcae>
 8007bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bb6:	e00a      	b.n	8007bce <UART_SetConfig+0xcae>
 8007bb8:	f241 5355 	movw	r3, #5461	; 0x1555
 8007bbc:	e007      	b.n	8007bce <UART_SetConfig+0xcae>
 8007bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bc2:	e004      	b.n	8007bce <UART_SetConfig+0xcae>
 8007bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bc8:	e001      	b.n	8007bce <UART_SetConfig+0xcae>
 8007bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bd0:	e003      	b.n	8007bda <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007bd8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f001 83e8 	beq.w	80093b2 <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	4613      	mov	r3, r2
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	4413      	add	r3, r2
 8007bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d305      	bcc.n	8007bfe <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d904      	bls.n	8007c08 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c04:	f001 bbd5 	b.w	80093b2 <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 8007c08:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	f000 8154 	beq.w	8007eba <UART_SetConfig+0xf9a>
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	dc06      	bgt.n	8007c24 <UART_SetConfig+0xd04>
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d00f      	beq.n	8007c3a <UART_SetConfig+0xd1a>
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	f000 80ac 	beq.w	8007d78 <UART_SetConfig+0xe58>
 8007c20:	f000 bc30 	b.w	8008484 <UART_SetConfig+0x1564>
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	f000 832d 	beq.w	8008284 <UART_SetConfig+0x1364>
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	f000 83a5 	beq.w	800837a <UART_SetConfig+0x145a>
 8007c30:	2b10      	cmp	r3, #16
 8007c32:	f000 81e3 	beq.w	8007ffc <UART_SetConfig+0x10dc>
 8007c36:	f000 bc25 	b.w	8008484 <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c3a:	f7fe fbad 	bl	8006398 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c3e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	4618      	mov	r0, r3
 8007c44:	f04f 0100 	mov.w	r1, #0
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d067      	beq.n	8007d20 <UART_SetConfig+0xe00>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d05e      	beq.n	8007d16 <UART_SetConfig+0xdf6>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d055      	beq.n	8007d0c <UART_SetConfig+0xdec>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d04c      	beq.n	8007d02 <UART_SetConfig+0xde2>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d043      	beq.n	8007cf8 <UART_SetConfig+0xdd8>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b05      	cmp	r3, #5
 8007c76:	d03a      	beq.n	8007cee <UART_SetConfig+0xdce>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	2b06      	cmp	r3, #6
 8007c7e:	d031      	beq.n	8007ce4 <UART_SetConfig+0xdc4>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2b07      	cmp	r3, #7
 8007c86:	d028      	beq.n	8007cda <UART_SetConfig+0xdba>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d01f      	beq.n	8007cd0 <UART_SetConfig+0xdb0>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	2b09      	cmp	r3, #9
 8007c96:	d016      	beq.n	8007cc6 <UART_SetConfig+0xda6>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	2b0a      	cmp	r3, #10
 8007c9e:	d00d      	beq.n	8007cbc <UART_SetConfig+0xd9c>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	2b0b      	cmp	r3, #11
 8007ca6:	d104      	bne.n	8007cb2 <UART_SetConfig+0xd92>
 8007ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cac:	f04f 0400 	mov.w	r4, #0
 8007cb0:	e03a      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007cb2:	f04f 0301 	mov.w	r3, #1
 8007cb6:	f04f 0400 	mov.w	r4, #0
 8007cba:	e035      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007cbc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007cc0:	f04f 0400 	mov.w	r4, #0
 8007cc4:	e030      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007cc6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007cca:	f04f 0400 	mov.w	r4, #0
 8007cce:	e02b      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007cd0:	f04f 0320 	mov.w	r3, #32
 8007cd4:	f04f 0400 	mov.w	r4, #0
 8007cd8:	e026      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007cda:	f04f 0310 	mov.w	r3, #16
 8007cde:	f04f 0400 	mov.w	r4, #0
 8007ce2:	e021      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007ce4:	f04f 030c 	mov.w	r3, #12
 8007ce8:	f04f 0400 	mov.w	r4, #0
 8007cec:	e01c      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007cee:	f04f 030a 	mov.w	r3, #10
 8007cf2:	f04f 0400 	mov.w	r4, #0
 8007cf6:	e017      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007cf8:	f04f 0308 	mov.w	r3, #8
 8007cfc:	f04f 0400 	mov.w	r4, #0
 8007d00:	e012      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007d02:	f04f 0306 	mov.w	r3, #6
 8007d06:	f04f 0400 	mov.w	r4, #0
 8007d0a:	e00d      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007d0c:	f04f 0304 	mov.w	r3, #4
 8007d10:	f04f 0400 	mov.w	r4, #0
 8007d14:	e008      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007d16:	f04f 0302 	mov.w	r3, #2
 8007d1a:	f04f 0400 	mov.w	r4, #0
 8007d1e:	e003      	b.n	8007d28 <UART_SetConfig+0xe08>
 8007d20:	f04f 0301 	mov.w	r3, #1
 8007d24:	f04f 0400 	mov.w	r4, #0
 8007d28:	461a      	mov	r2, r3
 8007d2a:	4623      	mov	r3, r4
 8007d2c:	f7f8 fad4 	bl	80002d8 <__aeabi_uldivmod>
 8007d30:	4603      	mov	r3, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	4619      	mov	r1, r3
 8007d36:	4622      	mov	r2, r4
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	f04f 0400 	mov.w	r4, #0
 8007d40:	0214      	lsls	r4, r2, #8
 8007d42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007d46:	020b      	lsls	r3, r1, #8
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6852      	ldr	r2, [r2, #4]
 8007d4c:	0852      	lsrs	r2, r2, #1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	eb13 0b01 	adds.w	fp, r3, r1
 8007d58:	eb44 0c02 	adc.w	ip, r4, r2
 8007d5c:	4658      	mov	r0, fp
 8007d5e:	4661      	mov	r1, ip
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f04f 0400 	mov.w	r4, #0
 8007d68:	461a      	mov	r2, r3
 8007d6a:	4623      	mov	r3, r4
 8007d6c:	f7f8 fab4 	bl	80002d8 <__aeabi_uldivmod>
 8007d70:	4603      	mov	r3, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d76:	e389      	b.n	800848c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d78:	f107 0318 	add.w	r3, r7, #24
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fb21 	bl	80063c4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f04f 0100 	mov.w	r1, #0
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d067      	beq.n	8007e62 <UART_SetConfig+0xf42>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d05e      	beq.n	8007e58 <UART_SetConfig+0xf38>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d055      	beq.n	8007e4e <UART_SetConfig+0xf2e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d04c      	beq.n	8007e44 <UART_SetConfig+0xf24>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d043      	beq.n	8007e3a <UART_SetConfig+0xf1a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	2b05      	cmp	r3, #5
 8007db8:	d03a      	beq.n	8007e30 <UART_SetConfig+0xf10>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	2b06      	cmp	r3, #6
 8007dc0:	d031      	beq.n	8007e26 <UART_SetConfig+0xf06>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	2b07      	cmp	r3, #7
 8007dc8:	d028      	beq.n	8007e1c <UART_SetConfig+0xefc>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	2b08      	cmp	r3, #8
 8007dd0:	d01f      	beq.n	8007e12 <UART_SetConfig+0xef2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	2b09      	cmp	r3, #9
 8007dd8:	d016      	beq.n	8007e08 <UART_SetConfig+0xee8>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	2b0a      	cmp	r3, #10
 8007de0:	d00d      	beq.n	8007dfe <UART_SetConfig+0xede>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	2b0b      	cmp	r3, #11
 8007de8:	d104      	bne.n	8007df4 <UART_SetConfig+0xed4>
 8007dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dee:	f04f 0400 	mov.w	r4, #0
 8007df2:	e03a      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007df4:	f04f 0301 	mov.w	r3, #1
 8007df8:	f04f 0400 	mov.w	r4, #0
 8007dfc:	e035      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007dfe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007e02:	f04f 0400 	mov.w	r4, #0
 8007e06:	e030      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007e08:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007e0c:	f04f 0400 	mov.w	r4, #0
 8007e10:	e02b      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007e12:	f04f 0320 	mov.w	r3, #32
 8007e16:	f04f 0400 	mov.w	r4, #0
 8007e1a:	e026      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007e1c:	f04f 0310 	mov.w	r3, #16
 8007e20:	f04f 0400 	mov.w	r4, #0
 8007e24:	e021      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007e26:	f04f 030c 	mov.w	r3, #12
 8007e2a:	f04f 0400 	mov.w	r4, #0
 8007e2e:	e01c      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007e30:	f04f 030a 	mov.w	r3, #10
 8007e34:	f04f 0400 	mov.w	r4, #0
 8007e38:	e017      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007e3a:	f04f 0308 	mov.w	r3, #8
 8007e3e:	f04f 0400 	mov.w	r4, #0
 8007e42:	e012      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007e44:	f04f 0306 	mov.w	r3, #6
 8007e48:	f04f 0400 	mov.w	r4, #0
 8007e4c:	e00d      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007e4e:	f04f 0304 	mov.w	r3, #4
 8007e52:	f04f 0400 	mov.w	r4, #0
 8007e56:	e008      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007e58:	f04f 0302 	mov.w	r3, #2
 8007e5c:	f04f 0400 	mov.w	r4, #0
 8007e60:	e003      	b.n	8007e6a <UART_SetConfig+0xf4a>
 8007e62:	f04f 0301 	mov.w	r3, #1
 8007e66:	f04f 0400 	mov.w	r4, #0
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	4623      	mov	r3, r4
 8007e6e:	f7f8 fa33 	bl	80002d8 <__aeabi_uldivmod>
 8007e72:	4603      	mov	r3, r0
 8007e74:	460c      	mov	r4, r1
 8007e76:	4619      	mov	r1, r3
 8007e78:	4622      	mov	r2, r4
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	f04f 0400 	mov.w	r4, #0
 8007e82:	0214      	lsls	r4, r2, #8
 8007e84:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007e88:	020b      	lsls	r3, r1, #8
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6852      	ldr	r2, [r2, #4]
 8007e8e:	0852      	lsrs	r2, r2, #1
 8007e90:	4611      	mov	r1, r2
 8007e92:	f04f 0200 	mov.w	r2, #0
 8007e96:	eb13 0b01 	adds.w	fp, r3, r1
 8007e9a:	eb44 0c02 	adc.w	ip, r4, r2
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	4661      	mov	r1, ip
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f04f 0400 	mov.w	r4, #0
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4623      	mov	r3, r4
 8007eae:	f7f8 fa13 	bl	80002d8 <__aeabi_uldivmod>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007eb8:	e2e8      	b.n	800848c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eba:	f107 030c 	add.w	r3, r7, #12
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fbcc 	bl	800665c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f04f 0100 	mov.w	r1, #0
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d067      	beq.n	8007fa4 <UART_SetConfig+0x1084>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d05e      	beq.n	8007f9a <UART_SetConfig+0x107a>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d055      	beq.n	8007f90 <UART_SetConfig+0x1070>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d04c      	beq.n	8007f86 <UART_SetConfig+0x1066>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d043      	beq.n	8007f7c <UART_SetConfig+0x105c>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	2b05      	cmp	r3, #5
 8007efa:	d03a      	beq.n	8007f72 <UART_SetConfig+0x1052>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f00:	2b06      	cmp	r3, #6
 8007f02:	d031      	beq.n	8007f68 <UART_SetConfig+0x1048>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	2b07      	cmp	r3, #7
 8007f0a:	d028      	beq.n	8007f5e <UART_SetConfig+0x103e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d01f      	beq.n	8007f54 <UART_SetConfig+0x1034>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	d016      	beq.n	8007f4a <UART_SetConfig+0x102a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	2b0a      	cmp	r3, #10
 8007f22:	d00d      	beq.n	8007f40 <UART_SetConfig+0x1020>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	2b0b      	cmp	r3, #11
 8007f2a:	d104      	bne.n	8007f36 <UART_SetConfig+0x1016>
 8007f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f30:	f04f 0400 	mov.w	r4, #0
 8007f34:	e03a      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f36:	f04f 0301 	mov.w	r3, #1
 8007f3a:	f04f 0400 	mov.w	r4, #0
 8007f3e:	e035      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f40:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007f44:	f04f 0400 	mov.w	r4, #0
 8007f48:	e030      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007f4e:	f04f 0400 	mov.w	r4, #0
 8007f52:	e02b      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f54:	f04f 0320 	mov.w	r3, #32
 8007f58:	f04f 0400 	mov.w	r4, #0
 8007f5c:	e026      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f5e:	f04f 0310 	mov.w	r3, #16
 8007f62:	f04f 0400 	mov.w	r4, #0
 8007f66:	e021      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f68:	f04f 030c 	mov.w	r3, #12
 8007f6c:	f04f 0400 	mov.w	r4, #0
 8007f70:	e01c      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f72:	f04f 030a 	mov.w	r3, #10
 8007f76:	f04f 0400 	mov.w	r4, #0
 8007f7a:	e017      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f7c:	f04f 0308 	mov.w	r3, #8
 8007f80:	f04f 0400 	mov.w	r4, #0
 8007f84:	e012      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f86:	f04f 0306 	mov.w	r3, #6
 8007f8a:	f04f 0400 	mov.w	r4, #0
 8007f8e:	e00d      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f90:	f04f 0304 	mov.w	r3, #4
 8007f94:	f04f 0400 	mov.w	r4, #0
 8007f98:	e008      	b.n	8007fac <UART_SetConfig+0x108c>
 8007f9a:	f04f 0302 	mov.w	r3, #2
 8007f9e:	f04f 0400 	mov.w	r4, #0
 8007fa2:	e003      	b.n	8007fac <UART_SetConfig+0x108c>
 8007fa4:	f04f 0301 	mov.w	r3, #1
 8007fa8:	f04f 0400 	mov.w	r4, #0
 8007fac:	461a      	mov	r2, r3
 8007fae:	4623      	mov	r3, r4
 8007fb0:	f7f8 f992 	bl	80002d8 <__aeabi_uldivmod>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4622      	mov	r2, r4
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	f04f 0400 	mov.w	r4, #0
 8007fc4:	0214      	lsls	r4, r2, #8
 8007fc6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007fca:	020b      	lsls	r3, r1, #8
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6852      	ldr	r2, [r2, #4]
 8007fd0:	0852      	lsrs	r2, r2, #1
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	eb13 0b01 	adds.w	fp, r3, r1
 8007fdc:	eb44 0c02 	adc.w	ip, r4, r2
 8007fe0:	4658      	mov	r0, fp
 8007fe2:	4661      	mov	r1, ip
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f04f 0400 	mov.w	r4, #0
 8007fec:	461a      	mov	r2, r3
 8007fee:	4623      	mov	r3, r4
 8007ff0:	f7f8 f972 	bl	80002d8 <__aeabi_uldivmod>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ffa:	e247      	b.n	800848c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ffc:	4b96      	ldr	r3, [pc, #600]	; (8008258 <UART_SetConfig+0x1338>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 80a3 	beq.w	8008150 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800800a:	4b93      	ldr	r3, [pc, #588]	; (8008258 <UART_SetConfig+0x1338>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	08db      	lsrs	r3, r3, #3
 8008010:	f003 0303 	and.w	r3, r3, #3
 8008014:	4a91      	ldr	r2, [pc, #580]	; (800825c <UART_SetConfig+0x133c>)
 8008016:	fa22 f303 	lsr.w	r3, r2, r3
 800801a:	4618      	mov	r0, r3
 800801c:	f04f 0100 	mov.w	r1, #0
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	d067      	beq.n	80080f8 <UART_SetConfig+0x11d8>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	2b01      	cmp	r3, #1
 800802e:	d05e      	beq.n	80080ee <UART_SetConfig+0x11ce>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	2b02      	cmp	r3, #2
 8008036:	d055      	beq.n	80080e4 <UART_SetConfig+0x11c4>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	2b03      	cmp	r3, #3
 800803e:	d04c      	beq.n	80080da <UART_SetConfig+0x11ba>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	2b04      	cmp	r3, #4
 8008046:	d043      	beq.n	80080d0 <UART_SetConfig+0x11b0>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	2b05      	cmp	r3, #5
 800804e:	d03a      	beq.n	80080c6 <UART_SetConfig+0x11a6>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	2b06      	cmp	r3, #6
 8008056:	d031      	beq.n	80080bc <UART_SetConfig+0x119c>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	2b07      	cmp	r3, #7
 800805e:	d028      	beq.n	80080b2 <UART_SetConfig+0x1192>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	2b08      	cmp	r3, #8
 8008066:	d01f      	beq.n	80080a8 <UART_SetConfig+0x1188>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	2b09      	cmp	r3, #9
 800806e:	d016      	beq.n	800809e <UART_SetConfig+0x117e>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	2b0a      	cmp	r3, #10
 8008076:	d00d      	beq.n	8008094 <UART_SetConfig+0x1174>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	2b0b      	cmp	r3, #11
 800807e:	d104      	bne.n	800808a <UART_SetConfig+0x116a>
 8008080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008084:	f04f 0400 	mov.w	r4, #0
 8008088:	e03a      	b.n	8008100 <UART_SetConfig+0x11e0>
 800808a:	f04f 0301 	mov.w	r3, #1
 800808e:	f04f 0400 	mov.w	r4, #0
 8008092:	e035      	b.n	8008100 <UART_SetConfig+0x11e0>
 8008094:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008098:	f04f 0400 	mov.w	r4, #0
 800809c:	e030      	b.n	8008100 <UART_SetConfig+0x11e0>
 800809e:	f04f 0340 	mov.w	r3, #64	; 0x40
 80080a2:	f04f 0400 	mov.w	r4, #0
 80080a6:	e02b      	b.n	8008100 <UART_SetConfig+0x11e0>
 80080a8:	f04f 0320 	mov.w	r3, #32
 80080ac:	f04f 0400 	mov.w	r4, #0
 80080b0:	e026      	b.n	8008100 <UART_SetConfig+0x11e0>
 80080b2:	f04f 0310 	mov.w	r3, #16
 80080b6:	f04f 0400 	mov.w	r4, #0
 80080ba:	e021      	b.n	8008100 <UART_SetConfig+0x11e0>
 80080bc:	f04f 030c 	mov.w	r3, #12
 80080c0:	f04f 0400 	mov.w	r4, #0
 80080c4:	e01c      	b.n	8008100 <UART_SetConfig+0x11e0>
 80080c6:	f04f 030a 	mov.w	r3, #10
 80080ca:	f04f 0400 	mov.w	r4, #0
 80080ce:	e017      	b.n	8008100 <UART_SetConfig+0x11e0>
 80080d0:	f04f 0308 	mov.w	r3, #8
 80080d4:	f04f 0400 	mov.w	r4, #0
 80080d8:	e012      	b.n	8008100 <UART_SetConfig+0x11e0>
 80080da:	f04f 0306 	mov.w	r3, #6
 80080de:	f04f 0400 	mov.w	r4, #0
 80080e2:	e00d      	b.n	8008100 <UART_SetConfig+0x11e0>
 80080e4:	f04f 0304 	mov.w	r3, #4
 80080e8:	f04f 0400 	mov.w	r4, #0
 80080ec:	e008      	b.n	8008100 <UART_SetConfig+0x11e0>
 80080ee:	f04f 0302 	mov.w	r3, #2
 80080f2:	f04f 0400 	mov.w	r4, #0
 80080f6:	e003      	b.n	8008100 <UART_SetConfig+0x11e0>
 80080f8:	f04f 0301 	mov.w	r3, #1
 80080fc:	f04f 0400 	mov.w	r4, #0
 8008100:	461a      	mov	r2, r3
 8008102:	4623      	mov	r3, r4
 8008104:	f7f8 f8e8 	bl	80002d8 <__aeabi_uldivmod>
 8008108:	4603      	mov	r3, r0
 800810a:	460c      	mov	r4, r1
 800810c:	4619      	mov	r1, r3
 800810e:	4622      	mov	r2, r4
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	f04f 0400 	mov.w	r4, #0
 8008118:	0214      	lsls	r4, r2, #8
 800811a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800811e:	020b      	lsls	r3, r1, #8
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6852      	ldr	r2, [r2, #4]
 8008124:	0852      	lsrs	r2, r2, #1
 8008126:	4611      	mov	r1, r2
 8008128:	f04f 0200 	mov.w	r2, #0
 800812c:	eb13 0b01 	adds.w	fp, r3, r1
 8008130:	eb44 0c02 	adc.w	ip, r4, r2
 8008134:	4658      	mov	r0, fp
 8008136:	4661      	mov	r1, ip
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f04f 0400 	mov.w	r4, #0
 8008140:	461a      	mov	r2, r3
 8008142:	4623      	mov	r3, r4
 8008144:	f7f8 f8c8 	bl	80002d8 <__aeabi_uldivmod>
 8008148:	4603      	mov	r3, r0
 800814a:	460c      	mov	r4, r1
 800814c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800814e:	e19d      	b.n	800848c <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	2b00      	cmp	r3, #0
 8008156:	d05b      	beq.n	8008210 <UART_SetConfig+0x12f0>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	2b01      	cmp	r3, #1
 800815e:	d053      	beq.n	8008208 <UART_SetConfig+0x12e8>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	2b02      	cmp	r3, #2
 8008166:	d04b      	beq.n	8008200 <UART_SetConfig+0x12e0>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	2b03      	cmp	r3, #3
 800816e:	d043      	beq.n	80081f8 <UART_SetConfig+0x12d8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	2b04      	cmp	r3, #4
 8008176:	d03b      	beq.n	80081f0 <UART_SetConfig+0x12d0>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	2b05      	cmp	r3, #5
 800817e:	d033      	beq.n	80081e8 <UART_SetConfig+0x12c8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	2b06      	cmp	r3, #6
 8008186:	d02b      	beq.n	80081e0 <UART_SetConfig+0x12c0>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2b07      	cmp	r3, #7
 800818e:	d023      	beq.n	80081d8 <UART_SetConfig+0x12b8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	2b08      	cmp	r3, #8
 8008196:	d01b      	beq.n	80081d0 <UART_SetConfig+0x12b0>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	2b09      	cmp	r3, #9
 800819e:	d013      	beq.n	80081c8 <UART_SetConfig+0x12a8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	2b0a      	cmp	r3, #10
 80081a6:	d00b      	beq.n	80081c0 <UART_SetConfig+0x12a0>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	2b0b      	cmp	r3, #11
 80081ae:	d103      	bne.n	80081b8 <UART_SetConfig+0x1298>
 80081b0:	4b2a      	ldr	r3, [pc, #168]	; (800825c <UART_SetConfig+0x133c>)
 80081b2:	f04f 0400 	mov.w	r4, #0
 80081b6:	e02e      	b.n	8008216 <UART_SetConfig+0x12f6>
 80081b8:	4b29      	ldr	r3, [pc, #164]	; (8008260 <UART_SetConfig+0x1340>)
 80081ba:	f04f 0403 	mov.w	r4, #3
 80081be:	e02a      	b.n	8008216 <UART_SetConfig+0x12f6>
 80081c0:	4b28      	ldr	r3, [pc, #160]	; (8008264 <UART_SetConfig+0x1344>)
 80081c2:	f04f 0400 	mov.w	r4, #0
 80081c6:	e026      	b.n	8008216 <UART_SetConfig+0x12f6>
 80081c8:	4b27      	ldr	r3, [pc, #156]	; (8008268 <UART_SetConfig+0x1348>)
 80081ca:	f04f 0400 	mov.w	r4, #0
 80081ce:	e022      	b.n	8008216 <UART_SetConfig+0x12f6>
 80081d0:	4b26      	ldr	r3, [pc, #152]	; (800826c <UART_SetConfig+0x134c>)
 80081d2:	f04f 0400 	mov.w	r4, #0
 80081d6:	e01e      	b.n	8008216 <UART_SetConfig+0x12f6>
 80081d8:	4b25      	ldr	r3, [pc, #148]	; (8008270 <UART_SetConfig+0x1350>)
 80081da:	f04f 0400 	mov.w	r4, #0
 80081de:	e01a      	b.n	8008216 <UART_SetConfig+0x12f6>
 80081e0:	a419      	add	r4, pc, #100	; (adr r4, 8008248 <UART_SetConfig+0x1328>)
 80081e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80081e6:	e016      	b.n	8008216 <UART_SetConfig+0x12f6>
 80081e8:	4b22      	ldr	r3, [pc, #136]	; (8008274 <UART_SetConfig+0x1354>)
 80081ea:	f04f 0400 	mov.w	r4, #0
 80081ee:	e012      	b.n	8008216 <UART_SetConfig+0x12f6>
 80081f0:	4b21      	ldr	r3, [pc, #132]	; (8008278 <UART_SetConfig+0x1358>)
 80081f2:	f04f 0400 	mov.w	r4, #0
 80081f6:	e00e      	b.n	8008216 <UART_SetConfig+0x12f6>
 80081f8:	a415      	add	r4, pc, #84	; (adr r4, 8008250 <UART_SetConfig+0x1330>)
 80081fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80081fe:	e00a      	b.n	8008216 <UART_SetConfig+0x12f6>
 8008200:	4b1e      	ldr	r3, [pc, #120]	; (800827c <UART_SetConfig+0x135c>)
 8008202:	f04f 0400 	mov.w	r4, #0
 8008206:	e006      	b.n	8008216 <UART_SetConfig+0x12f6>
 8008208:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <UART_SetConfig+0x1360>)
 800820a:	f04f 0401 	mov.w	r4, #1
 800820e:	e002      	b.n	8008216 <UART_SetConfig+0x12f6>
 8008210:	4b13      	ldr	r3, [pc, #76]	; (8008260 <UART_SetConfig+0x1340>)
 8008212:	f04f 0403 	mov.w	r4, #3
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6852      	ldr	r2, [r2, #4]
 800821a:	0852      	lsrs	r2, r2, #1
 800821c:	4611      	mov	r1, r2
 800821e:	f04f 0200 	mov.w	r2, #0
 8008222:	eb13 0b01 	adds.w	fp, r3, r1
 8008226:	eb44 0c02 	adc.w	ip, r4, r2
 800822a:	4658      	mov	r0, fp
 800822c:	4661      	mov	r1, ip
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f04f 0400 	mov.w	r4, #0
 8008236:	461a      	mov	r2, r3
 8008238:	4623      	mov	r3, r4
 800823a:	f7f8 f84d 	bl	80002d8 <__aeabi_uldivmod>
 800823e:	4603      	mov	r3, r0
 8008240:	460c      	mov	r4, r1
 8008242:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008244:	e122      	b.n	800848c <UART_SetConfig+0x156c>
 8008246:	bf00      	nop
 8008248:	51615500 	.word	0x51615500
 800824c:	00000000 	.word	0x00000000
 8008250:	a2c2aa00 	.word	0xa2c2aa00
 8008254:	00000000 	.word	0x00000000
 8008258:	58024400 	.word	0x58024400
 800825c:	03d09000 	.word	0x03d09000
 8008260:	d0900000 	.word	0xd0900000
 8008264:	07a12000 	.word	0x07a12000
 8008268:	0f424000 	.word	0x0f424000
 800826c:	1e848000 	.word	0x1e848000
 8008270:	3d090000 	.word	0x3d090000
 8008274:	61a80000 	.word	0x61a80000
 8008278:	7a120000 	.word	0x7a120000
 800827c:	f4240000 	.word	0xf4240000
 8008280:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	2b00      	cmp	r3, #0
 800828a:	d05b      	beq.n	8008344 <UART_SetConfig+0x1424>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2b01      	cmp	r3, #1
 8008292:	d053      	beq.n	800833c <UART_SetConfig+0x141c>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b02      	cmp	r3, #2
 800829a:	d04b      	beq.n	8008334 <UART_SetConfig+0x1414>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d043      	beq.n	800832c <UART_SetConfig+0x140c>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d03b      	beq.n	8008324 <UART_SetConfig+0x1404>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	2b05      	cmp	r3, #5
 80082b2:	d033      	beq.n	800831c <UART_SetConfig+0x13fc>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b06      	cmp	r3, #6
 80082ba:	d02b      	beq.n	8008314 <UART_SetConfig+0x13f4>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b07      	cmp	r3, #7
 80082c2:	d023      	beq.n	800830c <UART_SetConfig+0x13ec>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	d01b      	beq.n	8008304 <UART_SetConfig+0x13e4>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b09      	cmp	r3, #9
 80082d2:	d013      	beq.n	80082fc <UART_SetConfig+0x13dc>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b0a      	cmp	r3, #10
 80082da:	d00b      	beq.n	80082f4 <UART_SetConfig+0x13d4>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	2b0b      	cmp	r3, #11
 80082e2:	d103      	bne.n	80082ec <UART_SetConfig+0x13cc>
 80082e4:	4bc0      	ldr	r3, [pc, #768]	; (80085e8 <UART_SetConfig+0x16c8>)
 80082e6:	f04f 0400 	mov.w	r4, #0
 80082ea:	e02e      	b.n	800834a <UART_SetConfig+0x142a>
 80082ec:	4bbf      	ldr	r3, [pc, #764]	; (80085ec <UART_SetConfig+0x16cc>)
 80082ee:	f04f 0400 	mov.w	r4, #0
 80082f2:	e02a      	b.n	800834a <UART_SetConfig+0x142a>
 80082f4:	4bbe      	ldr	r3, [pc, #760]	; (80085f0 <UART_SetConfig+0x16d0>)
 80082f6:	f04f 0400 	mov.w	r4, #0
 80082fa:	e026      	b.n	800834a <UART_SetConfig+0x142a>
 80082fc:	4bbd      	ldr	r3, [pc, #756]	; (80085f4 <UART_SetConfig+0x16d4>)
 80082fe:	f04f 0400 	mov.w	r4, #0
 8008302:	e022      	b.n	800834a <UART_SetConfig+0x142a>
 8008304:	4bbc      	ldr	r3, [pc, #752]	; (80085f8 <UART_SetConfig+0x16d8>)
 8008306:	f04f 0400 	mov.w	r4, #0
 800830a:	e01e      	b.n	800834a <UART_SetConfig+0x142a>
 800830c:	4bbb      	ldr	r3, [pc, #748]	; (80085fc <UART_SetConfig+0x16dc>)
 800830e:	f04f 0400 	mov.w	r4, #0
 8008312:	e01a      	b.n	800834a <UART_SetConfig+0x142a>
 8008314:	a4b0      	add	r4, pc, #704	; (adr r4, 80085d8 <UART_SetConfig+0x16b8>)
 8008316:	e9d4 3400 	ldrd	r3, r4, [r4]
 800831a:	e016      	b.n	800834a <UART_SetConfig+0x142a>
 800831c:	4bb8      	ldr	r3, [pc, #736]	; (8008600 <UART_SetConfig+0x16e0>)
 800831e:	f04f 0400 	mov.w	r4, #0
 8008322:	e012      	b.n	800834a <UART_SetConfig+0x142a>
 8008324:	4bb7      	ldr	r3, [pc, #732]	; (8008604 <UART_SetConfig+0x16e4>)
 8008326:	f04f 0400 	mov.w	r4, #0
 800832a:	e00e      	b.n	800834a <UART_SetConfig+0x142a>
 800832c:	a4ac      	add	r4, pc, #688	; (adr r4, 80085e0 <UART_SetConfig+0x16c0>)
 800832e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008332:	e00a      	b.n	800834a <UART_SetConfig+0x142a>
 8008334:	4bb4      	ldr	r3, [pc, #720]	; (8008608 <UART_SetConfig+0x16e8>)
 8008336:	f04f 0400 	mov.w	r4, #0
 800833a:	e006      	b.n	800834a <UART_SetConfig+0x142a>
 800833c:	4bb3      	ldr	r3, [pc, #716]	; (800860c <UART_SetConfig+0x16ec>)
 800833e:	f04f 0400 	mov.w	r4, #0
 8008342:	e002      	b.n	800834a <UART_SetConfig+0x142a>
 8008344:	4ba9      	ldr	r3, [pc, #676]	; (80085ec <UART_SetConfig+0x16cc>)
 8008346:	f04f 0400 	mov.w	r4, #0
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	6852      	ldr	r2, [r2, #4]
 800834e:	0852      	lsrs	r2, r2, #1
 8008350:	4611      	mov	r1, r2
 8008352:	f04f 0200 	mov.w	r2, #0
 8008356:	eb13 0b01 	adds.w	fp, r3, r1
 800835a:	eb44 0c02 	adc.w	ip, r4, r2
 800835e:	4658      	mov	r0, fp
 8008360:	4661      	mov	r1, ip
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f04f 0400 	mov.w	r4, #0
 800836a:	461a      	mov	r2, r3
 800836c:	4623      	mov	r3, r4
 800836e:	f7f7 ffb3 	bl	80002d8 <__aeabi_uldivmod>
 8008372:	4603      	mov	r3, r0
 8008374:	460c      	mov	r4, r1
 8008376:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008378:	e088      	b.n	800848c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	2b00      	cmp	r3, #0
 8008380:	d064      	beq.n	800844c <UART_SetConfig+0x152c>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	2b01      	cmp	r3, #1
 8008388:	d05b      	beq.n	8008442 <UART_SetConfig+0x1522>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	2b02      	cmp	r3, #2
 8008390:	d052      	beq.n	8008438 <UART_SetConfig+0x1518>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008396:	2b03      	cmp	r3, #3
 8008398:	d04a      	beq.n	8008430 <UART_SetConfig+0x1510>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d041      	beq.n	8008426 <UART_SetConfig+0x1506>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	2b05      	cmp	r3, #5
 80083a8:	d039      	beq.n	800841e <UART_SetConfig+0x14fe>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	2b06      	cmp	r3, #6
 80083b0:	d031      	beq.n	8008416 <UART_SetConfig+0x14f6>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	2b07      	cmp	r3, #7
 80083b8:	d028      	beq.n	800840c <UART_SetConfig+0x14ec>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	2b08      	cmp	r3, #8
 80083c0:	d01f      	beq.n	8008402 <UART_SetConfig+0x14e2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	2b09      	cmp	r3, #9
 80083c8:	d016      	beq.n	80083f8 <UART_SetConfig+0x14d8>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	2b0a      	cmp	r3, #10
 80083d0:	d00d      	beq.n	80083ee <UART_SetConfig+0x14ce>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	2b0b      	cmp	r3, #11
 80083d8:	d104      	bne.n	80083e4 <UART_SetConfig+0x14c4>
 80083da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083de:	f04f 0400 	mov.w	r4, #0
 80083e2:	e037      	b.n	8008454 <UART_SetConfig+0x1534>
 80083e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80083e8:	f04f 0400 	mov.w	r4, #0
 80083ec:	e032      	b.n	8008454 <UART_SetConfig+0x1534>
 80083ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083f2:	f04f 0400 	mov.w	r4, #0
 80083f6:	e02d      	b.n	8008454 <UART_SetConfig+0x1534>
 80083f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083fc:	f04f 0400 	mov.w	r4, #0
 8008400:	e028      	b.n	8008454 <UART_SetConfig+0x1534>
 8008402:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008406:	f04f 0400 	mov.w	r4, #0
 800840a:	e023      	b.n	8008454 <UART_SetConfig+0x1534>
 800840c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008410:	f04f 0400 	mov.w	r4, #0
 8008414:	e01e      	b.n	8008454 <UART_SetConfig+0x1534>
 8008416:	4b7e      	ldr	r3, [pc, #504]	; (8008610 <UART_SetConfig+0x16f0>)
 8008418:	f04f 0400 	mov.w	r4, #0
 800841c:	e01a      	b.n	8008454 <UART_SetConfig+0x1534>
 800841e:	4b7d      	ldr	r3, [pc, #500]	; (8008614 <UART_SetConfig+0x16f4>)
 8008420:	f04f 0400 	mov.w	r4, #0
 8008424:	e016      	b.n	8008454 <UART_SetConfig+0x1534>
 8008426:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800842a:	f04f 0400 	mov.w	r4, #0
 800842e:	e011      	b.n	8008454 <UART_SetConfig+0x1534>
 8008430:	4b79      	ldr	r3, [pc, #484]	; (8008618 <UART_SetConfig+0x16f8>)
 8008432:	f04f 0400 	mov.w	r4, #0
 8008436:	e00d      	b.n	8008454 <UART_SetConfig+0x1534>
 8008438:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800843c:	f04f 0400 	mov.w	r4, #0
 8008440:	e008      	b.n	8008454 <UART_SetConfig+0x1534>
 8008442:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008446:	f04f 0400 	mov.w	r4, #0
 800844a:	e003      	b.n	8008454 <UART_SetConfig+0x1534>
 800844c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008450:	f04f 0400 	mov.w	r4, #0
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	6852      	ldr	r2, [r2, #4]
 8008458:	0852      	lsrs	r2, r2, #1
 800845a:	4611      	mov	r1, r2
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	eb13 0b01 	adds.w	fp, r3, r1
 8008464:	eb44 0c02 	adc.w	ip, r4, r2
 8008468:	4658      	mov	r0, fp
 800846a:	4661      	mov	r1, ip
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f04f 0400 	mov.w	r4, #0
 8008474:	461a      	mov	r2, r3
 8008476:	4623      	mov	r3, r4
 8008478:	f7f7 ff2e 	bl	80002d8 <__aeabi_uldivmod>
 800847c:	4603      	mov	r3, r0
 800847e:	460c      	mov	r4, r1
 8008480:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008482:	e003      	b.n	800848c <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800848a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800848c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008492:	d309      	bcc.n	80084a8 <UART_SetConfig+0x1588>
 8008494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800849a:	d205      	bcs.n	80084a8 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084a2:	60da      	str	r2, [r3, #12]
 80084a4:	f000 bf85 	b.w	80093b2 <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ae:	f000 bf80 	b.w	80093b2 <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ba:	f040 83da 	bne.w	8008c72 <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 80084be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	f200 83b3 	bhi.w	8008c2e <UART_SetConfig+0x1d0e>
 80084c8:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <UART_SetConfig+0x15b0>)
 80084ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	0800861d 	.word	0x0800861d
 80084d4:	080086d5 	.word	0x080086d5
 80084d8:	08008c2f 	.word	0x08008c2f
 80084dc:	08008c2f 	.word	0x08008c2f
 80084e0:	0800878d 	.word	0x0800878d
 80084e4:	08008c2f 	.word	0x08008c2f
 80084e8:	08008c2f 	.word	0x08008c2f
 80084ec:	08008c2f 	.word	0x08008c2f
 80084f0:	08008849 	.word	0x08008849
 80084f4:	08008c2f 	.word	0x08008c2f
 80084f8:	08008c2f 	.word	0x08008c2f
 80084fc:	08008c2f 	.word	0x08008c2f
 8008500:	08008c2f 	.word	0x08008c2f
 8008504:	08008c2f 	.word	0x08008c2f
 8008508:	08008c2f 	.word	0x08008c2f
 800850c:	08008c2f 	.word	0x08008c2f
 8008510:	08008905 	.word	0x08008905
 8008514:	08008c2f 	.word	0x08008c2f
 8008518:	08008c2f 	.word	0x08008c2f
 800851c:	08008c2f 	.word	0x08008c2f
 8008520:	08008c2f 	.word	0x08008c2f
 8008524:	08008c2f 	.word	0x08008c2f
 8008528:	08008c2f 	.word	0x08008c2f
 800852c:	08008c2f 	.word	0x08008c2f
 8008530:	08008c2f 	.word	0x08008c2f
 8008534:	08008c2f 	.word	0x08008c2f
 8008538:	08008c2f 	.word	0x08008c2f
 800853c:	08008c2f 	.word	0x08008c2f
 8008540:	08008c2f 	.word	0x08008c2f
 8008544:	08008c2f 	.word	0x08008c2f
 8008548:	08008c2f 	.word	0x08008c2f
 800854c:	08008c2f 	.word	0x08008c2f
 8008550:	08008a77 	.word	0x08008a77
 8008554:	08008c2f 	.word	0x08008c2f
 8008558:	08008c2f 	.word	0x08008c2f
 800855c:	08008c2f 	.word	0x08008c2f
 8008560:	08008c2f 	.word	0x08008c2f
 8008564:	08008c2f 	.word	0x08008c2f
 8008568:	08008c2f 	.word	0x08008c2f
 800856c:	08008c2f 	.word	0x08008c2f
 8008570:	08008c2f 	.word	0x08008c2f
 8008574:	08008c2f 	.word	0x08008c2f
 8008578:	08008c2f 	.word	0x08008c2f
 800857c:	08008c2f 	.word	0x08008c2f
 8008580:	08008c2f 	.word	0x08008c2f
 8008584:	08008c2f 	.word	0x08008c2f
 8008588:	08008c2f 	.word	0x08008c2f
 800858c:	08008c2f 	.word	0x08008c2f
 8008590:	08008c2f 	.word	0x08008c2f
 8008594:	08008c2f 	.word	0x08008c2f
 8008598:	08008c2f 	.word	0x08008c2f
 800859c:	08008c2f 	.word	0x08008c2f
 80085a0:	08008c2f 	.word	0x08008c2f
 80085a4:	08008c2f 	.word	0x08008c2f
 80085a8:	08008c2f 	.word	0x08008c2f
 80085ac:	08008c2f 	.word	0x08008c2f
 80085b0:	08008c2f 	.word	0x08008c2f
 80085b4:	08008c2f 	.word	0x08008c2f
 80085b8:	08008c2f 	.word	0x08008c2f
 80085bc:	08008c2f 	.word	0x08008c2f
 80085c0:	08008c2f 	.word	0x08008c2f
 80085c4:	08008c2f 	.word	0x08008c2f
 80085c8:	08008c2f 	.word	0x08008c2f
 80085cc:	08008c2f 	.word	0x08008c2f
 80085d0:	08008b6d 	.word	0x08008b6d
 80085d4:	f3af 8000 	nop.w
 80085d8:	05161500 	.word	0x05161500
 80085dc:	00000000 	.word	0x00000000
 80085e0:	0a2c2a00 	.word	0x0a2c2a00
 80085e4:	00000000 	.word	0x00000000
 80085e8:	003d0900 	.word	0x003d0900
 80085ec:	3d090000 	.word	0x3d090000
 80085f0:	007a1200 	.word	0x007a1200
 80085f4:	00f42400 	.word	0x00f42400
 80085f8:	01e84800 	.word	0x01e84800
 80085fc:	03d09000 	.word	0x03d09000
 8008600:	061a8000 	.word	0x061a8000
 8008604:	07a12000 	.word	0x07a12000
 8008608:	0f424000 	.word	0x0f424000
 800860c:	1e848000 	.word	0x1e848000
 8008610:	000aaa00 	.word	0x000aaa00
 8008614:	000ccc00 	.word	0x000ccc00
 8008618:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800861c:	f7fc fd10 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 8008620:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008626:	2b00      	cmp	r3, #0
 8008628:	d044      	beq.n	80086b4 <UART_SetConfig+0x1794>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	2b01      	cmp	r3, #1
 8008630:	d03e      	beq.n	80086b0 <UART_SetConfig+0x1790>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	2b02      	cmp	r3, #2
 8008638:	d038      	beq.n	80086ac <UART_SetConfig+0x178c>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	2b03      	cmp	r3, #3
 8008640:	d032      	beq.n	80086a8 <UART_SetConfig+0x1788>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	2b04      	cmp	r3, #4
 8008648:	d02c      	beq.n	80086a4 <UART_SetConfig+0x1784>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	2b05      	cmp	r3, #5
 8008650:	d026      	beq.n	80086a0 <UART_SetConfig+0x1780>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	2b06      	cmp	r3, #6
 8008658:	d020      	beq.n	800869c <UART_SetConfig+0x177c>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	2b07      	cmp	r3, #7
 8008660:	d01a      	beq.n	8008698 <UART_SetConfig+0x1778>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	2b08      	cmp	r3, #8
 8008668:	d014      	beq.n	8008694 <UART_SetConfig+0x1774>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	2b09      	cmp	r3, #9
 8008670:	d00e      	beq.n	8008690 <UART_SetConfig+0x1770>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	2b0a      	cmp	r3, #10
 8008678:	d008      	beq.n	800868c <UART_SetConfig+0x176c>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	2b0b      	cmp	r3, #11
 8008680:	d102      	bne.n	8008688 <UART_SetConfig+0x1768>
 8008682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008686:	e016      	b.n	80086b6 <UART_SetConfig+0x1796>
 8008688:	2301      	movs	r3, #1
 800868a:	e014      	b.n	80086b6 <UART_SetConfig+0x1796>
 800868c:	2380      	movs	r3, #128	; 0x80
 800868e:	e012      	b.n	80086b6 <UART_SetConfig+0x1796>
 8008690:	2340      	movs	r3, #64	; 0x40
 8008692:	e010      	b.n	80086b6 <UART_SetConfig+0x1796>
 8008694:	2320      	movs	r3, #32
 8008696:	e00e      	b.n	80086b6 <UART_SetConfig+0x1796>
 8008698:	2310      	movs	r3, #16
 800869a:	e00c      	b.n	80086b6 <UART_SetConfig+0x1796>
 800869c:	230c      	movs	r3, #12
 800869e:	e00a      	b.n	80086b6 <UART_SetConfig+0x1796>
 80086a0:	230a      	movs	r3, #10
 80086a2:	e008      	b.n	80086b6 <UART_SetConfig+0x1796>
 80086a4:	2308      	movs	r3, #8
 80086a6:	e006      	b.n	80086b6 <UART_SetConfig+0x1796>
 80086a8:	2306      	movs	r3, #6
 80086aa:	e004      	b.n	80086b6 <UART_SetConfig+0x1796>
 80086ac:	2304      	movs	r3, #4
 80086ae:	e002      	b.n	80086b6 <UART_SetConfig+0x1796>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e000      	b.n	80086b6 <UART_SetConfig+0x1796>
 80086b4:	2301      	movs	r3, #1
 80086b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086bc:	005a      	lsls	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	085b      	lsrs	r3, r3, #1
 80086c4:	441a      	add	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086d2:	e2b0      	b.n	8008c36 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086d4:	f7fc fcca 	bl	800506c <HAL_RCC_GetPCLK2Freq>
 80086d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d044      	beq.n	800876c <UART_SetConfig+0x184c>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d03e      	beq.n	8008768 <UART_SetConfig+0x1848>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d038      	beq.n	8008764 <UART_SetConfig+0x1844>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d032      	beq.n	8008760 <UART_SetConfig+0x1840>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	2b04      	cmp	r3, #4
 8008700:	d02c      	beq.n	800875c <UART_SetConfig+0x183c>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	2b05      	cmp	r3, #5
 8008708:	d026      	beq.n	8008758 <UART_SetConfig+0x1838>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	2b06      	cmp	r3, #6
 8008710:	d020      	beq.n	8008754 <UART_SetConfig+0x1834>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	2b07      	cmp	r3, #7
 8008718:	d01a      	beq.n	8008750 <UART_SetConfig+0x1830>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	2b08      	cmp	r3, #8
 8008720:	d014      	beq.n	800874c <UART_SetConfig+0x182c>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	2b09      	cmp	r3, #9
 8008728:	d00e      	beq.n	8008748 <UART_SetConfig+0x1828>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	2b0a      	cmp	r3, #10
 8008730:	d008      	beq.n	8008744 <UART_SetConfig+0x1824>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	2b0b      	cmp	r3, #11
 8008738:	d102      	bne.n	8008740 <UART_SetConfig+0x1820>
 800873a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800873e:	e016      	b.n	800876e <UART_SetConfig+0x184e>
 8008740:	2301      	movs	r3, #1
 8008742:	e014      	b.n	800876e <UART_SetConfig+0x184e>
 8008744:	2380      	movs	r3, #128	; 0x80
 8008746:	e012      	b.n	800876e <UART_SetConfig+0x184e>
 8008748:	2340      	movs	r3, #64	; 0x40
 800874a:	e010      	b.n	800876e <UART_SetConfig+0x184e>
 800874c:	2320      	movs	r3, #32
 800874e:	e00e      	b.n	800876e <UART_SetConfig+0x184e>
 8008750:	2310      	movs	r3, #16
 8008752:	e00c      	b.n	800876e <UART_SetConfig+0x184e>
 8008754:	230c      	movs	r3, #12
 8008756:	e00a      	b.n	800876e <UART_SetConfig+0x184e>
 8008758:	230a      	movs	r3, #10
 800875a:	e008      	b.n	800876e <UART_SetConfig+0x184e>
 800875c:	2308      	movs	r3, #8
 800875e:	e006      	b.n	800876e <UART_SetConfig+0x184e>
 8008760:	2306      	movs	r3, #6
 8008762:	e004      	b.n	800876e <UART_SetConfig+0x184e>
 8008764:	2304      	movs	r3, #4
 8008766:	e002      	b.n	800876e <UART_SetConfig+0x184e>
 8008768:	2302      	movs	r3, #2
 800876a:	e000      	b.n	800876e <UART_SetConfig+0x184e>
 800876c:	2301      	movs	r3, #1
 800876e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008770:	fbb2 f3f3 	udiv	r3, r2, r3
 8008774:	005a      	lsls	r2, r3, #1
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	441a      	add	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	fbb2 f3f3 	udiv	r3, r2, r3
 8008786:	b29b      	uxth	r3, r3
 8008788:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800878a:	e254      	b.n	8008c36 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800878c:	f107 0318 	add.w	r3, r7, #24
 8008790:	4618      	mov	r0, r3
 8008792:	f7fd fe17 	bl	80063c4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	d044      	beq.n	800882a <UART_SetConfig+0x190a>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d03e      	beq.n	8008826 <UART_SetConfig+0x1906>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d038      	beq.n	8008822 <UART_SetConfig+0x1902>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d032      	beq.n	800881e <UART_SetConfig+0x18fe>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d02c      	beq.n	800881a <UART_SetConfig+0x18fa>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2b05      	cmp	r3, #5
 80087c6:	d026      	beq.n	8008816 <UART_SetConfig+0x18f6>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	2b06      	cmp	r3, #6
 80087ce:	d020      	beq.n	8008812 <UART_SetConfig+0x18f2>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	2b07      	cmp	r3, #7
 80087d6:	d01a      	beq.n	800880e <UART_SetConfig+0x18ee>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	2b08      	cmp	r3, #8
 80087de:	d014      	beq.n	800880a <UART_SetConfig+0x18ea>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	2b09      	cmp	r3, #9
 80087e6:	d00e      	beq.n	8008806 <UART_SetConfig+0x18e6>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	2b0a      	cmp	r3, #10
 80087ee:	d008      	beq.n	8008802 <UART_SetConfig+0x18e2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	2b0b      	cmp	r3, #11
 80087f6:	d102      	bne.n	80087fe <UART_SetConfig+0x18de>
 80087f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087fc:	e016      	b.n	800882c <UART_SetConfig+0x190c>
 80087fe:	2301      	movs	r3, #1
 8008800:	e014      	b.n	800882c <UART_SetConfig+0x190c>
 8008802:	2380      	movs	r3, #128	; 0x80
 8008804:	e012      	b.n	800882c <UART_SetConfig+0x190c>
 8008806:	2340      	movs	r3, #64	; 0x40
 8008808:	e010      	b.n	800882c <UART_SetConfig+0x190c>
 800880a:	2320      	movs	r3, #32
 800880c:	e00e      	b.n	800882c <UART_SetConfig+0x190c>
 800880e:	2310      	movs	r3, #16
 8008810:	e00c      	b.n	800882c <UART_SetConfig+0x190c>
 8008812:	230c      	movs	r3, #12
 8008814:	e00a      	b.n	800882c <UART_SetConfig+0x190c>
 8008816:	230a      	movs	r3, #10
 8008818:	e008      	b.n	800882c <UART_SetConfig+0x190c>
 800881a:	2308      	movs	r3, #8
 800881c:	e006      	b.n	800882c <UART_SetConfig+0x190c>
 800881e:	2306      	movs	r3, #6
 8008820:	e004      	b.n	800882c <UART_SetConfig+0x190c>
 8008822:	2304      	movs	r3, #4
 8008824:	e002      	b.n	800882c <UART_SetConfig+0x190c>
 8008826:	2302      	movs	r3, #2
 8008828:	e000      	b.n	800882c <UART_SetConfig+0x190c>
 800882a:	2301      	movs	r3, #1
 800882c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008830:	005a      	lsls	r2, r3, #1
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	085b      	lsrs	r3, r3, #1
 8008838:	441a      	add	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008842:	b29b      	uxth	r3, r3
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008846:	e1f6      	b.n	8008c36 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008848:	f107 030c 	add.w	r3, r7, #12
 800884c:	4618      	mov	r0, r3
 800884e:	f7fd ff05 	bl	800665c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b00      	cmp	r3, #0
 800885a:	d044      	beq.n	80088e6 <UART_SetConfig+0x19c6>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2b01      	cmp	r3, #1
 8008862:	d03e      	beq.n	80088e2 <UART_SetConfig+0x19c2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	2b02      	cmp	r3, #2
 800886a:	d038      	beq.n	80088de <UART_SetConfig+0x19be>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b03      	cmp	r3, #3
 8008872:	d032      	beq.n	80088da <UART_SetConfig+0x19ba>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2b04      	cmp	r3, #4
 800887a:	d02c      	beq.n	80088d6 <UART_SetConfig+0x19b6>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	2b05      	cmp	r3, #5
 8008882:	d026      	beq.n	80088d2 <UART_SetConfig+0x19b2>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2b06      	cmp	r3, #6
 800888a:	d020      	beq.n	80088ce <UART_SetConfig+0x19ae>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	2b07      	cmp	r3, #7
 8008892:	d01a      	beq.n	80088ca <UART_SetConfig+0x19aa>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b08      	cmp	r3, #8
 800889a:	d014      	beq.n	80088c6 <UART_SetConfig+0x19a6>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	2b09      	cmp	r3, #9
 80088a2:	d00e      	beq.n	80088c2 <UART_SetConfig+0x19a2>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	2b0a      	cmp	r3, #10
 80088aa:	d008      	beq.n	80088be <UART_SetConfig+0x199e>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	2b0b      	cmp	r3, #11
 80088b2:	d102      	bne.n	80088ba <UART_SetConfig+0x199a>
 80088b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088b8:	e016      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088ba:	2301      	movs	r3, #1
 80088bc:	e014      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088be:	2380      	movs	r3, #128	; 0x80
 80088c0:	e012      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088c2:	2340      	movs	r3, #64	; 0x40
 80088c4:	e010      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088c6:	2320      	movs	r3, #32
 80088c8:	e00e      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088ca:	2310      	movs	r3, #16
 80088cc:	e00c      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088ce:	230c      	movs	r3, #12
 80088d0:	e00a      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088d2:	230a      	movs	r3, #10
 80088d4:	e008      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088d6:	2308      	movs	r3, #8
 80088d8:	e006      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088da:	2306      	movs	r3, #6
 80088dc:	e004      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088de:	2304      	movs	r3, #4
 80088e0:	e002      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088e2:	2302      	movs	r3, #2
 80088e4:	e000      	b.n	80088e8 <UART_SetConfig+0x19c8>
 80088e6:	2301      	movs	r3, #1
 80088e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ec:	005a      	lsls	r2, r3, #1
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	085b      	lsrs	r3, r3, #1
 80088f4:	441a      	add	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fe:	b29b      	uxth	r3, r3
 8008900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008902:	e198      	b.n	8008c36 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008904:	4b87      	ldr	r3, [pc, #540]	; (8008b24 <UART_SetConfig+0x1c04>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0320 	and.w	r3, r3, #32
 800890c:	2b00      	cmp	r3, #0
 800890e:	d05e      	beq.n	80089ce <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008910:	4b84      	ldr	r3, [pc, #528]	; (8008b24 <UART_SetConfig+0x1c04>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	08db      	lsrs	r3, r3, #3
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	4a83      	ldr	r2, [pc, #524]	; (8008b28 <UART_SetConfig+0x1c08>)
 800891c:	40da      	lsrs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	d044      	beq.n	80089b0 <UART_SetConfig+0x1a90>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892a:	2b01      	cmp	r3, #1
 800892c:	d03e      	beq.n	80089ac <UART_SetConfig+0x1a8c>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	2b02      	cmp	r3, #2
 8008934:	d038      	beq.n	80089a8 <UART_SetConfig+0x1a88>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893a:	2b03      	cmp	r3, #3
 800893c:	d032      	beq.n	80089a4 <UART_SetConfig+0x1a84>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	2b04      	cmp	r3, #4
 8008944:	d02c      	beq.n	80089a0 <UART_SetConfig+0x1a80>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	2b05      	cmp	r3, #5
 800894c:	d026      	beq.n	800899c <UART_SetConfig+0x1a7c>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	2b06      	cmp	r3, #6
 8008954:	d020      	beq.n	8008998 <UART_SetConfig+0x1a78>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	2b07      	cmp	r3, #7
 800895c:	d01a      	beq.n	8008994 <UART_SetConfig+0x1a74>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	2b08      	cmp	r3, #8
 8008964:	d014      	beq.n	8008990 <UART_SetConfig+0x1a70>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	2b09      	cmp	r3, #9
 800896c:	d00e      	beq.n	800898c <UART_SetConfig+0x1a6c>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	2b0a      	cmp	r3, #10
 8008974:	d008      	beq.n	8008988 <UART_SetConfig+0x1a68>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	2b0b      	cmp	r3, #11
 800897c:	d102      	bne.n	8008984 <UART_SetConfig+0x1a64>
 800897e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008982:	e016      	b.n	80089b2 <UART_SetConfig+0x1a92>
 8008984:	2301      	movs	r3, #1
 8008986:	e014      	b.n	80089b2 <UART_SetConfig+0x1a92>
 8008988:	2380      	movs	r3, #128	; 0x80
 800898a:	e012      	b.n	80089b2 <UART_SetConfig+0x1a92>
 800898c:	2340      	movs	r3, #64	; 0x40
 800898e:	e010      	b.n	80089b2 <UART_SetConfig+0x1a92>
 8008990:	2320      	movs	r3, #32
 8008992:	e00e      	b.n	80089b2 <UART_SetConfig+0x1a92>
 8008994:	2310      	movs	r3, #16
 8008996:	e00c      	b.n	80089b2 <UART_SetConfig+0x1a92>
 8008998:	230c      	movs	r3, #12
 800899a:	e00a      	b.n	80089b2 <UART_SetConfig+0x1a92>
 800899c:	230a      	movs	r3, #10
 800899e:	e008      	b.n	80089b2 <UART_SetConfig+0x1a92>
 80089a0:	2308      	movs	r3, #8
 80089a2:	e006      	b.n	80089b2 <UART_SetConfig+0x1a92>
 80089a4:	2306      	movs	r3, #6
 80089a6:	e004      	b.n	80089b2 <UART_SetConfig+0x1a92>
 80089a8:	2304      	movs	r3, #4
 80089aa:	e002      	b.n	80089b2 <UART_SetConfig+0x1a92>
 80089ac:	2302      	movs	r3, #2
 80089ae:	e000      	b.n	80089b2 <UART_SetConfig+0x1a92>
 80089b0:	2301      	movs	r3, #1
 80089b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b6:	005a      	lsls	r2, r3, #1
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	085b      	lsrs	r3, r3, #1
 80089be:	441a      	add	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80089cc:	e133      	b.n	8008c36 <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d043      	beq.n	8008a5e <UART_SetConfig+0x1b3e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d03d      	beq.n	8008a5a <UART_SetConfig+0x1b3a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d037      	beq.n	8008a56 <UART_SetConfig+0x1b36>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d031      	beq.n	8008a52 <UART_SetConfig+0x1b32>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d02b      	beq.n	8008a4e <UART_SetConfig+0x1b2e>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	2b05      	cmp	r3, #5
 80089fc:	d025      	beq.n	8008a4a <UART_SetConfig+0x1b2a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	2b06      	cmp	r3, #6
 8008a04:	d01f      	beq.n	8008a46 <UART_SetConfig+0x1b26>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	2b07      	cmp	r3, #7
 8008a0c:	d019      	beq.n	8008a42 <UART_SetConfig+0x1b22>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	2b08      	cmp	r3, #8
 8008a14:	d013      	beq.n	8008a3e <UART_SetConfig+0x1b1e>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	2b09      	cmp	r3, #9
 8008a1c:	d00d      	beq.n	8008a3a <UART_SetConfig+0x1b1a>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	2b0a      	cmp	r3, #10
 8008a24:	d007      	beq.n	8008a36 <UART_SetConfig+0x1b16>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	2b0b      	cmp	r3, #11
 8008a2c:	d101      	bne.n	8008a32 <UART_SetConfig+0x1b12>
 8008a2e:	4b3f      	ldr	r3, [pc, #252]	; (8008b2c <UART_SetConfig+0x1c0c>)
 8008a30:	e016      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a32:	4b3f      	ldr	r3, [pc, #252]	; (8008b30 <UART_SetConfig+0x1c10>)
 8008a34:	e014      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a36:	4b3f      	ldr	r3, [pc, #252]	; (8008b34 <UART_SetConfig+0x1c14>)
 8008a38:	e012      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a3a:	4b3f      	ldr	r3, [pc, #252]	; (8008b38 <UART_SetConfig+0x1c18>)
 8008a3c:	e010      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a3e:	4b3f      	ldr	r3, [pc, #252]	; (8008b3c <UART_SetConfig+0x1c1c>)
 8008a40:	e00e      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a42:	4b3f      	ldr	r3, [pc, #252]	; (8008b40 <UART_SetConfig+0x1c20>)
 8008a44:	e00c      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a46:	4b3f      	ldr	r3, [pc, #252]	; (8008b44 <UART_SetConfig+0x1c24>)
 8008a48:	e00a      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a4a:	4b3f      	ldr	r3, [pc, #252]	; (8008b48 <UART_SetConfig+0x1c28>)
 8008a4c:	e008      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a4e:	4b3f      	ldr	r3, [pc, #252]	; (8008b4c <UART_SetConfig+0x1c2c>)
 8008a50:	e006      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a52:	4b3f      	ldr	r3, [pc, #252]	; (8008b50 <UART_SetConfig+0x1c30>)
 8008a54:	e004      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a56:	4b3f      	ldr	r3, [pc, #252]	; (8008b54 <UART_SetConfig+0x1c34>)
 8008a58:	e002      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a5a:	4b33      	ldr	r3, [pc, #204]	; (8008b28 <UART_SetConfig+0x1c08>)
 8008a5c:	e000      	b.n	8008a60 <UART_SetConfig+0x1b40>
 8008a5e:	4b34      	ldr	r3, [pc, #208]	; (8008b30 <UART_SetConfig+0x1c10>)
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	6852      	ldr	r2, [r2, #4]
 8008a64:	0852      	lsrs	r2, r2, #1
 8008a66:	441a      	add	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a74:	e0df      	b.n	8008c36 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d045      	beq.n	8008b0a <UART_SetConfig+0x1bea>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d03f      	beq.n	8008b06 <UART_SetConfig+0x1be6>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d039      	beq.n	8008b02 <UART_SetConfig+0x1be2>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d033      	beq.n	8008afe <UART_SetConfig+0x1bde>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d02d      	beq.n	8008afa <UART_SetConfig+0x1bda>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa2:	2b05      	cmp	r3, #5
 8008aa4:	d027      	beq.n	8008af6 <UART_SetConfig+0x1bd6>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	2b06      	cmp	r3, #6
 8008aac:	d021      	beq.n	8008af2 <UART_SetConfig+0x1bd2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	2b07      	cmp	r3, #7
 8008ab4:	d01b      	beq.n	8008aee <UART_SetConfig+0x1bce>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	2b08      	cmp	r3, #8
 8008abc:	d015      	beq.n	8008aea <UART_SetConfig+0x1bca>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	2b09      	cmp	r3, #9
 8008ac4:	d00f      	beq.n	8008ae6 <UART_SetConfig+0x1bc6>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	2b0a      	cmp	r3, #10
 8008acc:	d008      	beq.n	8008ae0 <UART_SetConfig+0x1bc0>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad2:	2b0b      	cmp	r3, #11
 8008ad4:	d102      	bne.n	8008adc <UART_SetConfig+0x1bbc>
 8008ad6:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008ada:	e017      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008adc:	4b18      	ldr	r3, [pc, #96]	; (8008b40 <UART_SetConfig+0x1c20>)
 8008ade:	e015      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008ae0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008ae4:	e012      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008ae6:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <UART_SetConfig+0x1c38>)
 8008ae8:	e010      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008aea:	4b1c      	ldr	r3, [pc, #112]	; (8008b5c <UART_SetConfig+0x1c3c>)
 8008aec:	e00e      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008aee:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <UART_SetConfig+0x1c0c>)
 8008af0:	e00c      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008af2:	4b1b      	ldr	r3, [pc, #108]	; (8008b60 <UART_SetConfig+0x1c40>)
 8008af4:	e00a      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008af6:	4b1b      	ldr	r3, [pc, #108]	; (8008b64 <UART_SetConfig+0x1c44>)
 8008af8:	e008      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008afa:	4b0e      	ldr	r3, [pc, #56]	; (8008b34 <UART_SetConfig+0x1c14>)
 8008afc:	e006      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008afe:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <UART_SetConfig+0x1c48>)
 8008b00:	e004      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008b02:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <UART_SetConfig+0x1c18>)
 8008b04:	e002      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008b06:	4b0d      	ldr	r3, [pc, #52]	; (8008b3c <UART_SetConfig+0x1c1c>)
 8008b08:	e000      	b.n	8008b0c <UART_SetConfig+0x1bec>
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <UART_SetConfig+0x1c20>)
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6852      	ldr	r2, [r2, #4]
 8008b10:	0852      	lsrs	r2, r2, #1
 8008b12:	441a      	add	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b20:	e089      	b.n	8008c36 <UART_SetConfig+0x1d16>
 8008b22:	bf00      	nop
 8008b24:	58024400 	.word	0x58024400
 8008b28:	03d09000 	.word	0x03d09000
 8008b2c:	0007a120 	.word	0x0007a120
 8008b30:	07a12000 	.word	0x07a12000
 8008b34:	000f4240 	.word	0x000f4240
 8008b38:	001e8480 	.word	0x001e8480
 8008b3c:	003d0900 	.word	0x003d0900
 8008b40:	007a1200 	.word	0x007a1200
 8008b44:	00a2c2aa 	.word	0x00a2c2aa
 8008b48:	00c35000 	.word	0x00c35000
 8008b4c:	00f42400 	.word	0x00f42400
 8008b50:	01458554 	.word	0x01458554
 8008b54:	01e84800 	.word	0x01e84800
 8008b58:	0001e848 	.word	0x0001e848
 8008b5c:	0003d090 	.word	0x0003d090
 8008b60:	000a2c2a 	.word	0x000a2c2a
 8008b64:	000c3500 	.word	0x000c3500
 8008b68:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d04f      	beq.n	8008c14 <UART_SetConfig+0x1cf4>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d048      	beq.n	8008c0e <UART_SetConfig+0x1cee>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d041      	beq.n	8008c08 <UART_SetConfig+0x1ce8>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d03a      	beq.n	8008c02 <UART_SetConfig+0x1ce2>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d033      	beq.n	8008bfc <UART_SetConfig+0x1cdc>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	2b05      	cmp	r3, #5
 8008b9a:	d02c      	beq.n	8008bf6 <UART_SetConfig+0x1cd6>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	2b06      	cmp	r3, #6
 8008ba2:	d025      	beq.n	8008bf0 <UART_SetConfig+0x1cd0>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b07      	cmp	r3, #7
 8008baa:	d01e      	beq.n	8008bea <UART_SetConfig+0x1cca>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	d017      	beq.n	8008be4 <UART_SetConfig+0x1cc4>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	2b09      	cmp	r3, #9
 8008bba:	d010      	beq.n	8008bde <UART_SetConfig+0x1cbe>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	2b0a      	cmp	r3, #10
 8008bc2:	d009      	beq.n	8008bd8 <UART_SetConfig+0x1cb8>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b0b      	cmp	r3, #11
 8008bca:	d102      	bne.n	8008bd2 <UART_SetConfig+0x1cb2>
 8008bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bd0:	e022      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bd6:	e01f      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bdc:	e01c      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008be2:	e019      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008be8:	e016      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bee:	e013      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008bf0:	f241 5354 	movw	r3, #5460	; 0x1554
 8008bf4:	e010      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008bf6:	f641 1398 	movw	r3, #6552	; 0x1998
 8008bfa:	e00d      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c00:	e00a      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008c02:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008c06:	e007      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008c08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c0c:	e004      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c12:	e001      	b.n	8008c18 <UART_SetConfig+0x1cf8>
 8008c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6852      	ldr	r2, [r2, #4]
 8008c1c:	0852      	lsrs	r2, r2, #1
 8008c1e:	441a      	add	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c2c:	e003      	b.n	8008c36 <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008c34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	2b0f      	cmp	r3, #15
 8008c3a:	d916      	bls.n	8008c6a <UART_SetConfig+0x1d4a>
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c42:	d212      	bcs.n	8008c6a <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	f023 030f 	bic.w	r3, r3, #15
 8008c4c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c50:	085b      	lsrs	r3, r3, #1
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008c66:	60da      	str	r2, [r3, #12]
 8008c68:	e3a3      	b.n	80093b2 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c70:	e39f      	b.n	80093b2 <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 8008c72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008c76:	2b40      	cmp	r3, #64	; 0x40
 8008c78:	f200 8388 	bhi.w	800938c <UART_SetConfig+0x246c>
 8008c7c:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <UART_SetConfig+0x1d64>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008d89 	.word	0x08008d89
 8008c88:	08008e3f 	.word	0x08008e3f
 8008c8c:	0800938d 	.word	0x0800938d
 8008c90:	0800938d 	.word	0x0800938d
 8008c94:	08008ef5 	.word	0x08008ef5
 8008c98:	0800938d 	.word	0x0800938d
 8008c9c:	0800938d 	.word	0x0800938d
 8008ca0:	0800938d 	.word	0x0800938d
 8008ca4:	08008faf 	.word	0x08008faf
 8008ca8:	0800938d 	.word	0x0800938d
 8008cac:	0800938d 	.word	0x0800938d
 8008cb0:	0800938d 	.word	0x0800938d
 8008cb4:	0800938d 	.word	0x0800938d
 8008cb8:	0800938d 	.word	0x0800938d
 8008cbc:	0800938d 	.word	0x0800938d
 8008cc0:	0800938d 	.word	0x0800938d
 8008cc4:	08009069 	.word	0x08009069
 8008cc8:	0800938d 	.word	0x0800938d
 8008ccc:	0800938d 	.word	0x0800938d
 8008cd0:	0800938d 	.word	0x0800938d
 8008cd4:	0800938d 	.word	0x0800938d
 8008cd8:	0800938d 	.word	0x0800938d
 8008cdc:	0800938d 	.word	0x0800938d
 8008ce0:	0800938d 	.word	0x0800938d
 8008ce4:	0800938d 	.word	0x0800938d
 8008ce8:	0800938d 	.word	0x0800938d
 8008cec:	0800938d 	.word	0x0800938d
 8008cf0:	0800938d 	.word	0x0800938d
 8008cf4:	0800938d 	.word	0x0800938d
 8008cf8:	0800938d 	.word	0x0800938d
 8008cfc:	0800938d 	.word	0x0800938d
 8008d00:	0800938d 	.word	0x0800938d
 8008d04:	080091d9 	.word	0x080091d9
 8008d08:	0800938d 	.word	0x0800938d
 8008d0c:	0800938d 	.word	0x0800938d
 8008d10:	0800938d 	.word	0x0800938d
 8008d14:	0800938d 	.word	0x0800938d
 8008d18:	0800938d 	.word	0x0800938d
 8008d1c:	0800938d 	.word	0x0800938d
 8008d20:	0800938d 	.word	0x0800938d
 8008d24:	0800938d 	.word	0x0800938d
 8008d28:	0800938d 	.word	0x0800938d
 8008d2c:	0800938d 	.word	0x0800938d
 8008d30:	0800938d 	.word	0x0800938d
 8008d34:	0800938d 	.word	0x0800938d
 8008d38:	0800938d 	.word	0x0800938d
 8008d3c:	0800938d 	.word	0x0800938d
 8008d40:	0800938d 	.word	0x0800938d
 8008d44:	0800938d 	.word	0x0800938d
 8008d48:	0800938d 	.word	0x0800938d
 8008d4c:	0800938d 	.word	0x0800938d
 8008d50:	0800938d 	.word	0x0800938d
 8008d54:	0800938d 	.word	0x0800938d
 8008d58:	0800938d 	.word	0x0800938d
 8008d5c:	0800938d 	.word	0x0800938d
 8008d60:	0800938d 	.word	0x0800938d
 8008d64:	0800938d 	.word	0x0800938d
 8008d68:	0800938d 	.word	0x0800938d
 8008d6c:	0800938d 	.word	0x0800938d
 8008d70:	0800938d 	.word	0x0800938d
 8008d74:	0800938d 	.word	0x0800938d
 8008d78:	0800938d 	.word	0x0800938d
 8008d7c:	0800938d 	.word	0x0800938d
 8008d80:	0800938d 	.word	0x0800938d
 8008d84:	080092cd 	.word	0x080092cd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d88:	f7fc f95a 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 8008d8c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d044      	beq.n	8008e20 <UART_SetConfig+0x1f00>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d03e      	beq.n	8008e1c <UART_SetConfig+0x1efc>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d038      	beq.n	8008e18 <UART_SetConfig+0x1ef8>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d032      	beq.n	8008e14 <UART_SetConfig+0x1ef4>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	2b04      	cmp	r3, #4
 8008db4:	d02c      	beq.n	8008e10 <UART_SetConfig+0x1ef0>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dba:	2b05      	cmp	r3, #5
 8008dbc:	d026      	beq.n	8008e0c <UART_SetConfig+0x1eec>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	2b06      	cmp	r3, #6
 8008dc4:	d020      	beq.n	8008e08 <UART_SetConfig+0x1ee8>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	2b07      	cmp	r3, #7
 8008dcc:	d01a      	beq.n	8008e04 <UART_SetConfig+0x1ee4>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	2b08      	cmp	r3, #8
 8008dd4:	d014      	beq.n	8008e00 <UART_SetConfig+0x1ee0>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	2b09      	cmp	r3, #9
 8008ddc:	d00e      	beq.n	8008dfc <UART_SetConfig+0x1edc>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	2b0a      	cmp	r3, #10
 8008de4:	d008      	beq.n	8008df8 <UART_SetConfig+0x1ed8>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	2b0b      	cmp	r3, #11
 8008dec:	d102      	bne.n	8008df4 <UART_SetConfig+0x1ed4>
 8008dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df2:	e016      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e014      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008df8:	2380      	movs	r3, #128	; 0x80
 8008dfa:	e012      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008dfc:	2340      	movs	r3, #64	; 0x40
 8008dfe:	e010      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008e00:	2320      	movs	r3, #32
 8008e02:	e00e      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008e04:	2310      	movs	r3, #16
 8008e06:	e00c      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008e08:	230c      	movs	r3, #12
 8008e0a:	e00a      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008e0c:	230a      	movs	r3, #10
 8008e0e:	e008      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008e10:	2308      	movs	r3, #8
 8008e12:	e006      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008e14:	2306      	movs	r3, #6
 8008e16:	e004      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008e18:	2304      	movs	r3, #4
 8008e1a:	e002      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e000      	b.n	8008e22 <UART_SetConfig+0x1f02>
 8008e20:	2301      	movs	r3, #1
 8008e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	085b      	lsrs	r3, r3, #1
 8008e2e:	441a      	add	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e3c:	e2aa      	b.n	8009394 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e3e:	f7fc f915 	bl	800506c <HAL_RCC_GetPCLK2Freq>
 8008e42:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d044      	beq.n	8008ed6 <UART_SetConfig+0x1fb6>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d03e      	beq.n	8008ed2 <UART_SetConfig+0x1fb2>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d038      	beq.n	8008ece <UART_SetConfig+0x1fae>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d032      	beq.n	8008eca <UART_SetConfig+0x1faa>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d02c      	beq.n	8008ec6 <UART_SetConfig+0x1fa6>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	2b05      	cmp	r3, #5
 8008e72:	d026      	beq.n	8008ec2 <UART_SetConfig+0x1fa2>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2b06      	cmp	r3, #6
 8008e7a:	d020      	beq.n	8008ebe <UART_SetConfig+0x1f9e>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	2b07      	cmp	r3, #7
 8008e82:	d01a      	beq.n	8008eba <UART_SetConfig+0x1f9a>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	d014      	beq.n	8008eb6 <UART_SetConfig+0x1f96>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	2b09      	cmp	r3, #9
 8008e92:	d00e      	beq.n	8008eb2 <UART_SetConfig+0x1f92>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2b0a      	cmp	r3, #10
 8008e9a:	d008      	beq.n	8008eae <UART_SetConfig+0x1f8e>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	2b0b      	cmp	r3, #11
 8008ea2:	d102      	bne.n	8008eaa <UART_SetConfig+0x1f8a>
 8008ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ea8:	e016      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e014      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008eae:	2380      	movs	r3, #128	; 0x80
 8008eb0:	e012      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008eb2:	2340      	movs	r3, #64	; 0x40
 8008eb4:	e010      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008eb6:	2320      	movs	r3, #32
 8008eb8:	e00e      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008eba:	2310      	movs	r3, #16
 8008ebc:	e00c      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	e00a      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008ec2:	230a      	movs	r3, #10
 8008ec4:	e008      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008ec6:	2308      	movs	r3, #8
 8008ec8:	e006      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008eca:	2306      	movs	r3, #6
 8008ecc:	e004      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008ece:	2304      	movs	r3, #4
 8008ed0:	e002      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e000      	b.n	8008ed8 <UART_SetConfig+0x1fb8>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eda:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	085b      	lsrs	r3, r3, #1
 8008ee4:	441a      	add	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ef2:	e24f      	b.n	8009394 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ef4:	f107 0318 	add.w	r3, r7, #24
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fd fa63 	bl	80063c4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008efe:	69fa      	ldr	r2, [r7, #28]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d044      	beq.n	8008f92 <UART_SetConfig+0x2072>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d03e      	beq.n	8008f8e <UART_SetConfig+0x206e>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d038      	beq.n	8008f8a <UART_SetConfig+0x206a>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d032      	beq.n	8008f86 <UART_SetConfig+0x2066>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	2b04      	cmp	r3, #4
 8008f26:	d02c      	beq.n	8008f82 <UART_SetConfig+0x2062>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	2b05      	cmp	r3, #5
 8008f2e:	d026      	beq.n	8008f7e <UART_SetConfig+0x205e>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	2b06      	cmp	r3, #6
 8008f36:	d020      	beq.n	8008f7a <UART_SetConfig+0x205a>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	2b07      	cmp	r3, #7
 8008f3e:	d01a      	beq.n	8008f76 <UART_SetConfig+0x2056>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d014      	beq.n	8008f72 <UART_SetConfig+0x2052>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	2b09      	cmp	r3, #9
 8008f4e:	d00e      	beq.n	8008f6e <UART_SetConfig+0x204e>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	2b0a      	cmp	r3, #10
 8008f56:	d008      	beq.n	8008f6a <UART_SetConfig+0x204a>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	2b0b      	cmp	r3, #11
 8008f5e:	d102      	bne.n	8008f66 <UART_SetConfig+0x2046>
 8008f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f64:	e016      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e014      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f6a:	2380      	movs	r3, #128	; 0x80
 8008f6c:	e012      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f6e:	2340      	movs	r3, #64	; 0x40
 8008f70:	e010      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f72:	2320      	movs	r3, #32
 8008f74:	e00e      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f76:	2310      	movs	r3, #16
 8008f78:	e00c      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f7a:	230c      	movs	r3, #12
 8008f7c:	e00a      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f7e:	230a      	movs	r3, #10
 8008f80:	e008      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f82:	2308      	movs	r3, #8
 8008f84:	e006      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f86:	2306      	movs	r3, #6
 8008f88:	e004      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f8a:	2304      	movs	r3, #4
 8008f8c:	e002      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e000      	b.n	8008f94 <UART_SetConfig+0x2074>
 8008f92:	2301      	movs	r3, #1
 8008f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	085b      	lsrs	r3, r3, #1
 8008f9e:	441a      	add	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fac:	e1f2      	b.n	8009394 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fae:	f107 030c 	add.w	r3, r7, #12
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fd fb52 	bl	800665c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d044      	beq.n	800904c <UART_SetConfig+0x212c>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d03e      	beq.n	8009048 <UART_SetConfig+0x2128>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d038      	beq.n	8009044 <UART_SetConfig+0x2124>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d032      	beq.n	8009040 <UART_SetConfig+0x2120>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d02c      	beq.n	800903c <UART_SetConfig+0x211c>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	2b05      	cmp	r3, #5
 8008fe8:	d026      	beq.n	8009038 <UART_SetConfig+0x2118>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	2b06      	cmp	r3, #6
 8008ff0:	d020      	beq.n	8009034 <UART_SetConfig+0x2114>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	2b07      	cmp	r3, #7
 8008ff8:	d01a      	beq.n	8009030 <UART_SetConfig+0x2110>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	2b08      	cmp	r3, #8
 8009000:	d014      	beq.n	800902c <UART_SetConfig+0x210c>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	2b09      	cmp	r3, #9
 8009008:	d00e      	beq.n	8009028 <UART_SetConfig+0x2108>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	2b0a      	cmp	r3, #10
 8009010:	d008      	beq.n	8009024 <UART_SetConfig+0x2104>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	2b0b      	cmp	r3, #11
 8009018:	d102      	bne.n	8009020 <UART_SetConfig+0x2100>
 800901a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800901e:	e016      	b.n	800904e <UART_SetConfig+0x212e>
 8009020:	2301      	movs	r3, #1
 8009022:	e014      	b.n	800904e <UART_SetConfig+0x212e>
 8009024:	2380      	movs	r3, #128	; 0x80
 8009026:	e012      	b.n	800904e <UART_SetConfig+0x212e>
 8009028:	2340      	movs	r3, #64	; 0x40
 800902a:	e010      	b.n	800904e <UART_SetConfig+0x212e>
 800902c:	2320      	movs	r3, #32
 800902e:	e00e      	b.n	800904e <UART_SetConfig+0x212e>
 8009030:	2310      	movs	r3, #16
 8009032:	e00c      	b.n	800904e <UART_SetConfig+0x212e>
 8009034:	230c      	movs	r3, #12
 8009036:	e00a      	b.n	800904e <UART_SetConfig+0x212e>
 8009038:	230a      	movs	r3, #10
 800903a:	e008      	b.n	800904e <UART_SetConfig+0x212e>
 800903c:	2308      	movs	r3, #8
 800903e:	e006      	b.n	800904e <UART_SetConfig+0x212e>
 8009040:	2306      	movs	r3, #6
 8009042:	e004      	b.n	800904e <UART_SetConfig+0x212e>
 8009044:	2304      	movs	r3, #4
 8009046:	e002      	b.n	800904e <UART_SetConfig+0x212e>
 8009048:	2302      	movs	r3, #2
 800904a:	e000      	b.n	800904e <UART_SetConfig+0x212e>
 800904c:	2301      	movs	r3, #1
 800904e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	085b      	lsrs	r3, r3, #1
 8009058:	441a      	add	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009062:	b29b      	uxth	r3, r3
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009066:	e195      	b.n	8009394 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009068:	4b87      	ldr	r3, [pc, #540]	; (8009288 <UART_SetConfig+0x2368>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0320 	and.w	r3, r3, #32
 8009070:	2b00      	cmp	r3, #0
 8009072:	d05d      	beq.n	8009130 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009074:	4b84      	ldr	r3, [pc, #528]	; (8009288 <UART_SetConfig+0x2368>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	08db      	lsrs	r3, r3, #3
 800907a:	f003 0303 	and.w	r3, r3, #3
 800907e:	4a83      	ldr	r2, [pc, #524]	; (800928c <UART_SetConfig+0x236c>)
 8009080:	40da      	lsrs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	2b00      	cmp	r3, #0
 8009088:	d044      	beq.n	8009114 <UART_SetConfig+0x21f4>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	2b01      	cmp	r3, #1
 8009090:	d03e      	beq.n	8009110 <UART_SetConfig+0x21f0>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	2b02      	cmp	r3, #2
 8009098:	d038      	beq.n	800910c <UART_SetConfig+0x21ec>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d032      	beq.n	8009108 <UART_SetConfig+0x21e8>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d02c      	beq.n	8009104 <UART_SetConfig+0x21e4>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	d026      	beq.n	8009100 <UART_SetConfig+0x21e0>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	2b06      	cmp	r3, #6
 80090b8:	d020      	beq.n	80090fc <UART_SetConfig+0x21dc>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	2b07      	cmp	r3, #7
 80090c0:	d01a      	beq.n	80090f8 <UART_SetConfig+0x21d8>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d014      	beq.n	80090f4 <UART_SetConfig+0x21d4>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	2b09      	cmp	r3, #9
 80090d0:	d00e      	beq.n	80090f0 <UART_SetConfig+0x21d0>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	2b0a      	cmp	r3, #10
 80090d8:	d008      	beq.n	80090ec <UART_SetConfig+0x21cc>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b0b      	cmp	r3, #11
 80090e0:	d102      	bne.n	80090e8 <UART_SetConfig+0x21c8>
 80090e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e6:	e016      	b.n	8009116 <UART_SetConfig+0x21f6>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e014      	b.n	8009116 <UART_SetConfig+0x21f6>
 80090ec:	2380      	movs	r3, #128	; 0x80
 80090ee:	e012      	b.n	8009116 <UART_SetConfig+0x21f6>
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	e010      	b.n	8009116 <UART_SetConfig+0x21f6>
 80090f4:	2320      	movs	r3, #32
 80090f6:	e00e      	b.n	8009116 <UART_SetConfig+0x21f6>
 80090f8:	2310      	movs	r3, #16
 80090fa:	e00c      	b.n	8009116 <UART_SetConfig+0x21f6>
 80090fc:	230c      	movs	r3, #12
 80090fe:	e00a      	b.n	8009116 <UART_SetConfig+0x21f6>
 8009100:	230a      	movs	r3, #10
 8009102:	e008      	b.n	8009116 <UART_SetConfig+0x21f6>
 8009104:	2308      	movs	r3, #8
 8009106:	e006      	b.n	8009116 <UART_SetConfig+0x21f6>
 8009108:	2306      	movs	r3, #6
 800910a:	e004      	b.n	8009116 <UART_SetConfig+0x21f6>
 800910c:	2304      	movs	r3, #4
 800910e:	e002      	b.n	8009116 <UART_SetConfig+0x21f6>
 8009110:	2302      	movs	r3, #2
 8009112:	e000      	b.n	8009116 <UART_SetConfig+0x21f6>
 8009114:	2301      	movs	r3, #1
 8009116:	fbb2 f2f3 	udiv	r2, r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	085b      	lsrs	r3, r3, #1
 8009120:	441a      	add	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	fbb2 f3f3 	udiv	r3, r2, r3
 800912a:	b29b      	uxth	r3, r3
 800912c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800912e:	e131      	b.n	8009394 <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	2b00      	cmp	r3, #0
 8009136:	d043      	beq.n	80091c0 <UART_SetConfig+0x22a0>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b01      	cmp	r3, #1
 800913e:	d03d      	beq.n	80091bc <UART_SetConfig+0x229c>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	2b02      	cmp	r3, #2
 8009146:	d037      	beq.n	80091b8 <UART_SetConfig+0x2298>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b03      	cmp	r3, #3
 800914e:	d031      	beq.n	80091b4 <UART_SetConfig+0x2294>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	2b04      	cmp	r3, #4
 8009156:	d02b      	beq.n	80091b0 <UART_SetConfig+0x2290>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	2b05      	cmp	r3, #5
 800915e:	d025      	beq.n	80091ac <UART_SetConfig+0x228c>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	2b06      	cmp	r3, #6
 8009166:	d01f      	beq.n	80091a8 <UART_SetConfig+0x2288>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	2b07      	cmp	r3, #7
 800916e:	d019      	beq.n	80091a4 <UART_SetConfig+0x2284>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	2b08      	cmp	r3, #8
 8009176:	d013      	beq.n	80091a0 <UART_SetConfig+0x2280>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	2b09      	cmp	r3, #9
 800917e:	d00d      	beq.n	800919c <UART_SetConfig+0x227c>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009184:	2b0a      	cmp	r3, #10
 8009186:	d007      	beq.n	8009198 <UART_SetConfig+0x2278>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	2b0b      	cmp	r3, #11
 800918e:	d101      	bne.n	8009194 <UART_SetConfig+0x2274>
 8009190:	4b3f      	ldr	r3, [pc, #252]	; (8009290 <UART_SetConfig+0x2370>)
 8009192:	e016      	b.n	80091c2 <UART_SetConfig+0x22a2>
 8009194:	4b3d      	ldr	r3, [pc, #244]	; (800928c <UART_SetConfig+0x236c>)
 8009196:	e014      	b.n	80091c2 <UART_SetConfig+0x22a2>
 8009198:	4b3e      	ldr	r3, [pc, #248]	; (8009294 <UART_SetConfig+0x2374>)
 800919a:	e012      	b.n	80091c2 <UART_SetConfig+0x22a2>
 800919c:	4b3e      	ldr	r3, [pc, #248]	; (8009298 <UART_SetConfig+0x2378>)
 800919e:	e010      	b.n	80091c2 <UART_SetConfig+0x22a2>
 80091a0:	4b3e      	ldr	r3, [pc, #248]	; (800929c <UART_SetConfig+0x237c>)
 80091a2:	e00e      	b.n	80091c2 <UART_SetConfig+0x22a2>
 80091a4:	4b3e      	ldr	r3, [pc, #248]	; (80092a0 <UART_SetConfig+0x2380>)
 80091a6:	e00c      	b.n	80091c2 <UART_SetConfig+0x22a2>
 80091a8:	4b3e      	ldr	r3, [pc, #248]	; (80092a4 <UART_SetConfig+0x2384>)
 80091aa:	e00a      	b.n	80091c2 <UART_SetConfig+0x22a2>
 80091ac:	4b3e      	ldr	r3, [pc, #248]	; (80092a8 <UART_SetConfig+0x2388>)
 80091ae:	e008      	b.n	80091c2 <UART_SetConfig+0x22a2>
 80091b0:	4b3e      	ldr	r3, [pc, #248]	; (80092ac <UART_SetConfig+0x238c>)
 80091b2:	e006      	b.n	80091c2 <UART_SetConfig+0x22a2>
 80091b4:	4b3e      	ldr	r3, [pc, #248]	; (80092b0 <UART_SetConfig+0x2390>)
 80091b6:	e004      	b.n	80091c2 <UART_SetConfig+0x22a2>
 80091b8:	4b3e      	ldr	r3, [pc, #248]	; (80092b4 <UART_SetConfig+0x2394>)
 80091ba:	e002      	b.n	80091c2 <UART_SetConfig+0x22a2>
 80091bc:	4b3e      	ldr	r3, [pc, #248]	; (80092b8 <UART_SetConfig+0x2398>)
 80091be:	e000      	b.n	80091c2 <UART_SetConfig+0x22a2>
 80091c0:	4b32      	ldr	r3, [pc, #200]	; (800928c <UART_SetConfig+0x236c>)
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	6852      	ldr	r2, [r2, #4]
 80091c6:	0852      	lsrs	r2, r2, #1
 80091c8:	441a      	add	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091d6:	e0dd      	b.n	8009394 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d046      	beq.n	800926e <UART_SetConfig+0x234e>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d040      	beq.n	800926a <UART_SetConfig+0x234a>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d03a      	beq.n	8009266 <UART_SetConfig+0x2346>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	d034      	beq.n	8009262 <UART_SetConfig+0x2342>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d02e      	beq.n	800925e <UART_SetConfig+0x233e>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	2b05      	cmp	r3, #5
 8009206:	d028      	beq.n	800925a <UART_SetConfig+0x233a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	2b06      	cmp	r3, #6
 800920e:	d022      	beq.n	8009256 <UART_SetConfig+0x2336>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	2b07      	cmp	r3, #7
 8009216:	d01c      	beq.n	8009252 <UART_SetConfig+0x2332>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	2b08      	cmp	r3, #8
 800921e:	d016      	beq.n	800924e <UART_SetConfig+0x232e>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	2b09      	cmp	r3, #9
 8009226:	d00f      	beq.n	8009248 <UART_SetConfig+0x2328>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	2b0a      	cmp	r3, #10
 800922e:	d008      	beq.n	8009242 <UART_SetConfig+0x2322>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	2b0b      	cmp	r3, #11
 8009236:	d102      	bne.n	800923e <UART_SetConfig+0x231e>
 8009238:	f643 5309 	movw	r3, #15625	; 0x3d09
 800923c:	e018      	b.n	8009270 <UART_SetConfig+0x2350>
 800923e:	4b18      	ldr	r3, [pc, #96]	; (80092a0 <UART_SetConfig+0x2380>)
 8009240:	e016      	b.n	8009270 <UART_SetConfig+0x2350>
 8009242:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009246:	e013      	b.n	8009270 <UART_SetConfig+0x2350>
 8009248:	f24f 4324 	movw	r3, #62500	; 0xf424
 800924c:	e010      	b.n	8009270 <UART_SetConfig+0x2350>
 800924e:	4b1b      	ldr	r3, [pc, #108]	; (80092bc <UART_SetConfig+0x239c>)
 8009250:	e00e      	b.n	8009270 <UART_SetConfig+0x2350>
 8009252:	4b0f      	ldr	r3, [pc, #60]	; (8009290 <UART_SetConfig+0x2370>)
 8009254:	e00c      	b.n	8009270 <UART_SetConfig+0x2350>
 8009256:	4b1a      	ldr	r3, [pc, #104]	; (80092c0 <UART_SetConfig+0x23a0>)
 8009258:	e00a      	b.n	8009270 <UART_SetConfig+0x2350>
 800925a:	4b1a      	ldr	r3, [pc, #104]	; (80092c4 <UART_SetConfig+0x23a4>)
 800925c:	e008      	b.n	8009270 <UART_SetConfig+0x2350>
 800925e:	4b0d      	ldr	r3, [pc, #52]	; (8009294 <UART_SetConfig+0x2374>)
 8009260:	e006      	b.n	8009270 <UART_SetConfig+0x2350>
 8009262:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <UART_SetConfig+0x23a8>)
 8009264:	e004      	b.n	8009270 <UART_SetConfig+0x2350>
 8009266:	4b0c      	ldr	r3, [pc, #48]	; (8009298 <UART_SetConfig+0x2378>)
 8009268:	e002      	b.n	8009270 <UART_SetConfig+0x2350>
 800926a:	4b0c      	ldr	r3, [pc, #48]	; (800929c <UART_SetConfig+0x237c>)
 800926c:	e000      	b.n	8009270 <UART_SetConfig+0x2350>
 800926e:	4b0c      	ldr	r3, [pc, #48]	; (80092a0 <UART_SetConfig+0x2380>)
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6852      	ldr	r2, [r2, #4]
 8009274:	0852      	lsrs	r2, r2, #1
 8009276:	441a      	add	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009280:	b29b      	uxth	r3, r3
 8009282:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009284:	e086      	b.n	8009394 <UART_SetConfig+0x2474>
 8009286:	bf00      	nop
 8009288:	58024400 	.word	0x58024400
 800928c:	03d09000 	.word	0x03d09000
 8009290:	0003d090 	.word	0x0003d090
 8009294:	0007a120 	.word	0x0007a120
 8009298:	000f4240 	.word	0x000f4240
 800929c:	001e8480 	.word	0x001e8480
 80092a0:	003d0900 	.word	0x003d0900
 80092a4:	00516155 	.word	0x00516155
 80092a8:	0061a800 	.word	0x0061a800
 80092ac:	007a1200 	.word	0x007a1200
 80092b0:	00a2c2aa 	.word	0x00a2c2aa
 80092b4:	00f42400 	.word	0x00f42400
 80092b8:	01e84800 	.word	0x01e84800
 80092bc:	0001e848 	.word	0x0001e848
 80092c0:	00051615 	.word	0x00051615
 80092c4:	00061a80 	.word	0x00061a80
 80092c8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d04e      	beq.n	8009372 <UART_SetConfig+0x2452>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d047      	beq.n	800936c <UART_SetConfig+0x244c>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d040      	beq.n	8009366 <UART_SetConfig+0x2446>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d039      	beq.n	8009360 <UART_SetConfig+0x2440>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d032      	beq.n	800935a <UART_SetConfig+0x243a>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b05      	cmp	r3, #5
 80092fa:	d02b      	beq.n	8009354 <UART_SetConfig+0x2434>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	2b06      	cmp	r3, #6
 8009302:	d024      	beq.n	800934e <UART_SetConfig+0x242e>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	2b07      	cmp	r3, #7
 800930a:	d01d      	beq.n	8009348 <UART_SetConfig+0x2428>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b08      	cmp	r3, #8
 8009312:	d016      	beq.n	8009342 <UART_SetConfig+0x2422>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	2b09      	cmp	r3, #9
 800931a:	d00f      	beq.n	800933c <UART_SetConfig+0x241c>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	2b0a      	cmp	r3, #10
 8009322:	d008      	beq.n	8009336 <UART_SetConfig+0x2416>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	2b0b      	cmp	r3, #11
 800932a:	d101      	bne.n	8009330 <UART_SetConfig+0x2410>
 800932c:	2380      	movs	r3, #128	; 0x80
 800932e:	e022      	b.n	8009376 <UART_SetConfig+0x2456>
 8009330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009334:	e01f      	b.n	8009376 <UART_SetConfig+0x2456>
 8009336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800933a:	e01c      	b.n	8009376 <UART_SetConfig+0x2456>
 800933c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009340:	e019      	b.n	8009376 <UART_SetConfig+0x2456>
 8009342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009346:	e016      	b.n	8009376 <UART_SetConfig+0x2456>
 8009348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800934c:	e013      	b.n	8009376 <UART_SetConfig+0x2456>
 800934e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009352:	e010      	b.n	8009376 <UART_SetConfig+0x2456>
 8009354:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009358:	e00d      	b.n	8009376 <UART_SetConfig+0x2456>
 800935a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800935e:	e00a      	b.n	8009376 <UART_SetConfig+0x2456>
 8009360:	f241 5355 	movw	r3, #5461	; 0x1555
 8009364:	e007      	b.n	8009376 <UART_SetConfig+0x2456>
 8009366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800936a:	e004      	b.n	8009376 <UART_SetConfig+0x2456>
 800936c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009370:	e001      	b.n	8009376 <UART_SetConfig+0x2456>
 8009372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	6852      	ldr	r2, [r2, #4]
 800937a:	0852      	lsrs	r2, r2, #1
 800937c:	441a      	add	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	fbb2 f3f3 	udiv	r3, r2, r3
 8009386:	b29b      	uxth	r3, r3
 8009388:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800938a:	e003      	b.n	8009394 <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009396:	2b0f      	cmp	r3, #15
 8009398:	d908      	bls.n	80093ac <UART_SetConfig+0x248c>
 800939a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a0:	d204      	bcs.n	80093ac <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a8:	60da      	str	r2, [r3, #12]
 80093aa:	e002      	b.n	80093b2 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80093ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3740      	adds	r7, #64	; 0x40
 80093d6:	46bd      	mov	sp, r7
 80093d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080093dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e8:	2bff      	cmp	r3, #255	; 0xff
 80093ea:	d904      	bls.n	80093f6 <UART_AdvFeatureConfig+0x1a>
 80093ec:	f640 4149 	movw	r1, #3145	; 0xc49
 80093f0:	4899      	ldr	r0, [pc, #612]	; (8009658 <UART_AdvFeatureConfig+0x27c>)
 80093f2:	f7f7 fbe6 	bl	8000bc2 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d018      	beq.n	8009434 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d009      	beq.n	800941e <UART_AdvFeatureConfig+0x42>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009412:	d004      	beq.n	800941e <UART_AdvFeatureConfig+0x42>
 8009414:	f640 414e 	movw	r1, #3150	; 0xc4e
 8009418:	488f      	ldr	r0, [pc, #572]	; (8009658 <UART_AdvFeatureConfig+0x27c>)
 800941a:	f7f7 fbd2 	bl	8000bc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d018      	beq.n	8009472 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009444:	2b00      	cmp	r3, #0
 8009446:	d009      	beq.n	800945c <UART_AdvFeatureConfig+0x80>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009450:	d004      	beq.n	800945c <UART_AdvFeatureConfig+0x80>
 8009452:	f640 4155 	movw	r1, #3157	; 0xc55
 8009456:	4880      	ldr	r0, [pc, #512]	; (8009658 <UART_AdvFeatureConfig+0x27c>)
 8009458:	f7f7 fbb3 	bl	8000bc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009476:	f003 0304 	and.w	r3, r3, #4
 800947a:	2b00      	cmp	r3, #0
 800947c:	d018      	beq.n	80094b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009482:	2b00      	cmp	r3, #0
 8009484:	d009      	beq.n	800949a <UART_AdvFeatureConfig+0xbe>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800948e:	d004      	beq.n	800949a <UART_AdvFeatureConfig+0xbe>
 8009490:	f640 415c 	movw	r1, #3164	; 0xc5c
 8009494:	4870      	ldr	r0, [pc, #448]	; (8009658 <UART_AdvFeatureConfig+0x27c>)
 8009496:	f7f7 fb94 	bl	8000bc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	430a      	orrs	r2, r1
 80094ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d018      	beq.n	80094ee <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d009      	beq.n	80094d8 <UART_AdvFeatureConfig+0xfc>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094cc:	d004      	beq.n	80094d8 <UART_AdvFeatureConfig+0xfc>
 80094ce:	f640 4163 	movw	r1, #3171	; 0xc63
 80094d2:	4861      	ldr	r0, [pc, #388]	; (8009658 <UART_AdvFeatureConfig+0x27c>)
 80094d4:	f7f7 fb75 	bl	8000bc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f2:	f003 0310 	and.w	r3, r3, #16
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d018      	beq.n	800952c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <UART_AdvFeatureConfig+0x13a>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800950a:	d004      	beq.n	8009516 <UART_AdvFeatureConfig+0x13a>
 800950c:	f640 416a 	movw	r1, #3178	; 0xc6a
 8009510:	4851      	ldr	r0, [pc, #324]	; (8009658 <UART_AdvFeatureConfig+0x27c>)
 8009512:	f7f7 fb56 	bl	8000bc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	430a      	orrs	r2, r1
 800952a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009530:	f003 0320 	and.w	r3, r3, #32
 8009534:	2b00      	cmp	r3, #0
 8009536:	d018      	beq.n	800956a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	2b00      	cmp	r3, #0
 800953e:	d009      	beq.n	8009554 <UART_AdvFeatureConfig+0x178>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009548:	d004      	beq.n	8009554 <UART_AdvFeatureConfig+0x178>
 800954a:	f640 4171 	movw	r1, #3185	; 0xc71
 800954e:	4842      	ldr	r0, [pc, #264]	; (8009658 <UART_AdvFeatureConfig+0x27c>)
 8009550:	f7f7 fb37 	bl	8000bc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 8082 	beq.w	800967c <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a37      	ldr	r2, [pc, #220]	; (800965c <UART_AdvFeatureConfig+0x280>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d027      	beq.n	80095d2 <UART_AdvFeatureConfig+0x1f6>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a36      	ldr	r2, [pc, #216]	; (8009660 <UART_AdvFeatureConfig+0x284>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d022      	beq.n	80095d2 <UART_AdvFeatureConfig+0x1f6>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a34      	ldr	r2, [pc, #208]	; (8009664 <UART_AdvFeatureConfig+0x288>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d01d      	beq.n	80095d2 <UART_AdvFeatureConfig+0x1f6>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a33      	ldr	r2, [pc, #204]	; (8009668 <UART_AdvFeatureConfig+0x28c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d018      	beq.n	80095d2 <UART_AdvFeatureConfig+0x1f6>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a31      	ldr	r2, [pc, #196]	; (800966c <UART_AdvFeatureConfig+0x290>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d013      	beq.n	80095d2 <UART_AdvFeatureConfig+0x1f6>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a30      	ldr	r2, [pc, #192]	; (8009670 <UART_AdvFeatureConfig+0x294>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d00e      	beq.n	80095d2 <UART_AdvFeatureConfig+0x1f6>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a2e      	ldr	r2, [pc, #184]	; (8009674 <UART_AdvFeatureConfig+0x298>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d009      	beq.n	80095d2 <UART_AdvFeatureConfig+0x1f6>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a2d      	ldr	r2, [pc, #180]	; (8009678 <UART_AdvFeatureConfig+0x29c>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d004      	beq.n	80095d2 <UART_AdvFeatureConfig+0x1f6>
 80095c8:	f640 4178 	movw	r1, #3192	; 0xc78
 80095cc:	4822      	ldr	r0, [pc, #136]	; (8009658 <UART_AdvFeatureConfig+0x27c>)
 80095ce:	f7f7 faf8 	bl	8000bc2 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d009      	beq.n	80095ee <UART_AdvFeatureConfig+0x212>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095e2:	d004      	beq.n	80095ee <UART_AdvFeatureConfig+0x212>
 80095e4:	f640 4179 	movw	r1, #3193	; 0xc79
 80095e8:	481b      	ldr	r0, [pc, #108]	; (8009658 <UART_AdvFeatureConfig+0x27c>)
 80095ea:	f7f7 faea 	bl	8000bc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	430a      	orrs	r2, r1
 8009602:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800960c:	d136      	bne.n	800967c <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009612:	2b00      	cmp	r3, #0
 8009614:	d013      	beq.n	800963e <UART_AdvFeatureConfig+0x262>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800961a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800961e:	d00e      	beq.n	800963e <UART_AdvFeatureConfig+0x262>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009628:	d009      	beq.n	800963e <UART_AdvFeatureConfig+0x262>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800962e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009632:	d004      	beq.n	800963e <UART_AdvFeatureConfig+0x262>
 8009634:	f640 417e 	movw	r1, #3198	; 0xc7e
 8009638:	4807      	ldr	r0, [pc, #28]	; (8009658 <UART_AdvFeatureConfig+0x27c>)
 800963a:	f7f7 fac2 	bl	8000bc2 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	430a      	orrs	r2, r1
 8009652:	605a      	str	r2, [r3, #4]
 8009654:	e012      	b.n	800967c <UART_AdvFeatureConfig+0x2a0>
 8009656:	bf00      	nop
 8009658:	08009e88 	.word	0x08009e88
 800965c:	40011000 	.word	0x40011000
 8009660:	40004400 	.word	0x40004400
 8009664:	40004800 	.word	0x40004800
 8009668:	40004c00 	.word	0x40004c00
 800966c:	40005000 	.word	0x40005000
 8009670:	40011400 	.word	0x40011400
 8009674:	40007800 	.word	0x40007800
 8009678:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009684:	2b00      	cmp	r3, #0
 8009686:	d018      	beq.n	80096ba <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d009      	beq.n	80096a4 <UART_AdvFeatureConfig+0x2c8>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009694:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009698:	d004      	beq.n	80096a4 <UART_AdvFeatureConfig+0x2c8>
 800969a:	f640 4186 	movw	r1, #3206	; 0xc86
 800969e:	4809      	ldr	r0, [pc, #36]	; (80096c4 <UART_AdvFeatureConfig+0x2e8>)
 80096a0:	f7f7 fa8f 	bl	8000bc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	430a      	orrs	r2, r1
 80096b8:	605a      	str	r2, [r3, #4]
  }
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	08009e88 	.word	0x08009e88

080096c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af02      	add	r7, sp, #8
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80096d8:	f7f7 fc90 	bl	8000ffc <HAL_GetTick>
 80096dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0308 	and.w	r3, r3, #8
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	d10e      	bne.n	800970a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f82c 	bl	8009758 <UART_WaitOnFlagUntilTimeout>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e022      	b.n	8009750 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b04      	cmp	r3, #4
 8009716:	d10e      	bne.n	8009736 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f816 	bl	8009758 <UART_WaitOnFlagUntilTimeout>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e00c      	b.n	8009750 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	603b      	str	r3, [r7, #0]
 8009764:	4613      	mov	r3, r2
 8009766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009768:	e062      	b.n	8009830 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009770:	d05e      	beq.n	8009830 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009772:	f7f7 fc43 	bl	8000ffc <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	429a      	cmp	r2, r3
 8009780:	d302      	bcc.n	8009788 <UART_WaitOnFlagUntilTimeout+0x30>
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d11d      	bne.n	80097c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009796:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689a      	ldr	r2, [r3, #8]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f022 0201 	bic.w	r2, r2, #1
 80097a6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e045      	b.n	8009850 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0304 	and.w	r3, r3, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d02e      	beq.n	8009830 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097e0:	d126      	bne.n	8009830 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097ea:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097fa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 0201 	bic.w	r2, r2, #1
 800980a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2220      	movs	r2, #32
 8009810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2220      	movs	r2, #32
 8009818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2220      	movs	r2, #32
 8009820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e00f      	b.n	8009850 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69da      	ldr	r2, [r3, #28]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	4013      	ands	r3, r2
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	429a      	cmp	r2, r3
 800983e:	bf0c      	ite	eq
 8009840:	2301      	moveq	r3, #1
 8009842:	2300      	movne	r3, #0
 8009844:	b2db      	uxtb	r3, r3
 8009846:	461a      	mov	r2, r3
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	429a      	cmp	r2, r3
 800984c:	d08d      	beq.n	800976a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a2e      	ldr	r2, [pc, #184]	; (8009920 <HAL_UARTEx_DisableFifoMode+0xc8>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d027      	beq.n	80098ba <HAL_UARTEx_DisableFifoMode+0x62>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a2d      	ldr	r2, [pc, #180]	; (8009924 <HAL_UARTEx_DisableFifoMode+0xcc>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d022      	beq.n	80098ba <HAL_UARTEx_DisableFifoMode+0x62>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a2b      	ldr	r2, [pc, #172]	; (8009928 <HAL_UARTEx_DisableFifoMode+0xd0>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d01d      	beq.n	80098ba <HAL_UARTEx_DisableFifoMode+0x62>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a2a      	ldr	r2, [pc, #168]	; (800992c <HAL_UARTEx_DisableFifoMode+0xd4>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d018      	beq.n	80098ba <HAL_UARTEx_DisableFifoMode+0x62>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a28      	ldr	r2, [pc, #160]	; (8009930 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d013      	beq.n	80098ba <HAL_UARTEx_DisableFifoMode+0x62>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a27      	ldr	r2, [pc, #156]	; (8009934 <HAL_UARTEx_DisableFifoMode+0xdc>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d00e      	beq.n	80098ba <HAL_UARTEx_DisableFifoMode+0x62>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a25      	ldr	r2, [pc, #148]	; (8009938 <HAL_UARTEx_DisableFifoMode+0xe0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d009      	beq.n	80098ba <HAL_UARTEx_DisableFifoMode+0x62>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a24      	ldr	r2, [pc, #144]	; (800993c <HAL_UARTEx_DisableFifoMode+0xe4>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d004      	beq.n	80098ba <HAL_UARTEx_DisableFifoMode+0x62>
 80098b0:	f240 2111 	movw	r1, #529	; 0x211
 80098b4:	4822      	ldr	r0, [pc, #136]	; (8009940 <HAL_UARTEx_DisableFifoMode+0xe8>)
 80098b6:	f7f7 f984 	bl	8000bc2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_UARTEx_DisableFifoMode+0x70>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e027      	b.n	8009918 <HAL_UARTEx_DisableFifoMode+0xc0>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2224      	movs	r2, #36	; 0x24
 80098d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f022 0201 	bic.w	r2, r2, #1
 80098ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80098f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2220      	movs	r2, #32
 800990a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	40011000 	.word	0x40011000
 8009924:	40004400 	.word	0x40004400
 8009928:	40004800 	.word	0x40004800
 800992c:	40004c00 	.word	0x40004c00
 8009930:	40005000 	.word	0x40005000
 8009934:	40011400 	.word	0x40011400
 8009938:	40007800 	.word	0x40007800
 800993c:	40007c00 	.word	0x40007c00
 8009940:	08009ec4 	.word	0x08009ec4

08009944 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a40      	ldr	r2, [pc, #256]	; (8009a54 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d027      	beq.n	80099a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a3e      	ldr	r2, [pc, #248]	; (8009a58 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d022      	beq.n	80099a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a3d      	ldr	r2, [pc, #244]	; (8009a5c <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d01d      	beq.n	80099a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a3b      	ldr	r2, [pc, #236]	; (8009a60 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d018      	beq.n	80099a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a3a      	ldr	r2, [pc, #232]	; (8009a64 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d013      	beq.n	80099a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a38      	ldr	r2, [pc, #224]	; (8009a68 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d00e      	beq.n	80099a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a37      	ldr	r2, [pc, #220]	; (8009a6c <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d009      	beq.n	80099a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a35      	ldr	r2, [pc, #212]	; (8009a70 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d004      	beq.n	80099a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800999e:	f240 213f 	movw	r1, #575	; 0x23f
 80099a2:	4834      	ldr	r0, [pc, #208]	; (8009a74 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 80099a4:	f7f7 f90d 	bl	8000bc2 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d018      	beq.n	80099e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099b4:	d014      	beq.n	80099e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099bc:	d010      	beq.n	80099e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80099c4:	d00c      	beq.n	80099e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099cc:	d008      	beq.n	80099e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 80099d4:	d004      	beq.n	80099e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 80099d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80099da:	4826      	ldr	r0, [pc, #152]	; (8009a74 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 80099dc:	f7f7 f8f1 	bl	8000bc2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d101      	bne.n	80099ee <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 80099ea:	2302      	movs	r3, #2
 80099ec:	e02d      	b.n	8009a4a <HAL_UARTEx_SetTxFifoThreshold+0x106>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2224      	movs	r2, #36	; 0x24
 80099fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0201 	bic.w	r2, r2, #1
 8009a14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f8be 	bl	8009bac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	40011000 	.word	0x40011000
 8009a58:	40004400 	.word	0x40004400
 8009a5c:	40004800 	.word	0x40004800
 8009a60:	40004c00 	.word	0x40004c00
 8009a64:	40005000 	.word	0x40005000
 8009a68:	40011400 	.word	0x40011400
 8009a6c:	40007800 	.word	0x40007800
 8009a70:	40007c00 	.word	0x40007c00
 8009a74:	08009ec4 	.word	0x08009ec4

08009a78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a40      	ldr	r2, [pc, #256]	; (8009b88 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d027      	beq.n	8009adc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a3e      	ldr	r2, [pc, #248]	; (8009b8c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d022      	beq.n	8009adc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a3d      	ldr	r2, [pc, #244]	; (8009b90 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d01d      	beq.n	8009adc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a3b      	ldr	r2, [pc, #236]	; (8009b94 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d018      	beq.n	8009adc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a3a      	ldr	r2, [pc, #232]	; (8009b98 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d013      	beq.n	8009adc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a38      	ldr	r2, [pc, #224]	; (8009b9c <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d00e      	beq.n	8009adc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a37      	ldr	r2, [pc, #220]	; (8009ba0 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d009      	beq.n	8009adc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a35      	ldr	r2, [pc, #212]	; (8009ba4 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d004      	beq.n	8009adc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009ad2:	f44f 711c 	mov.w	r1, #624	; 0x270
 8009ad6:	4834      	ldr	r0, [pc, #208]	; (8009ba8 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8009ad8:	f7f7 f873 	bl	8000bc2 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d018      	beq.n	8009b14 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ae8:	d014      	beq.n	8009b14 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009af0:	d010      	beq.n	8009b14 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009af8:	d00c      	beq.n	8009b14 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b00:	d008      	beq.n	8009b14 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8009b08:	d004      	beq.n	8009b14 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009b0a:	f240 2171 	movw	r1, #625	; 0x271
 8009b0e:	4826      	ldr	r0, [pc, #152]	; (8009ba8 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8009b10:	f7f7 f857 	bl	8000bc2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d101      	bne.n	8009b22 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 8009b1e:	2302      	movs	r3, #2
 8009b20:	e02d      	b.n	8009b7e <HAL_UARTEx_SetRxFifoThreshold+0x106>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2224      	movs	r2, #36	; 0x24
 8009b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f022 0201 	bic.w	r2, r2, #1
 8009b48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f824 	bl	8009bac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	40011000 	.word	0x40011000
 8009b8c:	40004400 	.word	0x40004400
 8009b90:	40004800 	.word	0x40004800
 8009b94:	40004c00 	.word	0x40004c00
 8009b98:	40005000 	.word	0x40005000
 8009b9c:	40011400 	.word	0x40011400
 8009ba0:	40007800 	.word	0x40007800
 8009ba4:	40007c00 	.word	0x40007c00
 8009ba8:	08009ec4 	.word	0x08009ec4

08009bac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b089      	sub	sp, #36	; 0x24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009bb4:	4a2f      	ldr	r2, [pc, #188]	; (8009c74 <UARTEx_SetNbDataToProcess+0xc8>)
 8009bb6:	f107 0314 	add.w	r3, r7, #20
 8009bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bbe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009bc2:	4a2d      	ldr	r2, [pc, #180]	; (8009c78 <UARTEx_SetNbDataToProcess+0xcc>)
 8009bc4:	f107 030c 	add.w	r3, r7, #12
 8009bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bcc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d108      	bne.n	8009bea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009be8:	e03d      	b.n	8009c66 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bea:	2308      	movs	r3, #8
 8009bec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bee:	2308      	movs	r3, #8
 8009bf0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	0e5b      	lsrs	r3, r3, #25
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f003 0307 	and.w	r3, r3, #7
 8009c00:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	0f5b      	lsrs	r3, r3, #29
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	f003 0307 	and.w	r3, r3, #7
 8009c10:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009c12:	7fbb      	ldrb	r3, [r7, #30]
 8009c14:	7f3a      	ldrb	r2, [r7, #28]
 8009c16:	f107 0120 	add.w	r1, r7, #32
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009c20:	fb02 f303 	mul.w	r3, r2, r3
 8009c24:	7f3a      	ldrb	r2, [r7, #28]
 8009c26:	f107 0120 	add.w	r1, r7, #32
 8009c2a:	440a      	add	r2, r1
 8009c2c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009c3c:	7ffb      	ldrb	r3, [r7, #31]
 8009c3e:	7f7a      	ldrb	r2, [r7, #29]
 8009c40:	f107 0120 	add.w	r1, r7, #32
 8009c44:	440a      	add	r2, r1
 8009c46:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009c4a:	fb02 f303 	mul.w	r3, r2, r3
 8009c4e:	7f7a      	ldrb	r2, [r7, #29]
 8009c50:	f107 0120 	add.w	r1, r7, #32
 8009c54:	440a      	add	r2, r1
 8009c56:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009c5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c66:	bf00      	nop
 8009c68:	3724      	adds	r7, #36	; 0x24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	08009f00 	.word	0x08009f00
 8009c78:	08009f08 	.word	0x08009f08

08009c7c <__libc_init_array>:
 8009c7c:	b570      	push	{r4, r5, r6, lr}
 8009c7e:	4e0d      	ldr	r6, [pc, #52]	; (8009cb4 <__libc_init_array+0x38>)
 8009c80:	4c0d      	ldr	r4, [pc, #52]	; (8009cb8 <__libc_init_array+0x3c>)
 8009c82:	1ba4      	subs	r4, r4, r6
 8009c84:	10a4      	asrs	r4, r4, #2
 8009c86:	2500      	movs	r5, #0
 8009c88:	42a5      	cmp	r5, r4
 8009c8a:	d109      	bne.n	8009ca0 <__libc_init_array+0x24>
 8009c8c:	4e0b      	ldr	r6, [pc, #44]	; (8009cbc <__libc_init_array+0x40>)
 8009c8e:	4c0c      	ldr	r4, [pc, #48]	; (8009cc0 <__libc_init_array+0x44>)
 8009c90:	f000 f820 	bl	8009cd4 <_init>
 8009c94:	1ba4      	subs	r4, r4, r6
 8009c96:	10a4      	asrs	r4, r4, #2
 8009c98:	2500      	movs	r5, #0
 8009c9a:	42a5      	cmp	r5, r4
 8009c9c:	d105      	bne.n	8009caa <__libc_init_array+0x2e>
 8009c9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ca4:	4798      	blx	r3
 8009ca6:	3501      	adds	r5, #1
 8009ca8:	e7ee      	b.n	8009c88 <__libc_init_array+0xc>
 8009caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cae:	4798      	blx	r3
 8009cb0:	3501      	adds	r5, #1
 8009cb2:	e7f2      	b.n	8009c9a <__libc_init_array+0x1e>
 8009cb4:	08009f28 	.word	0x08009f28
 8009cb8:	08009f28 	.word	0x08009f28
 8009cbc:	08009f28 	.word	0x08009f28
 8009cc0:	08009f2c 	.word	0x08009f2c

08009cc4 <memset>:
 8009cc4:	4402      	add	r2, r0
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d100      	bne.n	8009cce <memset+0xa>
 8009ccc:	4770      	bx	lr
 8009cce:	f803 1b01 	strb.w	r1, [r3], #1
 8009cd2:	e7f9      	b.n	8009cc8 <memset+0x4>

08009cd4 <_init>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	bf00      	nop
 8009cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cda:	bc08      	pop	{r3}
 8009cdc:	469e      	mov	lr, r3
 8009cde:	4770      	bx	lr

08009ce0 <_fini>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	bf00      	nop
 8009ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce6:	bc08      	pop	{r3}
 8009ce8:	469e      	mov	lr, r3
 8009cea:	4770      	bx	lr
