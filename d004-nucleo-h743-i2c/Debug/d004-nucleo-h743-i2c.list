
d004-nucleo-h743-i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082ec  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d4  080085d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085dc  080085dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080085e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  24000010  080085f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400010c  080085f4  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001913e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027ca  00000000  00000000  0003917c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  0003b948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca8  00000000  00000000  0003c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003540c  00000000  00000000  0003d390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd53  00000000  00000000  0007279c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001542cd  00000000  00000000  000804ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d47bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038cc  00000000  00000000  001d4838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800856c 	.word	0x0800856c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800856c 	.word	0x0800856c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005e0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <SCB_EnableICache+0x3c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <SCB_EnableICache+0x3c>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <SCB_EnableICache+0x3c>)
 80005fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000600:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000604:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000620:	2200      	movs	r2, #0
 8000622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000626:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <SCB_EnableDCache+0x7c>)
 800062c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000630:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	0b5b      	lsrs	r3, r3, #13
 8000636:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800063a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	08db      	lsrs	r3, r3, #3
 8000640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000644:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	015a      	lsls	r2, r3, #5
 800064a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800064e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000654:	490f      	ldr	r1, [pc, #60]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000656:	4313      	orrs	r3, r2
 8000658:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	1e5a      	subs	r2, r3, #1
 8000660:	60ba      	str	r2, [r7, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ef      	bne.n	8000646 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1e5      	bne.n	800063c <SCB_EnableDCache+0x24>
 8000670:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <SCB_EnableDCache+0x7c>)
 800067a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067e:	6153      	str	r3, [r2, #20]
 8000680:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000684:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_I2C_MasterTxCpltCallback>:
/*
 * Output a message when I2C interrupt is triggered.
 */

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);    // turn on BLUE LED.
 80006a0:	2201      	movs	r2, #1
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	4806      	ldr	r0, [pc, #24]	; (80006c0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80006a6:	f001 f9e1 	bl	8001a6c <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart3, complete_message, sizeof(complete_message), -1);
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ae:	2211      	movs	r2, #17
 80006b0:	4904      	ldr	r1, [pc, #16]	; (80006c4 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_I2C_MasterTxCpltCallback+0x30>)
 80006b4:	f005 fa90 	bl	8005bd8 <HAL_UART_Transmit>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	58020400 	.word	0x58020400
 80006c4:	080085a4 	.word	0x080085a4
 80006c8:	2400002c 	.word	0x2400002c

080006cc <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);    // turn on RED LED.
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006da:	4807      	ldr	r0, [pc, #28]	; (80006f8 <HAL_I2C_ErrorCallback+0x2c>)
 80006dc:	f001 f9c6 	bl	8001a6c <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart3, error_message, sizeof(error_message), -1);
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e4:	220b      	movs	r2, #11
 80006e6:	4905      	ldr	r1, [pc, #20]	; (80006fc <HAL_I2C_ErrorCallback+0x30>)
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <HAL_I2C_ErrorCallback+0x34>)
 80006ea:	f005 fa75 	bl	8005bd8 <HAL_UART_Transmit>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	58020400 	.word	0x58020400
 80006fc:	080085b8 	.word	0x080085b8
 8000700:	2400002c 	.word	0x2400002c

08000704 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */

    /* Enable I-Cache---------------------------------------------------------*/
    SCB_EnableICache();
 8000708:	f7ff ff66 	bl	80005d8 <SCB_EnableICache>

    /* Enable D-Cache---------------------------------------------------------*/
    SCB_EnableDCache();
 800070c:	f7ff ff84 	bl	8000618 <SCB_EnableDCache>

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000710:	f000 fbfc 	bl	8000f0c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000714:	f000 f81c 	bl	8000750 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000718:	f000 f95a 	bl	80009d0 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 800071c:	f000 f90c 	bl	8000938 <MX_USART3_UART_Init>
    MX_I2C1_Init();
 8000720:	f000 f8ca 	bl	80008b8 <MX_I2C1_Init>
     *
     * If the I2C bus is correctly pulled up, the address phase to the "vacant" address
     * is interpreted as NAK response immediately. This is specification of the I2C bus.
     */

    HAL_I2C_Master_Transmit_IT(
 8000724:	2300      	movs	r3, #0
 8000726:	4a06      	ldr	r2, [pc, #24]	; (8000740 <main+0x3c>)
 8000728:	2102      	movs	r1, #2
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <main+0x40>)
 800072c:	f001 fa48 	bl	8001bc0 <HAL_I2C_Master_Transmit_IT>
                               0x02,
                               buf,
                               0);

    // Send a message to console, right after the transmission.
    HAL_UART_Transmit(&huart3, start_message, sizeof(start_message), -1);
 8000730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000734:	220e      	movs	r2, #14
 8000736:	4904      	ldr	r1, [pc, #16]	; (8000748 <main+0x44>)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <main+0x48>)
 800073a:	f005 fa4d 	bl	8005bd8 <HAL_UART_Transmit>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 800073e:	e7fe      	b.n	800073e <main+0x3a>
 8000740:	24000104 	.word	0x24000104
 8000744:	240000b8 	.word	0x240000b8
 8000748:	08008594 	.word	0x08008594
 800074c:	2400002c 	.word	0x2400002c

08000750 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0cc      	sub	sp, #304	; 0x130
 8000754:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000756:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800075a:	224c      	movs	r2, #76	; 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f007 fefc 	bl	800855c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000764:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000768:	2220      	movs	r2, #32
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f007 fef5 	bl	800855c <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4618      	mov	r0, r3
 8000778:	23bc      	movs	r3, #188	; 0xbc
 800077a:	461a      	mov	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	f007 feed 	bl	800855c <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000782:	2002      	movs	r0, #2
 8000784:	f002 ff52 	bl	800362c <HAL_PWREx_ConfigSupply>
    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <SystemClock_Config+0x160>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a47      	ldr	r2, [pc, #284]	; (80008b0 <SystemClock_Config+0x160>)
 8000794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b45      	ldr	r3, [pc, #276]	; (80008b0 <SystemClock_Config+0x160>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <SystemClock_Config+0x164>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	4a42      	ldr	r2, [pc, #264]	; (80008b4 <SystemClock_Config+0x164>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007b2:	4b40      	ldr	r3, [pc, #256]	; (80008b4 <SystemClock_Config+0x164>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b6:	f003 0201 	and.w	r2, r3, #1
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	681b      	ldr	r3, [r3, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80007c2:	bf00      	nop
 80007c4:	4b3a      	ldr	r3, [pc, #232]	; (80008b0 <SystemClock_Config+0x160>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007d0:	d1f8      	bne.n	80007c4 <SystemClock_Config+0x74>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d2:	2301      	movs	r3, #1
 80007d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    RCC_OscInitStruct.PLL.PLLM = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    RCC_OscInitStruct.PLL.PLLN = 120;
 80007f2:	2378      	movs	r3, #120	; 0x78
 80007f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    RCC_OscInitStruct.PLL.PLLP = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fe:	2304      	movs	r3, #4
 8000800:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800080a:	230c      	movs	r3, #12
 800080c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000820:	4618      	mov	r0, r3
 8000822:	f002 ff3d 	bl	80036a0 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xe0>
            {
        Error_Handler();
 800082c:	f000 f9da 	bl	8000be4 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000830:	233f      	movs	r3, #63	; 0x3f
 8000832:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2
            | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2303      	movs	r3, #3
 8000838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000842:	2308      	movs	r3, #8
 8000844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800085c:	2340      	movs	r3, #64	; 0x40
 800085e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000862:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000866:	2104      	movs	r1, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f003 faf1 	bl	8003e50 <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x128>
            {
        Error_Handler();
 8000874:	f000 f9b6 	bl	8000be4 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1;
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	220a      	movs	r2, #10
 800087e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	2200      	movs	r2, #0
 8000886:	675a      	str	r2, [r3, #116]	; 0x74
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2200      	movs	r2, #0
 800088e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4618      	mov	r0, r3
 8000898:	f003 fe5e 	bl	8004558 <HAL_RCCEx_PeriphCLKConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x156>
            {
        Error_Handler();
 80008a2:	f000 f99f 	bl	8000be4 <Error_Handler>
    }
}
 80008a6:	bf00      	nop
 80008a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58024800 	.word	0x58024800
 80008b4:	58000400 	.word	0x58000400

080008b8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_I2C1_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_I2C1_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x307075B1;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_I2C1_Init+0x74>)
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <MX_I2C1_Init+0x7c>)
 80008c6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_I2C1_Init+0x74>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_I2C1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <MX_I2C1_Init+0x74>)
 80008f4:	f001 f8d4 	bl	8001aa0 <HAL_I2C_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x4a>
            {
        Error_Handler();
 80008fe:	f000 f971 	bl	8000be4 <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_I2C1_Init+0x74>)
 8000906:	f002 fdf9 	bl	80034fc <HAL_I2CEx_ConfigAnalogFilter>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C1_Init+0x5c>
            {
        Error_Handler();
 8000910:	f000 f968 	bl	8000be4 <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_I2C1_Init+0x74>)
 8000918:	f002 fe3b 	bl	8003592 <HAL_I2CEx_ConfigDigitalFilter>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_I2C1_Init+0x6e>
            {
        Error_Handler();
 8000922:	f000 f95f 	bl	8000be4 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	240000b8 	.word	0x240000b8
 8000930:	40005400 	.word	0x40005400
 8000934:	307075b1 	.word	0x307075b1

08000938 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 800093e:	4a23      	ldr	r2, [pc, #140]	; (80009cc <MX_USART3_UART_Init+0x94>)
 8000940:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK)
 8000980:	4811      	ldr	r0, [pc, #68]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000982:	f005 f8d9 	bl	8005b38 <HAL_UART_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART3_UART_Init+0x58>
            {
        Error_Handler();
 800098c:	f000 f92a 	bl	8000be4 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000994:	f007 fcd9 	bl	800834a <HAL_UARTEx_SetTxFifoThreshold>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART3_UART_Init+0x6a>
            {
        Error_Handler();
 800099e:	f000 f921 	bl	8000be4 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 80009a6:	f007 fd0e 	bl	80083c6 <HAL_UARTEx_SetRxFifoThreshold>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART3_UART_Init+0x7c>
            {
        Error_Handler();
 80009b0:	f000 f918 	bl	8000be4 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 80009b6:	f007 fc8f 	bl	80082d8 <HAL_UARTEx_DisableFifoMode>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x8c>
            {
        Error_Handler();
 80009c0:	f000 f910 	bl	8000be4 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2400002c 	.word	0x2400002c
 80009cc:	40004800 	.word	0x40004800

080009d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b79      	ldr	r3, [pc, #484]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	4a77      	ldr	r2, [pc, #476]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f6:	4b75      	ldr	r3, [pc, #468]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a04:	4b71      	ldr	r3, [pc, #452]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	4a70      	ldr	r2, [pc, #448]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a14:	4b6d      	ldr	r3, [pc, #436]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b6a      	ldr	r3, [pc, #424]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	4a68      	ldr	r2, [pc, #416]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a32:	4b66      	ldr	r3, [pc, #408]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	4b62      	ldr	r3, [pc, #392]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a46:	4a61      	ldr	r2, [pc, #388]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a50:	4b5e      	ldr	r3, [pc, #376]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	4b5b      	ldr	r3, [pc, #364]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	4a59      	ldr	r2, [pc, #356]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6e:	4b57      	ldr	r3, [pc, #348]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	f003 0308 	and.w	r3, r3, #8
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7c:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	4a52      	ldr	r2, [pc, #328]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8c:	4b4f      	ldr	r3, [pc, #316]	; (8000bcc <MX_GPIO_Init+0x1fc>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000aa0:	484b      	ldr	r0, [pc, #300]	; (8000bd0 <MX_GPIO_Init+0x200>)
 8000aa2:	f000 ffe3 	bl	8001a6c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	484a      	ldr	r0, [pc, #296]	; (8000bd4 <MX_GPIO_Init+0x204>)
 8000aac:	f000 ffde 	bl	8001a6c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab6:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <MX_GPIO_Init+0x208>)
 8000ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4845      	ldr	r0, [pc, #276]	; (8000bdc <MX_GPIO_Init+0x20c>)
 8000ac6:	f000 fe21 	bl	800170c <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
    GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000aca:	2332      	movs	r3, #50	; 0x32
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ada:	230b      	movs	r3, #11
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	483d      	ldr	r0, [pc, #244]	; (8000bdc <MX_GPIO_Init+0x20c>)
 8000ae6:	f000 fe11 	bl	800170c <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8000aea:	2386      	movs	r3, #134	; 0x86
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000afa:	230b      	movs	r3, #11
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4836      	ldr	r0, [pc, #216]	; (8000be0 <MX_GPIO_Init+0x210>)
 8000b06:	f000 fe01 	bl	800170c <HAL_GPIO_Init>

    /*Configure GPIO pin : RMII_TXD1_Pin */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	482a      	ldr	r0, [pc, #168]	; (8000bd0 <MX_GPIO_Init+0x200>)
 8000b28:	f000 fdf0 	bl	800170c <HAL_GPIO_Init>

    /*Configure GPIO pins : LD3_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8000b2c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <MX_GPIO_Init+0x200>)
 8000b46:	f000 fde1 	bl	800170c <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b4a:	2340      	movs	r3, #64	; 0x40
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <MX_GPIO_Init+0x204>)
 8000b62:	f000 fdd3 	bl	800170c <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4816      	ldr	r0, [pc, #88]	; (8000bd4 <MX_GPIO_Init+0x204>)
 8000b7a:	f000 fdc7 	bl	800170c <HAL_GPIO_Init>

    /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
    GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8000b7e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b90:	230a      	movs	r3, #10
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_GPIO_Init+0x210>)
 8000b9c:	f000 fdb6 	bl	800170c <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000ba0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb2:	230b      	movs	r3, #11
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_GPIO_Init+0x204>)
 8000bbe:	f000 fda5 	bl	800170c <HAL_GPIO_Init>

}
 8000bc2:	bf00      	nop
 8000bc4:	3730      	adds	r7, #48	; 0x30
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58020400 	.word	0x58020400
 8000bd4:	58021800 	.word	0x58021800
 8000bd8:	11110000 	.word	0x11110000
 8000bdc:	58020800 	.word	0x58020800
 8000be0:	58020000 	.word	0x58020000

08000be4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_MspInit+0x30>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c00:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x30>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x30>)
 8000c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	58024400 	.word	0x58024400

08000c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <HAL_I2C_MspInit+0xa8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d13e      	bne.n	8000cc8 <HAL_I2C_MspInit+0xa0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <HAL_I2C_MspInit+0xac>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <HAL_I2C_MspInit+0xac>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_I2C_MspInit+0xac>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <HAL_I2C_MspInit+0xb0>)
 8000c86:	f000 fd41 	bl	800170c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_I2C_MspInit+0xac>)
 8000c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c90:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_I2C_MspInit+0xac>)
 8000c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_I2C_MspInit+0xac>)
 8000c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	201f      	movs	r0, #31
 8000cae:	f000 faa6 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cb2:	201f      	movs	r0, #31
 8000cb4:	f000 fabd 	bl	8001232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2020      	movs	r0, #32
 8000cbe:	f000 fa9e 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cc2:	2020      	movs	r0, #32
 8000cc4:	f000 fab5 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	58020400 	.word	0x58020400

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12e      	bne.n	8000d5c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d04:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_UART_MspInit+0x90>)
 8000d58:	f000 fcd8 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40004800 	.word	0x40004800
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020c00 	.word	0x58020c00

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f914 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <I2C1_EV_IRQHandler+0x10>)
 8000dd2:	f000 ff65 	bl	8001ca0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	240000b8 	.word	0x240000b8

08000de0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <I2C1_ER_IRQHandler+0x10>)
 8000de6:	f000 ff75 	bl	8001cd4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	240000b8 	.word	0x240000b8

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000df8:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <SystemInit+0xac>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a28      	ldr	r2, [pc, #160]	; (8000ea0 <SystemInit+0xac>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <SystemInit+0xb0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <SystemInit+0xb0>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <SystemInit+0xb0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e1a:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <SystemInit+0xb0>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4921      	ldr	r1, [pc, #132]	; (8000ea4 <SystemInit+0xb0>)
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <SystemInit+0xb4>)
 8000e22:	4013      	ands	r3, r2
 8000e24:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <SystemInit+0xb0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <SystemInit+0xb0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <SystemInit+0xb0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <SystemInit+0xb0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <SystemInit+0xb0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <SystemInit+0xb0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <SystemInit+0xb0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <SystemInit+0xb0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <SystemInit+0xb0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <SystemInit+0xb0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <SystemInit+0xb0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <SystemInit+0xb0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <SystemInit+0xb0>)
 8000e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <SystemInit+0xb0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <SystemInit+0xb8>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <SystemInit+0xbc>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e86:	d202      	bcs.n	8000e8e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <SystemInit+0xc0>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SystemInit+0xac>)
 8000e90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e94:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000eac:	5c001000 	.word	0x5c001000
 8000eb0:	ffff0000 	.word	0xffff0000
 8000eb4:	51008108 	.word	0x51008108

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ebe:	e003      	b.n	8000ec8 <LoopCopyDataInit>

08000ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ec6:	3104      	adds	r1, #4

08000ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ed0:	d3f6      	bcc.n	8000ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ed4:	e002      	b.n	8000edc <LoopFillZerobss>

08000ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ed8:	f842 3b04 	str.w	r3, [r2], #4

08000edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ee0:	d3f9      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff ff87 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f007 fb15 	bl	8008514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fc0b 	bl	8000704 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000ef4:	080085e4 	.word	0x080085e4
  ldr  r0, =_sdata
 8000ef8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000efc:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000f00:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000f04:	2400010c 	.word	0x2400010c

08000f08 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC3_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
 8000f14:	f000 f968 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f18:	f003 f950 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 8000f1c:	4601      	mov	r1, r0
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_Init+0x68>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_Init+0x6c>)
 8000f2a:	5cd3      	ldrb	r3, [r2, r3]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	fa21 f303 	lsr.w	r3, r1, r3
 8000f34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_Init+0x68>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_Init+0x6c>)
 8000f40:	5cd3      	ldrb	r3, [r2, r3]
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_Init+0x70>)
 8000f4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <HAL_Init+0x74>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f814 	bl	8000f84 <HAL_InitTick>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e002      	b.n	8000f6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f66:	f7ff fe45 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	58024400 	.word	0x58024400
 8000f78:	080085c4 	.word	0x080085c4
 8000f7c:	24000004 	.word	0x24000004
 8000f80:	24000000 	.word	0x24000000

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_InitTick+0x60>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e021      	b.n	8000fdc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_InitTick+0x64>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_InitTick+0x60>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f94d 	bl	800124e <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f000 f917 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x68>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2400000c 	.word	0x2400000c
 8000fe8:	24000000 	.word	0x24000000
 8000fec:	24000008 	.word	0x24000008

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2400000c 	.word	0x2400000c
 8001014:	24000108 	.word	0x24000108

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	24000108 	.word	0x24000108

08001030 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetREVID+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	0c1b      	lsrs	r3, r3, #16
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	5c001000 	.word	0x5c001000

08001048 <__NVIC_SetPriorityGrouping>:
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <__NVIC_SetPriorityGrouping+0x40>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	4313      	orrs	r3, r2
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x40>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	05fa0000 	.word	0x05fa0000

08001090 <__NVIC_GetPriorityGrouping>:
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff40 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff90 	bl	800113c <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5f 	bl	80010e8 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff33 	bl	80010ac <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffa4 	bl	80011a4 <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e205      	b.n	8001686 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d004      	beq.n	8001290 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e1fa      	b.n	8001686 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a8c      	ldr	r2, [pc, #560]	; (80014c8 <HAL_DMA_Abort_IT+0x260>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d04a      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a8b      	ldr	r2, [pc, #556]	; (80014cc <HAL_DMA_Abort_IT+0x264>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d045      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a89      	ldr	r2, [pc, #548]	; (80014d0 <HAL_DMA_Abort_IT+0x268>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d040      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a88      	ldr	r2, [pc, #544]	; (80014d4 <HAL_DMA_Abort_IT+0x26c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d03b      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a86      	ldr	r2, [pc, #536]	; (80014d8 <HAL_DMA_Abort_IT+0x270>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d036      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a85      	ldr	r2, [pc, #532]	; (80014dc <HAL_DMA_Abort_IT+0x274>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d031      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a83      	ldr	r2, [pc, #524]	; (80014e0 <HAL_DMA_Abort_IT+0x278>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d02c      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a82      	ldr	r2, [pc, #520]	; (80014e4 <HAL_DMA_Abort_IT+0x27c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d027      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a80      	ldr	r2, [pc, #512]	; (80014e8 <HAL_DMA_Abort_IT+0x280>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d022      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a7f      	ldr	r2, [pc, #508]	; (80014ec <HAL_DMA_Abort_IT+0x284>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d01d      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a7d      	ldr	r2, [pc, #500]	; (80014f0 <HAL_DMA_Abort_IT+0x288>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d018      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7c      	ldr	r2, [pc, #496]	; (80014f4 <HAL_DMA_Abort_IT+0x28c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d013      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a7a      	ldr	r2, [pc, #488]	; (80014f8 <HAL_DMA_Abort_IT+0x290>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00e      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a79      	ldr	r2, [pc, #484]	; (80014fc <HAL_DMA_Abort_IT+0x294>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d009      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a77      	ldr	r2, [pc, #476]	; (8001500 <HAL_DMA_Abort_IT+0x298>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d004      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a76      	ldr	r2, [pc, #472]	; (8001504 <HAL_DMA_Abort_IT+0x29c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <HAL_DMA_Abort_IT+0xcc>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_DMA_Abort_IT+0xce>
 8001334:	2300      	movs	r3, #0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d065      	beq.n	8001406 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2204      	movs	r2, #4
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a60      	ldr	r2, [pc, #384]	; (80014c8 <HAL_DMA_Abort_IT+0x260>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d04a      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a5e      	ldr	r2, [pc, #376]	; (80014cc <HAL_DMA_Abort_IT+0x264>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d045      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5d      	ldr	r2, [pc, #372]	; (80014d0 <HAL_DMA_Abort_IT+0x268>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d040      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a5b      	ldr	r2, [pc, #364]	; (80014d4 <HAL_DMA_Abort_IT+0x26c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d03b      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a5a      	ldr	r2, [pc, #360]	; (80014d8 <HAL_DMA_Abort_IT+0x270>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d036      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a58      	ldr	r2, [pc, #352]	; (80014dc <HAL_DMA_Abort_IT+0x274>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d031      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_DMA_Abort_IT+0x278>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d02c      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a55      	ldr	r2, [pc, #340]	; (80014e4 <HAL_DMA_Abort_IT+0x27c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d027      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a54      	ldr	r2, [pc, #336]	; (80014e8 <HAL_DMA_Abort_IT+0x280>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d022      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_DMA_Abort_IT+0x284>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01d      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <HAL_DMA_Abort_IT+0x288>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d018      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <HAL_DMA_Abort_IT+0x28c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a4e      	ldr	r2, [pc, #312]	; (80014f8 <HAL_DMA_Abort_IT+0x290>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d00e      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_DMA_Abort_IT+0x294>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d009      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_DMA_Abort_IT+0x298>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d004      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x17a>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a49      	ldr	r2, [pc, #292]	; (8001504 <HAL_DMA_Abort_IT+0x29c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d108      	bne.n	80013f4 <HAL_DMA_Abort_IT+0x18c>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e147      	b.n	8001684 <HAL_DMA_Abort_IT+0x41c>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e13e      	b.n	8001684 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 020e 	bic.w	r2, r2, #14
 8001414:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <HAL_DMA_Abort_IT+0x260>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d04a      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a29      	ldr	r2, [pc, #164]	; (80014cc <HAL_DMA_Abort_IT+0x264>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d045      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <HAL_DMA_Abort_IT+0x268>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d040      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <HAL_DMA_Abort_IT+0x26c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d03b      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a25      	ldr	r2, [pc, #148]	; (80014d8 <HAL_DMA_Abort_IT+0x270>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d036      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a23      	ldr	r2, [pc, #140]	; (80014dc <HAL_DMA_Abort_IT+0x274>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d031      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <HAL_DMA_Abort_IT+0x278>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d02c      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <HAL_DMA_Abort_IT+0x27c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d027      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <HAL_DMA_Abort_IT+0x280>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d022      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_DMA_Abort_IT+0x284>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d01d      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <HAL_DMA_Abort_IT+0x288>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d018      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <HAL_DMA_Abort_IT+0x28c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_DMA_Abort_IT+0x290>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00e      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_DMA_Abort_IT+0x294>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d009      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a16      	ldr	r2, [pc, #88]	; (8001500 <HAL_DMA_Abort_IT+0x298>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d004      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x24e>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_DMA_Abort_IT+0x29c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d128      	bne.n	8001508 <HAL_DMA_Abort_IT+0x2a0>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e027      	b.n	8001518 <HAL_DMA_Abort_IT+0x2b0>
 80014c8:	40020010 	.word	0x40020010
 80014cc:	40020028 	.word	0x40020028
 80014d0:	40020040 	.word	0x40020040
 80014d4:	40020058 	.word	0x40020058
 80014d8:	40020070 	.word	0x40020070
 80014dc:	40020088 	.word	0x40020088
 80014e0:	400200a0 	.word	0x400200a0
 80014e4:	400200b8 	.word	0x400200b8
 80014e8:	40020410 	.word	0x40020410
 80014ec:	40020428 	.word	0x40020428
 80014f0:	40020440 	.word	0x40020440
 80014f4:	40020458 	.word	0x40020458
 80014f8:	40020470 	.word	0x40020470
 80014fc:	40020488 	.word	0x40020488
 8001500:	400204a0 	.word	0x400204a0
 8001504:	400204b8 	.word	0x400204b8
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a5c      	ldr	r2, [pc, #368]	; (8001690 <HAL_DMA_Abort_IT+0x428>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d072      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a5b      	ldr	r2, [pc, #364]	; (8001694 <HAL_DMA_Abort_IT+0x42c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d06d      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a59      	ldr	r2, [pc, #356]	; (8001698 <HAL_DMA_Abort_IT+0x430>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d068      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_DMA_Abort_IT+0x434>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d063      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a56      	ldr	r2, [pc, #344]	; (80016a0 <HAL_DMA_Abort_IT+0x438>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d05e      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a55      	ldr	r2, [pc, #340]	; (80016a4 <HAL_DMA_Abort_IT+0x43c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d059      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a53      	ldr	r2, [pc, #332]	; (80016a8 <HAL_DMA_Abort_IT+0x440>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d054      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_DMA_Abort_IT+0x444>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d04f      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a50      	ldr	r2, [pc, #320]	; (80016b0 <HAL_DMA_Abort_IT+0x448>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d04a      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <HAL_DMA_Abort_IT+0x44c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d045      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a4d      	ldr	r2, [pc, #308]	; (80016b8 <HAL_DMA_Abort_IT+0x450>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d040      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a4c      	ldr	r2, [pc, #304]	; (80016bc <HAL_DMA_Abort_IT+0x454>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d03b      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a4a      	ldr	r2, [pc, #296]	; (80016c0 <HAL_DMA_Abort_IT+0x458>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d036      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a49      	ldr	r2, [pc, #292]	; (80016c4 <HAL_DMA_Abort_IT+0x45c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d031      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a47      	ldr	r2, [pc, #284]	; (80016c8 <HAL_DMA_Abort_IT+0x460>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d02c      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a46      	ldr	r2, [pc, #280]	; (80016cc <HAL_DMA_Abort_IT+0x464>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d027      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a44      	ldr	r2, [pc, #272]	; (80016d0 <HAL_DMA_Abort_IT+0x468>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d022      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a43      	ldr	r2, [pc, #268]	; (80016d4 <HAL_DMA_Abort_IT+0x46c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d01d      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a41      	ldr	r2, [pc, #260]	; (80016d8 <HAL_DMA_Abort_IT+0x470>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d018      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a40      	ldr	r2, [pc, #256]	; (80016dc <HAL_DMA_Abort_IT+0x474>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d013      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a3e      	ldr	r2, [pc, #248]	; (80016e0 <HAL_DMA_Abort_IT+0x478>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00e      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a3d      	ldr	r2, [pc, #244]	; (80016e4 <HAL_DMA_Abort_IT+0x47c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d009      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <HAL_DMA_Abort_IT+0x480>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d004      	beq.n	8001608 <HAL_DMA_Abort_IT+0x3a0>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a3a      	ldr	r2, [pc, #232]	; (80016ec <HAL_DMA_Abort_IT+0x484>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_DMA_Abort_IT+0x3a4>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <HAL_DMA_Abort_IT+0x3a6>
 800160c:	2300      	movs	r3, #0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d028      	beq.n	8001664 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001620:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2201      	movs	r2, #1
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001640:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00c      	beq.n	8001664 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001658:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001662:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020010 	.word	0x40020010
 8001694:	40020028 	.word	0x40020028
 8001698:	40020040 	.word	0x40020040
 800169c:	40020058 	.word	0x40020058
 80016a0:	40020070 	.word	0x40020070
 80016a4:	40020088 	.word	0x40020088
 80016a8:	400200a0 	.word	0x400200a0
 80016ac:	400200b8 	.word	0x400200b8
 80016b0:	40020410 	.word	0x40020410
 80016b4:	40020428 	.word	0x40020428
 80016b8:	40020440 	.word	0x40020440
 80016bc:	40020458 	.word	0x40020458
 80016c0:	40020470 	.word	0x40020470
 80016c4:	40020488 	.word	0x40020488
 80016c8:	400204a0 	.word	0x400204a0
 80016cc:	400204b8 	.word	0x400204b8
 80016d0:	58025408 	.word	0x58025408
 80016d4:	5802541c 	.word	0x5802541c
 80016d8:	58025430 	.word	0x58025430
 80016dc:	58025444 	.word	0x58025444
 80016e0:	58025458 	.word	0x58025458
 80016e4:	5802546c 	.word	0x5802546c
 80016e8:	58025480 	.word	0x58025480
 80016ec:	58025494 	.word	0x58025494

080016f0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016fe:	b2db      	uxtb	r3, r3
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800171a:	4b89      	ldr	r3, [pc, #548]	; (8001940 <HAL_GPIO_Init+0x234>)
 800171c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800171e:	e194      	b.n	8001a4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8186 	beq.w	8001a44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d00b      	beq.n	8001758 <HAL_GPIO_Init+0x4c>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d007      	beq.n	8001758 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800174c:	2b11      	cmp	r3, #17
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b12      	cmp	r3, #18
 8001756:	d130      	bne.n	80017ba <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800178e:	2201      	movs	r2, #1
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	f003 0201 	and.w	r2, r3, #1
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0xee>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d123      	bne.n	8001842 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	69b9      	ldr	r1, [r7, #24]
 800183e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0203 	and.w	r2, r3, #3
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80e0 	beq.w	8001a44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001884:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <HAL_GPIO_Init+0x238>)
 8001886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800188a:	4a2e      	ldr	r2, [pc, #184]	; (8001944 <HAL_GPIO_Init+0x238>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_GPIO_Init+0x238>)
 8001896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a2:	4a29      	ldr	r2, [pc, #164]	; (8001948 <HAL_GPIO_Init+0x23c>)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a20      	ldr	r2, [pc, #128]	; (800194c <HAL_GPIO_Init+0x240>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d052      	beq.n	8001974 <HAL_GPIO_Init+0x268>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <HAL_GPIO_Init+0x244>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d031      	beq.n	800193a <HAL_GPIO_Init+0x22e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <HAL_GPIO_Init+0x248>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d02b      	beq.n	8001936 <HAL_GPIO_Init+0x22a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_GPIO_Init+0x24c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x226>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a1c      	ldr	r2, [pc, #112]	; (800195c <HAL_GPIO_Init+0x250>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x222>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <HAL_GPIO_Init+0x254>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x21e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_GPIO_Init+0x258>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a19      	ldr	r2, [pc, #100]	; (8001968 <HAL_GPIO_Init+0x25c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x216>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a18      	ldr	r2, [pc, #96]	; (800196c <HAL_GPIO_Init+0x260>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x212>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <HAL_GPIO_Init+0x264>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x20e>
 8001916:	2309      	movs	r3, #9
 8001918:	e02d      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800191a:	230a      	movs	r3, #10
 800191c:	e02b      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800191e:	2308      	movs	r3, #8
 8001920:	e029      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 8001922:	2307      	movs	r3, #7
 8001924:	e027      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 8001926:	2306      	movs	r3, #6
 8001928:	e025      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800192a:	2305      	movs	r3, #5
 800192c:	e023      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800192e:	2304      	movs	r3, #4
 8001930:	e021      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 8001932:	2303      	movs	r3, #3
 8001934:	e01f      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 8001936:	2302      	movs	r3, #2
 8001938:	e01d      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800193a:	2301      	movs	r3, #1
 800193c:	e01b      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800193e:	bf00      	nop
 8001940:	58000080 	.word	0x58000080
 8001944:	58024400 	.word	0x58024400
 8001948:	58000400 	.word	0x58000400
 800194c:	58020000 	.word	0x58020000
 8001950:	58020400 	.word	0x58020400
 8001954:	58020800 	.word	0x58020800
 8001958:	58020c00 	.word	0x58020c00
 800195c:	58021000 	.word	0x58021000
 8001960:	58021400 	.word	0x58021400
 8001964:	58021800 	.word	0x58021800
 8001968:	58021c00 	.word	0x58021c00
 800196c:	58022000 	.word	0x58022000
 8001970:	58022400 	.word	0x58022400
 8001974:	2300      	movs	r3, #0
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001986:	4938      	ldr	r1, [pc, #224]	; (8001a68 <HAL_GPIO_Init+0x35c>)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f47f ae63 	bne.w	8001720 <HAL_GPIO_Init+0x14>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	58000400 	.word	0x58000400

08001a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a88:	e003      	b.n	8001a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	041a      	lsls	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	619a      	str	r2, [r3, #24]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e07f      	b.n	8001bb2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff f8ae 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2224      	movs	r2, #36	; 0x24
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e006      	b.n	8001b28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d104      	bne.n	8001b3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_I2C_Init+0x11c>)
 8001b46:	430b      	orrs	r3, r1
 8001b48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	ea42 0103 	orr.w	r1, r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	021a      	lsls	r2, r3, #8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69d9      	ldr	r1, [r3, #28]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1a      	ldr	r2, [r3, #32]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	02008000 	.word	0x02008000

08001bc0 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	460b      	mov	r3, r1
 8001bce:	817b      	strh	r3, [r7, #10]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d153      	bne.n	8001c88 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bee:	d101      	bne.n	8001bf4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e04a      	b.n	8001c8a <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_I2C_Master_Transmit_IT+0x42>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e043      	b.n	8001c8a <HAL_I2C_Master_Transmit_IT+0xca>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2221      	movs	r2, #33	; 0x21
 8001c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2210      	movs	r2, #16
 8001c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	893a      	ldrh	r2, [r7, #8]
 8001c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4a18      	ldr	r2, [pc, #96]	; (8001c98 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2bff      	cmp	r3, #255	; 0xff
 8001c40:	d906      	bls.n	8001c50 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	22ff      	movs	r2, #255	; 0xff
 8001c46:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e007      	b.n	8001c60 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	8979      	ldrh	r1, [r7, #10]
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_I2C_Master_Transmit_IT+0xdc>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f001 fb54 	bl	800331c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f001 fb7a 	bl	8003378 <I2C_Enable_IRQ>

    return HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e000      	b.n	8001c8a <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001c88:	2302      	movs	r3, #2
  }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	ffff0000 	.word	0xffff0000
 8001c98:	08001e3f 	.word	0x08001e3f
 8001c9c:	80002000 	.word	0x80002000

08001ca0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d010      	beq.n	8001d1a <HAL_I2C_ER_IRQHandler+0x46>
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	09db      	lsrs	r3, r3, #7
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d18:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	0a9b      	lsrs	r3, r3, #10
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d010      	beq.n	8001d48 <HAL_I2C_ER_IRQHandler+0x74>
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	09db      	lsrs	r3, r3, #7
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f043 0208 	orr.w	r2, r3, #8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d46:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	0a5b      	lsrs	r3, r3, #9
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d010      	beq.n	8001d76 <HAL_I2C_ER_IRQHandler+0xa2>
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	09db      	lsrs	r3, r3, #7
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d64:	f043 0202 	orr.w	r2, r3, #2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d74:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 030b 	and.w	r3, r3, #11
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001d86:	68f9      	ldr	r1, [r7, #12]
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f001 f98d 	bl	80030a8 <I2C_ITError>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
 8001dde:	4613      	mov	r3, r2
 8001de0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b088      	sub	sp, #32
 8001e42:	af02      	add	r7, sp, #8
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <I2C_Master_ISR_IT+0x1e>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e115      	b.n	8002088 <I2C_Master_ISR_IT+0x24a>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <I2C_Master_ISR_IT+0x5a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00d      	beq.n	8001e98 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2210      	movs	r2, #16
 8001e82:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	f043 0204 	orr.w	r2, r3, #4
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f001 fa00 	bl	8003296 <I2C_Flush_TXDR>
 8001e96:	e0e2      	b.n	800205e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d023      	beq.n	8001eec <I2C_Master_ISR_IT+0xae>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01d      	beq.n	8001eec <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f023 0304 	bic.w	r3, r3, #4
 8001eb6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eea:	e0b8      	b.n	800205e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01e      	beq.n	8001f36 <I2C_Master_ISR_IT+0xf8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d018      	beq.n	8001f36 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f34:	e093      	b.n	800205e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	09db      	lsrs	r3, r3, #7
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d05e      	beq.n	8002000 <I2C_Master_ISR_IT+0x1c2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d058      	beq.n	8002000 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d041      	beq.n	8001fdc <I2C_Master_ISR_IT+0x19e>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d13d      	bne.n	8001fdc <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2bff      	cmp	r3, #255	; 0xff
 8001f76:	d90e      	bls.n	8001f96 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	8a79      	ldrh	r1, [r7, #18]
 8001f86:	2300      	movs	r3, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f001 f9c4 	bl	800331c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f94:	e033      	b.n	8001ffe <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fa8:	d00c      	beq.n	8001fc4 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001fb4:	8a79      	ldrh	r1, [r7, #18]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	4603      	mov	r3, r0
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f001 f9ad 	bl	800331c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fc2:	e01c      	b.n	8001ffe <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	8a79      	ldrh	r1, [r7, #18]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f001 f9a1 	bl	800331c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fda:	e010      	b.n	8001ffe <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fea:	d003      	beq.n	8001ff4 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 fca9 	bl	8002944 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ff2:	e034      	b.n	800205e <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ff4:	2140      	movs	r1, #64	; 0x40
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f001 f856 	bl	80030a8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ffc:	e02f      	b.n	800205e <I2C_Master_ISR_IT+0x220>
 8001ffe:	e02e      	b.n	800205e <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	099b      	lsrs	r3, r3, #6
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d028      	beq.n	800205e <I2C_Master_ISR_IT+0x220>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d022      	beq.n	800205e <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d119      	bne.n	8002056 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002030:	d015      	beq.n	800205e <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800203a:	d108      	bne.n	800204e <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	e007      	b.n	800205e <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fc78 	bl	8002944 <I2C_ITMasterSeqCplt>
 8002054:	e003      	b.n	800205e <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002056:	2140      	movs	r1, #64	; 0x40
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f001 f825 	bl	80030a8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <I2C_Master_ISR_IT+0x240>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002076:	6979      	ldr	r1, [r7, #20]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 fcff 	bl	8002a7c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <I2C_Slave_ISR_IT+0x24>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e0ec      	b.n	800228e <I2C_Slave_ISR_IT+0x1fe>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <I2C_Slave_ISR_IT+0x4c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80020d4:	6939      	ldr	r1, [r7, #16]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fd98 	bl	8002c0c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d04d      	beq.n	8002184 <I2C_Slave_ISR_IT+0xf4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d047      	beq.n	8002184 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d128      	bne.n	8002150 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b28      	cmp	r3, #40	; 0x28
 8002108:	d108      	bne.n	800211c <I2C_Slave_ISR_IT+0x8c>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002110:	d104      	bne.n	800211c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002112:	6939      	ldr	r1, [r7, #16]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 ff71 	bl	8002ffc <I2C_ITListenCplt>
 800211a:	e032      	b.n	8002182 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b29      	cmp	r3, #41	; 0x29
 8002126:	d10e      	bne.n	8002146 <I2C_Slave_ISR_IT+0xb6>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800212e:	d00a      	beq.n	8002146 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2210      	movs	r2, #16
 8002136:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f001 f8ac 	bl	8003296 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fc3d 	bl	80029be <I2C_ITSlaveSeqCplt>
 8002144:	e01d      	b.n	8002182 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2210      	movs	r2, #16
 800214c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800214e:	e096      	b.n	800227e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2210      	movs	r2, #16
 8002156:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f043 0204 	orr.w	r2, r3, #4
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <I2C_Slave_ISR_IT+0xe4>
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002170:	f040 8085 	bne.w	800227e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	4619      	mov	r1, r3
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 ff94 	bl	80030a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002180:	e07d      	b.n	800227e <I2C_Slave_ISR_IT+0x1ee>
 8002182:	e07c      	b.n	800227e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d030      	beq.n	80021f2 <I2C_Slave_ISR_IT+0x162>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d02a      	beq.n	80021f2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d018      	beq.n	80021d8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d14f      	bne.n	8002282 <I2C_Slave_ISR_IT+0x1f2>
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021e8:	d04b      	beq.n	8002282 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fbe7 	bl	80029be <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80021f0:	e047      	b.n	8002282 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <I2C_Slave_ISR_IT+0x184>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800220a:	6939      	ldr	r1, [r7, #16]
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fb15 	bl	800283c <I2C_ITAddrCplt>
 8002212:	e037      	b.n	8002284 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	085b      	lsrs	r3, r3, #1
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d031      	beq.n	8002284 <I2C_Slave_ISR_IT+0x1f4>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d02b      	beq.n	8002284 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d018      	beq.n	8002268 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	851a      	strh	r2, [r3, #40]	; 0x28
 8002266:	e00d      	b.n	8002284 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226e:	d002      	beq.n	8002276 <I2C_Slave_ISR_IT+0x1e6>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fba1 	bl	80029be <I2C_ITSlaveSeqCplt>
 800227c:	e002      	b.n	8002284 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800227e:	bf00      	nop
 8002280:	e000      	b.n	8002284 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002282:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b088      	sub	sp, #32
 800229a:	af02      	add	r7, sp, #8
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <I2C_Master_ISR_DMA+0x1a>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e0e1      	b.n	8002474 <I2C_Master_ISR_DMA+0x1de>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d017      	beq.n	80022f4 <I2C_Master_ISR_DMA+0x5e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d011      	beq.n	80022f4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2210      	movs	r2, #16
 80022d6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	f043 0204 	orr.w	r2, r3, #4
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80022e4:	2120      	movs	r1, #32
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f001 f846 	bl	8003378 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 ffd2 	bl	8003296 <I2C_Flush_TXDR>
 80022f2:	e0ba      	b.n	800246a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	09db      	lsrs	r3, r3, #7
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d072      	beq.n	80023e6 <I2C_Master_ISR_DMA+0x150>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d06c      	beq.n	80023e6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800231a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d04e      	beq.n	80023c4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	b29b      	uxth	r3, r3
 800232e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002332:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d906      	bls.n	800234c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	22ff      	movs	r2, #255	; 0xff
 8002342:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e010      	b.n	800236e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800235e:	d003      	beq.n	8002368 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e002      	b.n	800236e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002368:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800236c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	b2da      	uxtb	r2, r3
 8002374:	8a79      	ldrh	r1, [r7, #18]
 8002376:	2300      	movs	r3, #0
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 ffcd 	bl	800331c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b22      	cmp	r3, #34	; 0x22
 800239e:	d108      	bne.n	80023b2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80023b0:	e05b      	b.n	800246a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80023c2:	e052      	b.n	800246a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023d2:	d003      	beq.n	80023dc <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fab5 	bl	8002944 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80023da:	e046      	b.n	800246a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80023dc:	2140      	movs	r1, #64	; 0x40
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fe62 	bl	80030a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80023e4:	e041      	b.n	800246a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d029      	beq.n	8002446 <I2C_Master_ISR_DMA+0x1b0>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	099b      	lsrs	r3, r3, #6
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d023      	beq.n	8002446 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d119      	bne.n	800243c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002416:	d027      	beq.n	8002468 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002420:	d108      	bne.n	8002434 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002430:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002432:	e019      	b.n	8002468 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fa85 	bl	8002944 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800243a:	e015      	b.n	8002468 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800243c:	2140      	movs	r1, #64	; 0x40
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fe32 	bl	80030a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002444:	e010      	b.n	8002468 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <I2C_Master_ISR_DMA+0x1d4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fb0b 	bl	8002a7c <I2C_ITMasterCplt>
 8002466:	e000      	b.n	800246a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002468:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <I2C_Slave_ISR_DMA+0x24>
 800249c:	2302      	movs	r3, #2
 800249e:	e1c8      	b.n	8002832 <I2C_Slave_ISR_DMA+0x3b6>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d009      	beq.n	80024c8 <I2C_Slave_ISR_DMA+0x4c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fba2 	bl	8002c0c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8199 	beq.w	8002808 <I2C_Slave_ISR_DMA+0x38c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8192 	beq.w	8002808 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0b9b      	lsrs	r3, r3, #14
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0bdb      	lsrs	r3, r3, #15
 80024f4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 817e 	beq.w	80027fa <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d07c      	beq.n	8002600 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0bdb      	lsrs	r3, r3, #15
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d076      	beq.n	8002600 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a8d      	ldr	r2, [pc, #564]	; (8002750 <I2C_Slave_ISR_DMA+0x2d4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d059      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a8b      	ldr	r2, [pc, #556]	; (8002754 <I2C_Slave_ISR_DMA+0x2d8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d053      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a89      	ldr	r2, [pc, #548]	; (8002758 <I2C_Slave_ISR_DMA+0x2dc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d04d      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a87      	ldr	r2, [pc, #540]	; (800275c <I2C_Slave_ISR_DMA+0x2e0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d047      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a85      	ldr	r2, [pc, #532]	; (8002760 <I2C_Slave_ISR_DMA+0x2e4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d041      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a83      	ldr	r2, [pc, #524]	; (8002764 <I2C_Slave_ISR_DMA+0x2e8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d03b      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a81      	ldr	r2, [pc, #516]	; (8002768 <I2C_Slave_ISR_DMA+0x2ec>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d035      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a7f      	ldr	r2, [pc, #508]	; (800276c <I2C_Slave_ISR_DMA+0x2f0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02f      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a7d      	ldr	r2, [pc, #500]	; (8002770 <I2C_Slave_ISR_DMA+0x2f4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d029      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a7b      	ldr	r2, [pc, #492]	; (8002774 <I2C_Slave_ISR_DMA+0x2f8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d023      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a79      	ldr	r2, [pc, #484]	; (8002778 <I2C_Slave_ISR_DMA+0x2fc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01d      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a77      	ldr	r2, [pc, #476]	; (800277c <I2C_Slave_ISR_DMA+0x300>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d017      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a75      	ldr	r2, [pc, #468]	; (8002780 <I2C_Slave_ISR_DMA+0x304>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d011      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a73      	ldr	r2, [pc, #460]	; (8002784 <I2C_Slave_ISR_DMA+0x308>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a71      	ldr	r2, [pc, #452]	; (8002788 <I2C_Slave_ISR_DMA+0x30c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d005      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x156>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6f      	ldr	r2, [pc, #444]	; (800278c <I2C_Slave_ISR_DMA+0x310>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d109      	bne.n	80025e6 <I2C_Slave_ISR_DMA+0x16a>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf0c      	ite	eq
 80025de:	2301      	moveq	r3, #1
 80025e0:	2300      	movne	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	e008      	b.n	80025f8 <I2C_Slave_ISR_DMA+0x17c>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 80025fc:	2301      	movs	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	2b00      	cmp	r3, #0
 8002606:	d07c      	beq.n	8002702 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0b9b      	lsrs	r3, r3, #14
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d076      	beq.n	8002702 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <I2C_Slave_ISR_DMA+0x2d4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d059      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a4b      	ldr	r2, [pc, #300]	; (8002754 <I2C_Slave_ISR_DMA+0x2d8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d053      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a49      	ldr	r2, [pc, #292]	; (8002758 <I2C_Slave_ISR_DMA+0x2dc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d04d      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a47      	ldr	r2, [pc, #284]	; (800275c <I2C_Slave_ISR_DMA+0x2e0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d047      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a45      	ldr	r2, [pc, #276]	; (8002760 <I2C_Slave_ISR_DMA+0x2e4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d041      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a43      	ldr	r2, [pc, #268]	; (8002764 <I2C_Slave_ISR_DMA+0x2e8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d03b      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a41      	ldr	r2, [pc, #260]	; (8002768 <I2C_Slave_ISR_DMA+0x2ec>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d035      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a3f      	ldr	r2, [pc, #252]	; (800276c <I2C_Slave_ISR_DMA+0x2f0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d02f      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a3d      	ldr	r2, [pc, #244]	; (8002770 <I2C_Slave_ISR_DMA+0x2f4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d029      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a3b      	ldr	r2, [pc, #236]	; (8002774 <I2C_Slave_ISR_DMA+0x2f8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d023      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a39      	ldr	r2, [pc, #228]	; (8002778 <I2C_Slave_ISR_DMA+0x2fc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d01d      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a37      	ldr	r2, [pc, #220]	; (800277c <I2C_Slave_ISR_DMA+0x300>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d017      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a35      	ldr	r2, [pc, #212]	; (8002780 <I2C_Slave_ISR_DMA+0x304>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d011      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a33      	ldr	r2, [pc, #204]	; (8002784 <I2C_Slave_ISR_DMA+0x308>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00b      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a31      	ldr	r2, [pc, #196]	; (8002788 <I2C_Slave_ISR_DMA+0x30c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d005      	beq.n	80026d4 <I2C_Slave_ISR_DMA+0x258>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2f      	ldr	r2, [pc, #188]	; (800278c <I2C_Slave_ISR_DMA+0x310>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d109      	bne.n	80026e8 <I2C_Slave_ISR_DMA+0x26c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e008      	b.n	80026fa <I2C_Slave_ISR_DMA+0x27e>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 80026fe:	2301      	movs	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d148      	bne.n	800279a <I2C_Slave_ISR_DMA+0x31e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b28      	cmp	r3, #40	; 0x28
 8002712:	d108      	bne.n	8002726 <I2C_Slave_ISR_DMA+0x2aa>
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800271a:	d104      	bne.n	8002726 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 fc6c 	bl	8002ffc <I2C_ITListenCplt>
 8002724:	e068      	b.n	80027f8 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b29      	cmp	r3, #41	; 0x29
 8002730:	d12e      	bne.n	8002790 <I2C_Slave_ISR_DMA+0x314>
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002738:	d02a      	beq.n	8002790 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2210      	movs	r2, #16
 8002740:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fda7 	bl	8003296 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f938 	bl	80029be <I2C_ITSlaveSeqCplt>
 800274e:	e053      	b.n	80027f8 <I2C_Slave_ISR_DMA+0x37c>
 8002750:	40020010 	.word	0x40020010
 8002754:	40020028 	.word	0x40020028
 8002758:	40020040 	.word	0x40020040
 800275c:	40020058 	.word	0x40020058
 8002760:	40020070 	.word	0x40020070
 8002764:	40020088 	.word	0x40020088
 8002768:	400200a0 	.word	0x400200a0
 800276c:	400200b8 	.word	0x400200b8
 8002770:	40020410 	.word	0x40020410
 8002774:	40020428 	.word	0x40020428
 8002778:	40020440 	.word	0x40020440
 800277c:	40020458 	.word	0x40020458
 8002780:	40020470 	.word	0x40020470
 8002784:	40020488 	.word	0x40020488
 8002788:	400204a0 	.word	0x400204a0
 800278c:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2210      	movs	r2, #16
 8002796:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002798:	e034      	b.n	8002804 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2210      	movs	r2, #16
 80027a0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f043 0204 	orr.w	r2, r3, #4
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <I2C_Slave_ISR_DMA+0x348>
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c2:	d11f      	bne.n	8002804 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	2b21      	cmp	r3, #33	; 0x21
 80027c8:	d002      	beq.n	80027d0 <I2C_Slave_ISR_DMA+0x354>
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	2b29      	cmp	r3, #41	; 0x29
 80027ce:	d103      	bne.n	80027d8 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2221      	movs	r2, #33	; 0x21
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
 80027d6:	e008      	b.n	80027ea <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	2b22      	cmp	r3, #34	; 0x22
 80027dc:	d002      	beq.n	80027e4 <I2C_Slave_ISR_DMA+0x368>
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b2a      	cmp	r3, #42	; 0x2a
 80027e2:	d102      	bne.n	80027ea <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2222      	movs	r2, #34	; 0x22
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4619      	mov	r1, r3
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fc59 	bl	80030a8 <I2C_ITError>
      if (treatdmanack == 1U)
 80027f6:	e005      	b.n	8002804 <I2C_Slave_ISR_DMA+0x388>
 80027f8:	e004      	b.n	8002804 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2210      	movs	r2, #16
 8002800:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002802:	e011      	b.n	8002828 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8002804:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002806:	e00f      	b.n	8002828 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <I2C_Slave_ISR_DMA+0x3ac>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	08db      	lsrs	r3, r3, #3
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f80a 	bl	800283c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop

0800283c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002852:	2b28      	cmp	r3, #40	; 0x28
 8002854:	d16a      	bne.n	800292c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	b29b      	uxth	r3, r3
 8002870:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002874:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002882:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002890:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d138      	bne.n	800290c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	09db      	lsrs	r3, r3, #7
 800289e:	b29a      	uxth	r2, r3
 80028a0:	89bb      	ldrh	r3, [r7, #12]
 80028a2:	4053      	eors	r3, r2
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	f003 0306 	and.w	r3, r3, #6
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11c      	bne.n	80028e8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d13b      	bne.n	800293c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2208      	movs	r2, #8
 80028d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028da:	89ba      	ldrh	r2, [r7, #12]
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff fa76 	bl	8001dd2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028e6:	e029      	b.n	800293c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80028e8:	893b      	ldrh	r3, [r7, #8]
 80028ea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80028ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fda5 	bl	8003440 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028fe:	89ba      	ldrh	r2, [r7, #12]
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fa64 	bl	8001dd2 <HAL_I2C_AddrCallback>
}
 800290a:	e017      	b.n	800293c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800290c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fd95 	bl	8003440 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800291e:	89ba      	ldrh	r2, [r7, #12]
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	4619      	mov	r1, r3
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff fa54 	bl	8001dd2 <HAL_I2C_AddrCallback>
}
 800292a:	e007      	b.n	800293c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2208      	movs	r2, #8
 8002932:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b21      	cmp	r3, #33	; 0x21
 800295e:	d115      	bne.n	800298c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2211      	movs	r2, #17
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002974:	2101      	movs	r1, #1
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fd62 	bl	8003440 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7fd fe87 	bl	8000698 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800298a:	e014      	b.n	80029b6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2212      	movs	r2, #18
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80029a0:	2102      	movs	r1, #2
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fd4c 	bl	8003440 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff f9f0 	bl	8001d96 <HAL_I2C_MasterRxCpltCallback>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	0b9b      	lsrs	r3, r3, #14
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e00d      	b.n	8002a10 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	0bdb      	lsrs	r3, r3, #15
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a0e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b29      	cmp	r3, #41	; 0x29
 8002a1a:	d112      	bne.n	8002a42 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2228      	movs	r2, #40	; 0x28
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2221      	movs	r2, #33	; 0x21
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fd07 	bl	8003440 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff f9b5 	bl	8001daa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a40:	e017      	b.n	8002a72 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a4c:	d111      	bne.n	8002a72 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2228      	movs	r2, #40	; 0x28
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2222      	movs	r2, #34	; 0x22
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fcee 	bl	8003440 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff f9a6 	bl	8001dbe <HAL_I2C_SlaveRxCpltCallback>
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	617b      	str	r3, [r7, #20]
  uint32_t tmp;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b21      	cmp	r3, #33	; 0x21
 8002a9c:	d107      	bne.n	8002aae <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fccd 	bl	8003440 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2211      	movs	r2, #17
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002aac:	e00c      	b.n	8002ac8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b22      	cmp	r3, #34	; 0x22
 8002ab8:	d106      	bne.n	8002ac8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002aba:	2102      	movs	r1, #2
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fcbf 	bl	8003440 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2212      	movs	r2, #18
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <I2C_ITMasterCplt+0x188>)
 8002ad4:	400b      	ands	r3, r1
 8002ad6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a49      	ldr	r2, [pc, #292]	; (8002c08 <I2C_ITMasterCplt+0x18c>)
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2210      	movs	r2, #16
 8002af6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b60      	cmp	r3, #96	; 0x60
 8002b0e:	d10a      	bne.n	8002b26 <I2C_ITMasterCplt+0xaa>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <I2C_ITMasterCplt+0xaa>
  {
    /* Read data from RXDR */
    tmp = (uint8_t)hi2c->Instance->RXDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	613b      	str	r3, [r7, #16]

    UNUSED(tmp);
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fbb5 	bl	8003296 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b60      	cmp	r3, #96	; 0x60
 8002b3c:	d002      	beq.n	8002b44 <I2C_ITMasterCplt+0xc8>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <I2C_ITMasterCplt+0xd6>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 faac 	bl	80030a8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b50:	e054      	b.n	8002bfc <I2C_ITMasterCplt+0x180>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b21      	cmp	r3, #33	; 0x21
 8002b5c:	d124      	bne.n	8002ba8 <I2C_ITMasterCplt+0x12c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d10b      	bne.n	8002b90 <I2C_ITMasterCplt+0x114>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff f93a 	bl	8001e02 <HAL_I2C_MemTxCpltCallback>
}
 8002b8e:	e035      	b.n	8002bfc <I2C_ITMasterCplt+0x180>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fd fd79 	bl	8000698 <HAL_I2C_MasterTxCpltCallback>
}
 8002ba6:	e029      	b.n	8002bfc <I2C_ITMasterCplt+0x180>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b22      	cmp	r3, #34	; 0x22
 8002bb2:	d123      	bne.n	8002bfc <I2C_ITMasterCplt+0x180>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d10b      	bne.n	8002be6 <I2C_ITMasterCplt+0x16a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff f919 	bl	8001e16 <HAL_I2C_MemRxCpltCallback>
}
 8002be4:	e00a      	b.n	8002bfc <I2C_ITMasterCplt+0x180>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff f8cd 	bl	8001d96 <HAL_I2C_MasterRxCpltCallback>
}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	fe00e800 	.word	0xfe00e800
 8002c08:	ffff0000 	.word	0xffff0000

08002c0c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c28:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2b21      	cmp	r3, #33	; 0x21
 8002c36:	d002      	beq.n	8002c3e <I2C_ITSlaveCplt+0x32>
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b29      	cmp	r3, #41	; 0x29
 8002c3c:	d108      	bne.n	8002c50 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002c3e:	f248 0101 	movw	r1, #32769	; 0x8001
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fbfc 	bl	8003440 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2221      	movs	r2, #33	; 0x21
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c4e:	e00d      	b.n	8002c6c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b22      	cmp	r3, #34	; 0x22
 8002c54:	d002      	beq.n	8002c5c <I2C_ITSlaveCplt+0x50>
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b2a      	cmp	r3, #42	; 0x2a
 8002c5a:	d107      	bne.n	8002c6c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002c5c:	f248 0102 	movw	r1, #32770	; 0x8002
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fbed 	bl	8003440 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2222      	movs	r2, #34	; 0x22
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b80      	ldr	r3, [pc, #512]	; (8002e88 <I2C_ITSlaveCplt+0x27c>)
 8002c88:	400b      	ands	r3, r1
 8002c8a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fb02 	bl	8003296 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	0b9b      	lsrs	r3, r3, #14
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d07a      	beq.n	8002d94 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8111 	beq.w	8002eda <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a73      	ldr	r2, [pc, #460]	; (8002e8c <I2C_ITSlaveCplt+0x280>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d059      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a71      	ldr	r2, [pc, #452]	; (8002e90 <I2C_ITSlaveCplt+0x284>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d053      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6f      	ldr	r2, [pc, #444]	; (8002e94 <I2C_ITSlaveCplt+0x288>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d04d      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6d      	ldr	r2, [pc, #436]	; (8002e98 <I2C_ITSlaveCplt+0x28c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d047      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6b      	ldr	r2, [pc, #428]	; (8002e9c <I2C_ITSlaveCplt+0x290>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d041      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a69      	ldr	r2, [pc, #420]	; (8002ea0 <I2C_ITSlaveCplt+0x294>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d03b      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a67      	ldr	r2, [pc, #412]	; (8002ea4 <I2C_ITSlaveCplt+0x298>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d035      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a65      	ldr	r2, [pc, #404]	; (8002ea8 <I2C_ITSlaveCplt+0x29c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d02f      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a63      	ldr	r2, [pc, #396]	; (8002eac <I2C_ITSlaveCplt+0x2a0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d029      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a61      	ldr	r2, [pc, #388]	; (8002eb0 <I2C_ITSlaveCplt+0x2a4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d023      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5f      	ldr	r2, [pc, #380]	; (8002eb4 <I2C_ITSlaveCplt+0x2a8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d01d      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <I2C_ITSlaveCplt+0x2ac>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d017      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5b      	ldr	r2, [pc, #364]	; (8002ebc <I2C_ITSlaveCplt+0x2b0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d011      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a59      	ldr	r2, [pc, #356]	; (8002ec0 <I2C_ITSlaveCplt+0x2b4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a57      	ldr	r2, [pc, #348]	; (8002ec4 <I2C_ITSlaveCplt+0x2b8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d005      	beq.n	8002d78 <I2C_ITSlaveCplt+0x16c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a55      	ldr	r2, [pc, #340]	; (8002ec8 <I2C_ITSlaveCplt+0x2bc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d105      	bne.n	8002d84 <I2C_ITSlaveCplt+0x178>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	e004      	b.n	8002d8e <I2C_ITSlaveCplt+0x182>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	8553      	strh	r3, [r2, #42]	; 0x2a
 8002d92:	e0a2      	b.n	8002eda <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	0bdb      	lsrs	r3, r3, #15
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 809c 	beq.w	8002eda <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 808f 	beq.w	8002eda <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <I2C_ITSlaveCplt+0x280>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d059      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <I2C_ITSlaveCplt+0x284>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d053      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2e      	ldr	r2, [pc, #184]	; (8002e94 <I2C_ITSlaveCplt+0x288>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d04d      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <I2C_ITSlaveCplt+0x28c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d047      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2a      	ldr	r2, [pc, #168]	; (8002e9c <I2C_ITSlaveCplt+0x290>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d041      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <I2C_ITSlaveCplt+0x294>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d03b      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <I2C_ITSlaveCplt+0x298>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d035      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a24      	ldr	r2, [pc, #144]	; (8002ea8 <I2C_ITSlaveCplt+0x29c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d02f      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a22      	ldr	r2, [pc, #136]	; (8002eac <I2C_ITSlaveCplt+0x2a0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d029      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a20      	ldr	r2, [pc, #128]	; (8002eb0 <I2C_ITSlaveCplt+0x2a4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d023      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <I2C_ITSlaveCplt+0x2a8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d01d      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <I2C_ITSlaveCplt+0x2ac>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d017      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <I2C_ITSlaveCplt+0x2b0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d011      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <I2C_ITSlaveCplt+0x2b4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00b      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a16      	ldr	r2, [pc, #88]	; (8002ec4 <I2C_ITSlaveCplt+0x2b8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d005      	beq.n	8002e7c <I2C_ITSlaveCplt+0x270>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <I2C_ITSlaveCplt+0x2bc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d127      	bne.n	8002ecc <I2C_ITSlaveCplt+0x2c0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	e026      	b.n	8002ed6 <I2C_ITSlaveCplt+0x2ca>
 8002e88:	fe00e800 	.word	0xfe00e800
 8002e8c:	40020010 	.word	0x40020010
 8002e90:	40020028 	.word	0x40020028
 8002e94:	40020040 	.word	0x40020040
 8002e98:	40020058 	.word	0x40020058
 8002e9c:	40020070 	.word	0x40020070
 8002ea0:	40020088 	.word	0x40020088
 8002ea4:	400200a0 	.word	0x400200a0
 8002ea8:	400200b8 	.word	0x400200b8
 8002eac:	40020410 	.word	0x40020410
 8002eb0:	40020428 	.word	0x40020428
 8002eb4:	40020440 	.word	0x40020440
 8002eb8:	40020458 	.word	0x40020458
 8002ebc:	40020470 	.word	0x40020470
 8002ec0:	40020488 	.word	0x40020488
 8002ec4:	400204a0 	.word	0x400204a0
 8002ec8:	400204b8 	.word	0x400204b8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d020      	beq.n	8002f28 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8a4 	bl	80030a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b28      	cmp	r3, #40	; 0x28
 8002f6a:	d141      	bne.n	8002ff0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f6c:	6979      	ldr	r1, [r7, #20]
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f844 	bl	8002ffc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f74:	e03c      	b.n	8002ff0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f7e:	d014      	beq.n	8002faa <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff fd1c 	bl	80029be <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <I2C_ITSlaveCplt+0x3ec>)
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe ff23 	bl	8001dee <HAL_I2C_ListenCpltCallback>
}
 8002fa8:	e022      	b.n	8002ff0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b22      	cmp	r3, #34	; 0x22
 8002fb4:	d10e      	bne.n	8002fd4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7fe fef6 	bl	8001dbe <HAL_I2C_SlaveRxCpltCallback>
}
 8002fd2:	e00d      	b.n	8002ff0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe fedd 	bl	8001daa <HAL_I2C_SlaveTxCpltCallback>
}
 8002ff0:	bf00      	nop
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	ffff0000 	.word	0xffff0000

08002ffc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a26      	ldr	r2, [pc, #152]	; (80030a4 <I2C_ITListenCplt+0xa8>)
 800300a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d022      	beq.n	800307a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d012      	beq.n	800307a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f043 0204 	orr.w	r2, r3, #4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800307a:	f248 0103 	movw	r1, #32771	; 0x8003
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f9de 	bl	8003440 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2210      	movs	r2, #16
 800308a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fe feaa 	bl	8001dee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	ffff0000 	.word	0xffff0000

080030a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a5d      	ldr	r2, [pc, #372]	; (800323c <I2C_ITError+0x194>)
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b28      	cmp	r3, #40	; 0x28
 80030de:	d005      	beq.n	80030ec <I2C_ITError+0x44>
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b29      	cmp	r3, #41	; 0x29
 80030e4:	d002      	beq.n	80030ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	2b2a      	cmp	r3, #42	; 0x2a
 80030ea:	d10b      	bne.n	8003104 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030ec:	2103      	movs	r1, #3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f9a6 	bl	8003440 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2228      	movs	r2, #40	; 0x28
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a50      	ldr	r2, [pc, #320]	; (8003240 <I2C_ITError+0x198>)
 8003100:	635a      	str	r2, [r3, #52]	; 0x34
 8003102:	e011      	b.n	8003128 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003104:	f248 0103 	movw	r1, #32771	; 0x8003
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f999 	bl	8003440 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b60      	cmp	r3, #96	; 0x60
 8003118:	d003      	beq.n	8003122 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	2b00      	cmp	r3, #0
 8003134:	d039      	beq.n	80031aa <I2C_ITError+0x102>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b11      	cmp	r3, #17
 800313a:	d002      	beq.n	8003142 <I2C_ITError+0x9a>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b21      	cmp	r3, #33	; 0x21
 8003140:	d133      	bne.n	80031aa <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003150:	d107      	bne.n	8003162 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003160:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fac2 	bl	80016f0 <HAL_DMA_GetState>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d017      	beq.n	80031a2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	4a33      	ldr	r2, [pc, #204]	; (8003244 <I2C_ITError+0x19c>)
 8003178:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe f86e 	bl	8001268 <HAL_DMA_Abort_IT>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d04d      	beq.n	800322e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800319c:	4610      	mov	r0, r2
 800319e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031a0:	e045      	b.n	800322e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f850 	bl	8003248 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031a8:	e041      	b.n	800322e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d039      	beq.n	8003226 <I2C_ITError+0x17e>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b12      	cmp	r3, #18
 80031b6:	d002      	beq.n	80031be <I2C_ITError+0x116>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b22      	cmp	r3, #34	; 0x22
 80031bc:	d133      	bne.n	8003226 <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031cc:	d107      	bne.n	80031de <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031dc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fa84 	bl	80016f0 <HAL_DMA_GetState>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d017      	beq.n	800321e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	4a14      	ldr	r2, [pc, #80]	; (8003244 <I2C_ITError+0x19c>)
 80031f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe f830 	bl	8001268 <HAL_DMA_Abort_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d011      	beq.n	8003232 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003218:	4610      	mov	r0, r2
 800321a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800321c:	e009      	b.n	8003232 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f812 	bl	8003248 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003224:	e005      	b.n	8003232 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f80e 	bl	8003248 <I2C_TreatErrorCallback>
  }
}
 800322c:	e002      	b.n	8003234 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800322e:	bf00      	nop
 8003230:	e000      	b.n	8003234 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003232:	bf00      	nop
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	ffff0000 	.word	0xffff0000
 8003240:	08002091 	.word	0x08002091
 8003244:	080032df 	.word	0x080032df

08003248 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b60      	cmp	r3, #96	; 0x60
 800325a:	d10e      	bne.n	800327a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe fdd9 	bl	8001e2a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003278:	e009      	b.n	800328e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7fd fa1f 	bl	80006cc <HAL_I2C_ErrorCallback>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d103      	bne.n	80032b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d007      	beq.n	80032d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	619a      	str	r2, [r3, #24]
  }
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	2200      	movs	r2, #0
 80032fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	2200      	movs	r2, #0
 800330a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff ff9b 	bl	8003248 <I2C_TreatErrorCallback>
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	817b      	strh	r3, [r7, #10]
 800332a:	4613      	mov	r3, r2
 800332c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	0d5b      	lsrs	r3, r3, #21
 8003338:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800333c:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <I2C_TransferConfig+0x58>)
 800333e:	430b      	orrs	r3, r1
 8003340:	43db      	mvns	r3, r3
 8003342:	ea02 0103 	and.w	r1, r2, r3
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800334c:	7a7b      	ldrb	r3, [r7, #9]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	431a      	orrs	r2, r3
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	03ff63ff 	.word	0x03ff63ff

08003378 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	4a2a      	ldr	r2, [pc, #168]	; (8003438 <I2C_Enable_IRQ+0xc0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003396:	4a29      	ldr	r2, [pc, #164]	; (800343c <I2C_Enable_IRQ+0xc4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d11d      	bne.n	80033d8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800339c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	da03      	bge.n	80033ac <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80033aa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80033ac:	887b      	ldrh	r3, [r7, #2]
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d103      	bne.n	80033ba <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80033b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80033ba:	887b      	ldrh	r3, [r7, #2]
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d103      	bne.n	80033c8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d125      	bne.n	800341a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80033d6:	e020      	b.n	800341a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80033d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	da03      	bge.n	80033e8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80033e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80033e8:	887b      	ldrh	r3, [r7, #2]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80033f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800340a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800340c:	887b      	ldrh	r3, [r7, #2]
 800340e:	2b20      	cmp	r3, #32
 8003410:	d103      	bne.n	800341a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f043 0320 	orr.w	r3, r3, #32
 8003418:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	430a      	orrs	r2, r1
 8003428:	601a      	str	r2, [r3, #0]
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	08002297 	.word	0x08002297
 800343c:	0800247d 	.word	0x0800247d

08003440 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003450:	887b      	ldrh	r3, [r7, #2]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00f      	beq.n	800347a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003460:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800346e:	2b28      	cmp	r3, #40	; 0x28
 8003470:	d003      	beq.n	800347a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003478:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800347a:	887b      	ldrh	r3, [r7, #2]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00f      	beq.n	80034a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800348a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003498:	2b28      	cmp	r3, #40	; 0x28
 800349a:	d003      	beq.n	80034a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80034a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80034a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	da03      	bge.n	80034b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80034b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d103      	bne.n	80034c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d103      	bne.n	80034d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f043 0320 	orr.w	r3, r3, #32
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d103      	bne.n	80034de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	43da      	mvns	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	400a      	ands	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b20      	cmp	r3, #32
 8003510:	d138      	bne.n	8003584 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800351c:	2302      	movs	r3, #2
 800351e:	e032      	b.n	8003586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2224      	movs	r2, #36	; 0x24
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800354e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6819      	ldr	r1, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d139      	bne.n	800361c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e033      	b.n	800361e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2224      	movs	r2, #36	; 0x24
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003634:	4b19      	ldr	r3, [pc, #100]	; (800369c <HAL_PWREx_ConfigSupply+0x70>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b04      	cmp	r3, #4
 800363e:	d00a      	beq.n	8003656 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003640:	4b16      	ldr	r3, [pc, #88]	; (800369c <HAL_PWREx_ConfigSupply+0x70>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	429a      	cmp	r2, r3
 800364c:	d001      	beq.n	8003652 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e01f      	b.n	8003692 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e01d      	b.n	8003692 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003656:	4b11      	ldr	r3, [pc, #68]	; (800369c <HAL_PWREx_ConfigSupply+0x70>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f023 0207 	bic.w	r2, r3, #7
 800365e:	490f      	ldr	r1, [pc, #60]	; (800369c <HAL_PWREx_ConfigSupply+0x70>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4313      	orrs	r3, r2
 8003664:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003666:	f7fd fcd7 	bl	8001018 <HAL_GetTick>
 800366a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800366c:	e009      	b.n	8003682 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800366e:	f7fd fcd3 	bl	8001018 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800367c:	d901      	bls.n	8003682 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e007      	b.n	8003692 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_PWREx_ConfigSupply+0x70>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800368a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368e:	d1ee      	bne.n	800366e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	58024800 	.word	0x58024800

080036a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08c      	sub	sp, #48	; 0x30
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e3c4      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8087 	beq.w	80037ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c0:	4ba2      	ldr	r3, [pc, #648]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ca:	4ba0      	ldr	r3, [pc, #640]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d007      	beq.n	80036e6 <HAL_RCC_OscConfig+0x46>
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	2b18      	cmp	r3, #24
 80036da:	d110      	bne.n	80036fe <HAL_RCC_OscConfig+0x5e>
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d10b      	bne.n	80036fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e6:	4b99      	ldr	r3, [pc, #612]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d06c      	beq.n	80037cc <HAL_RCC_OscConfig+0x12c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d168      	bne.n	80037cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e39e      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x76>
 8003708:	4b90      	ldr	r3, [pc, #576]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a8f      	ldr	r2, [pc, #572]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800370e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	e02e      	b.n	8003774 <HAL_RCC_OscConfig+0xd4>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x98>
 800371e:	4b8b      	ldr	r3, [pc, #556]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a8a      	ldr	r2, [pc, #552]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a87      	ldr	r2, [pc, #540]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e01d      	b.n	8003774 <HAL_RCC_OscConfig+0xd4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0xbc>
 8003742:	4b82      	ldr	r3, [pc, #520]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a81      	ldr	r2, [pc, #516]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b7f      	ldr	r3, [pc, #508]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7e      	ldr	r2, [pc, #504]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0xd4>
 800375c:	4b7b      	ldr	r3, [pc, #492]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a7a      	ldr	r2, [pc, #488]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b78      	ldr	r3, [pc, #480]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a77      	ldr	r2, [pc, #476]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fd fc4c 	bl	8001018 <HAL_GetTick>
 8003780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003784:	f7fd fc48 	bl	8001018 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e352      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0xe4>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fd fc38 	bl	8001018 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fd fc34 	bl	8001018 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e33e      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037be:	4b63      	ldr	r3, [pc, #396]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x10c>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8092 	beq.w	8003900 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037dc:	4b5b      	ldr	r3, [pc, #364]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037e6:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_RCC_OscConfig+0x162>
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	2b18      	cmp	r3, #24
 80037f6:	d12d      	bne.n	8003854 <HAL_RCC_OscConfig+0x1b4>
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d128      	bne.n	8003854 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003802:	4b52      	ldr	r3, [pc, #328]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_RCC_OscConfig+0x17a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e310      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381a:	f7fd fc09 	bl	8001030 <HAL_GetREVID>
 800381e:	4602      	mov	r2, r0
 8003820:	f241 0303 	movw	r3, #4099	; 0x1003
 8003824:	429a      	cmp	r2, r3
 8003826:	d80a      	bhi.n	800383e <HAL_RCC_OscConfig+0x19e>
 8003828:	4b48      	ldr	r3, [pc, #288]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	031b      	lsls	r3, r3, #12
 8003836:	4945      	ldr	r1, [pc, #276]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383c:	e060      	b.n	8003900 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383e:	4b43      	ldr	r3, [pc, #268]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	493f      	ldr	r1, [pc, #252]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003852:	e055      	b.n	8003900 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d038      	beq.n	80038ce <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 0219 	bic.w	r2, r3, #25
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4938      	ldr	r1, [pc, #224]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fd fbd3 	bl	8001018 <HAL_GetTick>
 8003872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003876:	f7fd fbcf 	bl	8001018 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e2d9      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003888:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003894:	f7fd fbcc 	bl	8001030 <HAL_GetREVID>
 8003898:	4602      	mov	r2, r0
 800389a:	f241 0303 	movw	r3, #4099	; 0x1003
 800389e:	429a      	cmp	r2, r3
 80038a0:	d80a      	bhi.n	80038b8 <HAL_RCC_OscConfig+0x218>
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	031b      	lsls	r3, r3, #12
 80038b0:	4926      	ldr	r1, [pc, #152]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
 80038b6:	e023      	b.n	8003900 <HAL_RCC_OscConfig+0x260>
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	4921      	ldr	r1, [pc, #132]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
 80038cc:	e018      	b.n	8003900 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ce:	4b1f      	ldr	r3, [pc, #124]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fd fb9d 	bl	8001018 <HAL_GetTick>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fd fb99 	bl	8001018 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e2a3      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038f4:	4b15      	ldr	r3, [pc, #84]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f0      	bne.n	80038e2 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8091 	beq.w	8003a30 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003916:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d007      	beq.n	8003934 <HAL_RCC_OscConfig+0x294>
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b18      	cmp	r3, #24
 8003928:	d12f      	bne.n	800398a <HAL_RCC_OscConfig+0x2ea>
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d12a      	bne.n	800398a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_OscConfig+0x2ac>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_RCC_OscConfig+0x2b0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d003      	beq.n	8003950 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e277      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
 800394c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003950:	f7fd fb6e 	bl	8001030 <HAL_GetREVID>
 8003954:	4602      	mov	r2, r0
 8003956:	f241 0303 	movw	r3, #4099	; 0x1003
 800395a:	429a      	cmp	r2, r3
 800395c:	d80a      	bhi.n	8003974 <HAL_RCC_OscConfig+0x2d4>
 800395e:	4ba2      	ldr	r3, [pc, #648]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	069b      	lsls	r3, r3, #26
 800396c:	499e      	ldr	r1, [pc, #632]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003972:	e05d      	b.n	8003a30 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003974:	4b9c      	ldr	r3, [pc, #624]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	4999      	ldr	r1, [pc, #612]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003984:	4313      	orrs	r3, r2
 8003986:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003988:	e052      	b.n	8003a30 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d035      	beq.n	80039fe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003992:	4b95      	ldr	r3, [pc, #596]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a94      	ldr	r2, [pc, #592]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fd fb3b 	bl	8001018 <HAL_GetTick>
 80039a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039a6:	f7fd fb37 	bl	8001018 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e241      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039b8:	4b8b      	ldr	r3, [pc, #556]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039c4:	f7fd fb34 	bl	8001030 <HAL_GetREVID>
 80039c8:	4602      	mov	r2, r0
 80039ca:	f241 0303 	movw	r3, #4099	; 0x1003
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d80a      	bhi.n	80039e8 <HAL_RCC_OscConfig+0x348>
 80039d2:	4b85      	ldr	r3, [pc, #532]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	069b      	lsls	r3, r3, #26
 80039e0:	4981      	ldr	r1, [pc, #516]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
 80039e6:	e023      	b.n	8003a30 <HAL_RCC_OscConfig+0x390>
 80039e8:	4b7f      	ldr	r3, [pc, #508]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	497c      	ldr	r1, [pc, #496]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60cb      	str	r3, [r1, #12]
 80039fc:	e018      	b.n	8003a30 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039fe:	4b7a      	ldr	r3, [pc, #488]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a79      	ldr	r2, [pc, #484]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fd fb05 	bl	8001018 <HAL_GetTick>
 8003a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a12:	f7fd fb01 	bl	8001018 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e20b      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a24:	4b70      	ldr	r3, [pc, #448]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f0      	bne.n	8003a12 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d036      	beq.n	8003aaa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d019      	beq.n	8003a78 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a44:	4b68      	ldr	r3, [pc, #416]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	4a67      	ldr	r2, [pc, #412]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fd fae2 	bl	8001018 <HAL_GetTick>
 8003a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fd fade 	bl	8001018 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1e8      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a6a:	4b5f      	ldr	r3, [pc, #380]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x3b8>
 8003a76:	e018      	b.n	8003aaa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a78:	4b5b      	ldr	r3, [pc, #364]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7c:	4a5a      	ldr	r2, [pc, #360]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fd fac8 	bl	8001018 <HAL_GetTick>
 8003a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fd fac4 	bl	8001018 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e1ce      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a9e:	4b52      	ldr	r3, [pc, #328]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d036      	beq.n	8003b24 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d019      	beq.n	8003af2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a49      	ldr	r2, [pc, #292]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ac8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aca:	f7fd faa5 	bl	8001018 <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ad2:	f7fd faa1 	bl	8001018 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1ab      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ae4:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x432>
 8003af0:	e018      	b.n	8003b24 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003af2:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3c      	ldr	r2, [pc, #240]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003af8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003afc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003afe:	f7fd fa8b 	bl	8001018 <HAL_GetTick>
 8003b02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b06:	f7fd fa87 	bl	8001018 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e191      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b18:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8086 	beq.w	8003c3e <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b32:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_RCC_OscConfig+0x54c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2d      	ldr	r2, [pc, #180]	; (8003bec <HAL_RCC_OscConfig+0x54c>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3e:	f7fd fa6b 	bl	8001018 <HAL_GetTick>
 8003b42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fd fa67 	bl	8001018 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	; 0x64
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e171      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_RCC_OscConfig+0x54c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x4da>
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
 8003b78:	e02d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x536>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4fc>
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003b94:	f023 0304 	bic.w	r3, r3, #4
 8003b98:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9a:	e01c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x536>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d10c      	bne.n	8003bbe <HAL_RCC_OscConfig+0x51e>
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a0f      	ldr	r2, [pc, #60]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4a0c      	ldr	r2, [pc, #48]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x536>
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	4a06      	ldr	r2, [pc, #24]	; (8003be8 <HAL_RCC_OscConfig+0x548>)
 8003bd0:	f023 0304 	bic.w	r3, r3, #4
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d01a      	beq.n	8003c14 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fd fa1b 	bl	8001018 <HAL_GetTick>
 8003be2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be4:	e00f      	b.n	8003c06 <HAL_RCC_OscConfig+0x566>
 8003be6:	bf00      	nop
 8003be8:	58024400 	.word	0x58024400
 8003bec:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fd fa12 	bl	8001018 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e11a      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c06:	4b8f      	ldr	r3, [pc, #572]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0ee      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x550>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fd fa00 	bl	8001018 <HAL_GetTick>
 8003c18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fd f9fc 	bl	8001018 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e104      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c32:	4b84      	ldr	r3, [pc, #528]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ee      	bne.n	8003c1c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80f9 	beq.w	8003e3a <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c48:	4b7e      	ldr	r3, [pc, #504]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c50:	2b18      	cmp	r3, #24
 8003c52:	f000 80b4 	beq.w	8003dbe <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	f040 8095 	bne.w	8003d8a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c60:	4b78      	ldr	r3, [pc, #480]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a77      	ldr	r2, [pc, #476]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd f9d4 	bl	8001018 <HAL_GetTick>
 8003c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fd f9d0 	bl	8001018 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0da      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c86:	4b6f      	ldr	r3, [pc, #444]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c92:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c96:	4b6c      	ldr	r3, [pc, #432]	; (8003e48 <HAL_RCC_OscConfig+0x7a8>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ca2:	0112      	lsls	r2, r2, #4
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	4967      	ldr	r1, [pc, #412]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	628b      	str	r3, [r1, #40]	; 0x28
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	025b      	lsls	r3, r3, #9
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cdc:	4959      	ldr	r1, [pc, #356]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003ce2:	4b58      	ldr	r3, [pc, #352]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	4a57      	ldr	r2, [pc, #348]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cee:	4b55      	ldr	r3, [pc, #340]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf2:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <HAL_RCC_OscConfig+0x7ac>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cfa:	00d2      	lsls	r2, r2, #3
 8003cfc:	4951      	ldr	r1, [pc, #324]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d02:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f023 020c 	bic.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	494d      	ldr	r1, [pc, #308]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d14:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	f023 0202 	bic.w	r2, r3, #2
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	4948      	ldr	r1, [pc, #288]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	4a46      	ldr	r2, [pc, #280]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d32:	4b44      	ldr	r3, [pc, #272]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	4a43      	ldr	r2, [pc, #268]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	4a40      	ldr	r2, [pc, #256]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	4a3d      	ldr	r2, [pc, #244]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d56:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3a      	ldr	r2, [pc, #232]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fd f959 	bl	8001018 <HAL_GetTick>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd f955 	bl	8001018 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e05f      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d7c:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x6ca>
 8003d88:	e057      	b.n	8003e3a <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7fd f93f 	bl	8001018 <HAL_GetTick>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fd f93b 	bl	8001018 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e045      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003db0:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x6fe>
 8003dbc:	e03d      	b.n	8003e3a <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <HAL_RCC_OscConfig+0x7a4>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d031      	beq.n	8003e36 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f003 0203 	and.w	r2, r3, #3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d12a      	bne.n	8003e36 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d122      	bne.n	8003e36 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d11a      	bne.n	8003e36 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	0a5b      	lsrs	r3, r3, #9
 8003e04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d111      	bne.n	8003e36 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	0c1b      	lsrs	r3, r3, #16
 8003e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d108      	bne.n	8003e36 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	0e1b      	lsrs	r3, r3, #24
 8003e28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e30:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3730      	adds	r7, #48	; 0x30
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	58024400 	.word	0x58024400
 8003e48:	fffffc0c 	.word	0xfffffc0c
 8003e4c:	ffff0007 	.word	0xffff0007

08003e50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e19c      	b.n	800419e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b8a      	ldr	r3, [pc, #552]	; (8004090 <HAL_RCC_ClockConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d910      	bls.n	8003e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b87      	ldr	r3, [pc, #540]	; (8004090 <HAL_RCC_ClockConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 020f 	bic.w	r2, r3, #15
 8003e7a:	4985      	ldr	r1, [pc, #532]	; (8004090 <HAL_RCC_ClockConfig+0x240>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b83      	ldr	r3, [pc, #524]	; (8004090 <HAL_RCC_ClockConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e184      	b.n	800419e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d010      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	4b7b      	ldr	r3, [pc, #492]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d908      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003eb0:	4b78      	ldr	r3, [pc, #480]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	4975      	ldr	r1, [pc, #468]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d010      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	4b70      	ldr	r3, [pc, #448]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d908      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ede:	4b6d      	ldr	r3, [pc, #436]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	496a      	ldr	r1, [pc, #424]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d010      	beq.n	8003f1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699a      	ldr	r2, [r3, #24]
 8003f00:	4b64      	ldr	r3, [pc, #400]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d908      	bls.n	8003f1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f0c:	4b61      	ldr	r3, [pc, #388]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	495e      	ldr	r1, [pc, #376]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d010      	beq.n	8003f4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69da      	ldr	r2, [r3, #28]
 8003f2e:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d908      	bls.n	8003f4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f3a:	4b56      	ldr	r3, [pc, #344]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	4953      	ldr	r1, [pc, #332]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d010      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	4b4d      	ldr	r3, [pc, #308]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d908      	bls.n	8003f7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f68:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f023 020f 	bic.w	r2, r3, #15
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4947      	ldr	r1, [pc, #284]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d055      	beq.n	8004032 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f86:	4b43      	ldr	r3, [pc, #268]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4940      	ldr	r1, [pc, #256]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fa0:	4b3c      	ldr	r3, [pc, #240]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d121      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0f6      	b.n	800419e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb8:	4b36      	ldr	r3, [pc, #216]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d115      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0ea      	b.n	800419e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d107      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0de      	b.n	800419e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fe0:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0d6      	b.n	800419e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ff0:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f023 0207 	bic.w	r2, r3, #7
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4925      	ldr	r1, [pc, #148]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fd f809 	bl	8001018 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004008:	e00a      	b.n	8004020 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800400a:	f7fd f805 	bl	8001018 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0be      	b.n	800419e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004020:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	429a      	cmp	r2, r3
 8004030:	d1eb      	bne.n	800400a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d010      	beq.n	8004060 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	429a      	cmp	r2, r3
 800404c:	d208      	bcs.n	8004060 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f023 020f 	bic.w	r2, r3, #15
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	490e      	ldr	r1, [pc, #56]	; (8004094 <HAL_RCC_ClockConfig+0x244>)
 800405c:	4313      	orrs	r3, r2
 800405e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x240>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d214      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <HAL_RCC_ClockConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 020f 	bic.w	r2, r3, #15
 8004076:	4906      	ldr	r1, [pc, #24]	; (8004090 <HAL_RCC_ClockConfig+0x240>)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b04      	ldr	r3, [pc, #16]	; (8004090 <HAL_RCC_ClockConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e086      	b.n	800419e <HAL_RCC_ClockConfig+0x34e>
 8004090:	52002000 	.word	0x52002000
 8004094:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d010      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d208      	bcs.n	80040c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040b4:	4b3c      	ldr	r3, [pc, #240]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	4939      	ldr	r1, [pc, #228]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d010      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	4b34      	ldr	r3, [pc, #208]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040de:	429a      	cmp	r2, r3
 80040e0:	d208      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040e2:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	492e      	ldr	r1, [pc, #184]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d010      	beq.n	8004122 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800410c:	429a      	cmp	r2, r3
 800410e:	d208      	bcs.n	8004122 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	4922      	ldr	r1, [pc, #136]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 800411e:	4313      	orrs	r3, r2
 8004120:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d010      	beq.n	8004150 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800413a:	429a      	cmp	r2, r3
 800413c:	d208      	bcs.n	8004150 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	4917      	ldr	r1, [pc, #92]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 800414c:	4313      	orrs	r3, r2
 800414e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004150:	f000 f834 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 8004154:	4601      	mov	r1, r0
 8004156:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	4a12      	ldr	r2, [pc, #72]	; (80041ac <HAL_RCC_ClockConfig+0x35c>)
 8004162:	5cd3      	ldrb	r3, [r2, r3]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	fa21 f303 	lsr.w	r3, r1, r3
 800416c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800416e:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <HAL_RCC_ClockConfig+0x358>)
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <HAL_RCC_ClockConfig+0x35c>)
 8004178:	5cd3      	ldrb	r3, [r2, r3]
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <HAL_RCC_ClockConfig+0x360>)
 8004186:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004188:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <HAL_RCC_ClockConfig+0x364>)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <HAL_RCC_ClockConfig+0x368>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fc fef6 	bl	8000f84 <HAL_InitTick>
 8004198:	4603      	mov	r3, r0
 800419a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	58024400 	.word	0x58024400
 80041ac:	080085c4 	.word	0x080085c4
 80041b0:	24000004 	.word	0x24000004
 80041b4:	24000000 	.word	0x24000000
 80041b8:	24000008 	.word	0x24000008

080041bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041c2:	4baf      	ldr	r3, [pc, #700]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ca:	2b18      	cmp	r3, #24
 80041cc:	f200 814e 	bhi.w	800446c <HAL_RCC_GetSysClockFreq+0x2b0>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	0800423d 	.word	0x0800423d
 80041dc:	0800446d 	.word	0x0800446d
 80041e0:	0800446d 	.word	0x0800446d
 80041e4:	0800446d 	.word	0x0800446d
 80041e8:	0800446d 	.word	0x0800446d
 80041ec:	0800446d 	.word	0x0800446d
 80041f0:	0800446d 	.word	0x0800446d
 80041f4:	0800446d 	.word	0x0800446d
 80041f8:	08004263 	.word	0x08004263
 80041fc:	0800446d 	.word	0x0800446d
 8004200:	0800446d 	.word	0x0800446d
 8004204:	0800446d 	.word	0x0800446d
 8004208:	0800446d 	.word	0x0800446d
 800420c:	0800446d 	.word	0x0800446d
 8004210:	0800446d 	.word	0x0800446d
 8004214:	0800446d 	.word	0x0800446d
 8004218:	08004269 	.word	0x08004269
 800421c:	0800446d 	.word	0x0800446d
 8004220:	0800446d 	.word	0x0800446d
 8004224:	0800446d 	.word	0x0800446d
 8004228:	0800446d 	.word	0x0800446d
 800422c:	0800446d 	.word	0x0800446d
 8004230:	0800446d 	.word	0x0800446d
 8004234:	0800446d 	.word	0x0800446d
 8004238:	0800426f 	.word	0x0800426f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800423c:	4b90      	ldr	r3, [pc, #576]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004248:	4b8d      	ldr	r3, [pc, #564]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	08db      	lsrs	r3, r3, #3
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	4a8c      	ldr	r2, [pc, #560]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
 8004258:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800425a:	e10a      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800425c:	4b89      	ldr	r3, [pc, #548]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800425e:	61bb      	str	r3, [r7, #24]
    break;
 8004260:	e107      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004262:	4b89      	ldr	r3, [pc, #548]	; (8004488 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004264:	61bb      	str	r3, [r7, #24]
    break;
 8004266:	e104      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004268:	4b88      	ldr	r3, [pc, #544]	; (800448c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800426a:	61bb      	str	r3, [r7, #24]
    break;
 800426c:	e101      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800426e:	4b84      	ldr	r3, [pc, #528]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004278:	4b81      	ldr	r3, [pc, #516]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004282:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004284:	4b7e      	ldr	r3, [pc, #504]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800428e:	4b7c      	ldr	r3, [pc, #496]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004292:	08db      	lsrs	r3, r3, #3
 8004294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80da 	beq.w	8004466 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d05a      	beq.n	800436e <HAL_RCC_GetSysClockFreq+0x1b2>
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d302      	bcc.n	80042c2 <HAL_RCC_GetSysClockFreq+0x106>
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d078      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80042c0:	e099      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042c2:	4b6f      	ldr	r3, [pc, #444]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d02d      	beq.n	800432a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042ce:	4b6c      	ldr	r3, [pc, #432]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	08db      	lsrs	r3, r3, #3
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	4a6a      	ldr	r2, [pc, #424]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80042da:	fa22 f303 	lsr.w	r3, r2, r3
 80042de:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042f8:	4b61      	ldr	r3, [pc, #388]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004300:	ee07 3a90 	vmov	s15, r3
 8004304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004308:	ed97 6a02 	vldr	s12, [r7, #8]
 800430c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004490 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800431c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004324:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004328:	e087      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004334:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004494 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800433c:	4b50      	ldr	r3, [pc, #320]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004344:	ee07 3a90 	vmov	s15, r3
 8004348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004350:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004490 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004354:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004358:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800435c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004368:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800436c:	e065      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004378:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004498 <HAL_RCC_GetSysClockFreq+0x2dc>
 800437c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004380:	4b3f      	ldr	r3, [pc, #252]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004388:	ee07 3a90 	vmov	s15, r3
 800438c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004390:	ed97 6a02 	vldr	s12, [r7, #8]
 8004394:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004490 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004398:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800439c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043b0:	e043      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	ee07 3a90 	vmov	s15, r3
 80043b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043bc:	eddf 6a37 	vldr	s13, [pc, #220]	; 800449c <HAL_RCC_GetSysClockFreq+0x2e0>
 80043c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c4:	4b2e      	ldr	r3, [pc, #184]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043cc:	ee07 3a90 	vmov	s15, r3
 80043d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80043d8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004490 <HAL_RCC_GetSysClockFreq+0x2d4>
 80043dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043f4:	e021      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004400:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004498 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004408:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004418:	ed97 6a02 	vldr	s12, [r7, #8]
 800441c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004490 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004434:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004438:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	0a5b      	lsrs	r3, r3, #9
 8004440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004444:	3301      	adds	r3, #1
 8004446:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004452:	edd7 6a07 	vldr	s13, [r7, #28]
 8004456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800445e:	ee17 3a90 	vmov	r3, s15
 8004462:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004464:	e005      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
    break;
 800446a:	e002      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800446e:	61bb      	str	r3, [r7, #24]
    break;
 8004470:	bf00      	nop
  }

  return sysclockfreq;
 8004472:	69bb      	ldr	r3, [r7, #24]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3724      	adds	r7, #36	; 0x24
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	58024400 	.word	0x58024400
 8004484:	03d09000 	.word	0x03d09000
 8004488:	003d0900 	.word	0x003d0900
 800448c:	007a1200 	.word	0x007a1200
 8004490:	46000000 	.word	0x46000000
 8004494:	4c742400 	.word	0x4c742400
 8004498:	4a742400 	.word	0x4a742400
 800449c:	4af42400 	.word	0x4af42400

080044a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044a6:	f7ff fe89 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 80044aa:	4601      	mov	r1, r0
 80044ac:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	0a1b      	lsrs	r3, r3, #8
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80044b8:	5cd3      	ldrb	r3, [r2, r3]
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	fa21 f303 	lsr.w	r3, r1, r3
 80044c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80044ce:	5cd3      	ldrb	r3, [r2, r3]
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	fa22 f303 	lsr.w	r3, r2, r3
 80044da:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80044dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044de:	4a07      	ldr	r2, [pc, #28]	; (80044fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80044e6:	681b      	ldr	r3, [r3, #0]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	58024400 	.word	0x58024400
 80044f4:	080085c4 	.word	0x080085c4
 80044f8:	24000004 	.word	0x24000004
 80044fc:	24000000 	.word	0x24000000

08004500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004504:	f7ff ffcc 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 8004508:	4601      	mov	r1, r0
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004516:	5cd3      	ldrb	r3, [r2, r3]
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	58024400 	.word	0x58024400
 8004528:	080085c4 	.word	0x080085c4

0800452c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004530:	f7ff ffb6 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 8004534:	4601      	mov	r1, r0
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4a04      	ldr	r2, [pc, #16]	; (8004554 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004542:	5cd3      	ldrb	r3, [r2, r3]
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	58024400 	.word	0x58024400
 8004554:	080085c4 	.word	0x080085c4

08004558 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004560:	2300      	movs	r3, #0
 8004562:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004564:	2300      	movs	r3, #0
 8004566:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d03d      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457c:	d013      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800457e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004582:	d802      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004588:	e01f      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x72>
 800458a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800458e:	d013      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004590:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004594:	d01c      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004596:	e018      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004598:	4baf      	ldr	r3, [pc, #700]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	4aae      	ldr	r2, [pc, #696]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800459e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045a4:	e015      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3304      	adds	r3, #4
 80045aa:	2102      	movs	r1, #2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f001 f95f 	bl	8005870 <RCCEx_PLL2_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045b6:	e00c      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3324      	adds	r3, #36	; 0x24
 80045bc:	2102      	movs	r1, #2
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 fa08 	bl	80059d4 <RCCEx_PLL3_Config>
 80045c4:	4603      	mov	r3, r0
 80045c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045c8:	e003      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	75fb      	strb	r3, [r7, #23]
      break;
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80045d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045d8:	4b9f      	ldr	r3, [pc, #636]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e4:	499c      	ldr	r1, [pc, #624]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	650b      	str	r3, [r1, #80]	; 0x50
 80045ea:	e001      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d03d      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	2b04      	cmp	r3, #4
 8004602:	d826      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004604:	a201      	add	r2, pc, #4	; (adr r2, 800460c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	08004621 	.word	0x08004621
 8004610:	0800462f 	.word	0x0800462f
 8004614:	08004641 	.word	0x08004641
 8004618:	08004659 	.word	0x08004659
 800461c:	08004659 	.word	0x08004659
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004620:	4b8d      	ldr	r3, [pc, #564]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	4a8c      	ldr	r2, [pc, #560]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800462c:	e015      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f001 f91b 	bl	8005870 <RCCEx_PLL2_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800463e:	e00c      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3324      	adds	r3, #36	; 0x24
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f001 f9c4 	bl	80059d4 <RCCEx_PLL3_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004650:	e003      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
      break;
 8004656:	e000      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004660:	4b7d      	ldr	r3, [pc, #500]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004664:	f023 0207 	bic.w	r2, r3, #7
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	497a      	ldr	r1, [pc, #488]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800466e:	4313      	orrs	r3, r2
 8004670:	650b      	str	r3, [r1, #80]	; 0x50
 8004672:	e001      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004680:	2b00      	cmp	r3, #0
 8004682:	d03e      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d01c      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800468c:	2b80      	cmp	r3, #128	; 0x80
 800468e:	d804      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d00d      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004698:	e01e      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800469a:	2bc0      	cmp	r3, #192	; 0xc0
 800469c:	d01f      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x186>
 800469e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a2:	d01e      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046a4:	e018      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a6:	4b6c      	ldr	r3, [pc, #432]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	4a6b      	ldr	r2, [pc, #428]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046b2:	e017      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 f8d8 	bl	8005870 <RCCEx_PLL2_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046c4:	e00e      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3324      	adds	r3, #36	; 0x24
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 f981 	bl	80059d4 <RCCEx_PLL3_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046d6:	e005      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
      break;
 80046dc:	e002      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80046e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046ea:	4b5b      	ldr	r3, [pc, #364]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	4958      	ldr	r1, [pc, #352]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	650b      	str	r3, [r1, #80]	; 0x50
 80046fc:	e001      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
 8004700:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470a:	2b00      	cmp	r3, #0
 800470c:	d044      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004718:	d01f      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471e:	d805      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004728:	d00e      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800472a:	e01f      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800472c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004730:	d01f      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004732:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004736:	d01e      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004738:	e018      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473a:	4b47      	ldr	r3, [pc, #284]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	4a46      	ldr	r2, [pc, #280]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004744:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004746:	e017      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f001 f88e 	bl	8005870 <RCCEx_PLL2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004758:	e00e      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3324      	adds	r3, #36	; 0x24
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f001 f937 	bl	80059d4 <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800476a:	e005      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
      break;
 8004770:	e002      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800477e:	4b36      	ldr	r3, [pc, #216]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800478c:	4932      	ldr	r1, [pc, #200]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800478e:	4313      	orrs	r3, r2
 8004790:	658b      	str	r3, [r1, #88]	; 0x58
 8004792:	e001      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d044      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ae:	d01f      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80047b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b4:	d805      	bhi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80047ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047be:	d00e      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x286>
 80047c0:	e01f      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80047c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047c6:	d01f      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80047c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047cc:	d01e      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80047ce:	e018      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d0:	4b21      	ldr	r3, [pc, #132]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4a20      	ldr	r2, [pc, #128]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047dc:	e017      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3304      	adds	r3, #4
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 f843 	bl	8005870 <RCCEx_PLL2_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047ee:	e00e      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3324      	adds	r3, #36	; 0x24
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 f8ec 	bl	80059d4 <RCCEx_PLL3_Config>
 80047fc:	4603      	mov	r3, r0
 80047fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004800:	e005      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
      break;
 8004806:	e002      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004808:	bf00      	nop
 800480a:	e000      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800480c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004814:	4b10      	ldr	r3, [pc, #64]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004822:	490d      	ldr	r1, [pc, #52]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004824:	4313      	orrs	r3, r2
 8004826:	658b      	str	r3, [r1, #88]	; 0x58
 8004828:	e001      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d035      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483e:	2b10      	cmp	r3, #16
 8004840:	d00c      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004842:	2b10      	cmp	r3, #16
 8004844:	d802      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01b      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800484a:	e017      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800484c:	2b20      	cmp	r3, #32
 800484e:	d00c      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004850:	2b30      	cmp	r3, #48	; 0x30
 8004852:	d018      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004854:	e012      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004856:	bf00      	nop
 8004858:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485c:	4baf      	ldr	r3, [pc, #700]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4aae      	ldr	r2, [pc, #696]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004868:	e00e      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	2102      	movs	r1, #2
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fffd 	bl	8005870 <RCCEx_PLL2_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800487a:	e005      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	75fb      	strb	r3, [r7, #23]
      break;
 8004880:	e002      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004882:	bf00      	nop
 8004884:	e000      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800488e:	4ba3      	ldr	r3, [pc, #652]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489a:	49a0      	ldr	r1, [pc, #640]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800489c:	4313      	orrs	r3, r2
 800489e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048a0:	e001      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d042      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ba:	d01f      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80048bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c0:	d805      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d00e      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x392>
 80048cc:	e01f      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80048ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048d2:	d01f      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80048d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d8:	d01e      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80048da:	e018      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048dc:	4b8f      	ldr	r3, [pc, #572]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	4a8e      	ldr	r2, [pc, #568]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048e8:	e017      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3304      	adds	r3, #4
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 ffbd 	bl	8005870 <RCCEx_PLL2_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048fa:	e00e      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3324      	adds	r3, #36	; 0x24
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f001 f866 	bl	80059d4 <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800490c:	e005      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
      break;
 8004912:	e002      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004914:	bf00      	nop
 8004916:	e000      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004920:	4b7e      	ldr	r3, [pc, #504]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004924:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	497b      	ldr	r1, [pc, #492]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	650b      	str	r3, [r1, #80]	; 0x50
 8004932:	e001      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d042      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800494c:	d01b      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800494e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004952:	d805      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d022      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800495e:	e01b      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004960:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004964:	d01d      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004966:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800496a:	d01c      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800496c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004970:	d01b      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004972:	e011      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f000 ff78 	bl	8005870 <RCCEx_PLL2_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004984:	e012      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3324      	adds	r3, #36	; 0x24
 800498a:	2101      	movs	r1, #1
 800498c:	4618      	mov	r0, r3
 800498e:	f001 f821 	bl	80059d4 <RCCEx_PLL3_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004996:	e009      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
      break;
 800499c:	e006      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800499e:	bf00      	nop
 80049a0:	e004      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80049a2:	bf00      	nop
 80049a4:	e002      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80049a6:	bf00      	nop
 80049a8:	e000      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80049aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ac:	7dfb      	ldrb	r3, [r7, #23]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80049b2:	4b5a      	ldr	r3, [pc, #360]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049be:	4957      	ldr	r1, [pc, #348]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	650b      	str	r3, [r1, #80]	; 0x50
 80049c4:	e001      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d044      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e0:	d01b      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80049e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e6:	d805      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d022      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80049ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80049f2:	e01b      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f8:	d01d      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80049fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049fe:	d01c      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004a00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a04:	d01b      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004a06:	e011      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 ff2e 	bl	8005870 <RCCEx_PLL2_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a18:	e012      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3324      	adds	r3, #36	; 0x24
 8004a1e:	2101      	movs	r1, #1
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 ffd7 	bl	80059d4 <RCCEx_PLL3_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a2a:	e009      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a30:	e006      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004a32:	bf00      	nop
 8004a34:	e004      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004a36:	bf00      	nop
 8004a38:	e002      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a46:	4b35      	ldr	r3, [pc, #212]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a54:	4931      	ldr	r1, [pc, #196]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	658b      	str	r3, [r1, #88]	; 0x58
 8004a5a:	e001      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d02d      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a74:	d005      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a7a:	d009      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004a80:	e00f      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a82:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	4a25      	ldr	r2, [pc, #148]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a8e:	e00c      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	2101      	movs	r1, #1
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 feea 	bl	8005870 <RCCEx_PLL2_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa6:	e000      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d109      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ab0:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004abc:	4917      	ldr	r1, [pc, #92]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8004ac2:	e001      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
 8004ac6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d035      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d81b      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b21 	.word	0x08004b21
 8004ae8:	08004af5 	.word	0x08004af5
 8004aec:	08004b03 	.word	0x08004b03
 8004af0:	08004b21 	.word	0x08004b21
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b00:	e00f      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3304      	adds	r3, #4
 8004b06:	2102      	movs	r1, #2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 feb1 	bl	8005870 <RCCEx_PLL2_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b12:	e006      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
      break;
 8004b18:	e003      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004b1a:	bf00      	nop
 8004b1c:	58024400 	.word	0x58024400
      break;
 8004b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b28:	4bba      	ldr	r3, [pc, #744]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	f023 0203 	bic.w	r2, r3, #3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	49b7      	ldr	r1, [pc, #732]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b3a:	e001      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8086 	beq.w	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b4e:	4bb2      	ldr	r3, [pc, #712]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4ab1      	ldr	r2, [pc, #708]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b5a:	f7fc fa5d 	bl	8001018 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b60:	e009      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b62:	f7fc fa59 	bl	8001018 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b64      	cmp	r3, #100	; 0x64
 8004b6e:	d902      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	75fb      	strb	r3, [r7, #23]
        break;
 8004b74:	e005      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b76:	4ba8      	ldr	r3, [pc, #672]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0ef      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d166      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b88:	4ba2      	ldr	r3, [pc, #648]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b92:	4053      	eors	r3, r2
 8004b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b9c:	4b9d      	ldr	r3, [pc, #628]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ba6:	4b9b      	ldr	r3, [pc, #620]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	4a9a      	ldr	r2, [pc, #616]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb2:	4b98      	ldr	r3, [pc, #608]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	4a97      	ldr	r2, [pc, #604]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004bbe:	4a95      	ldr	r2, [pc, #596]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bce:	d115      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fc fa22 	bl	8001018 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bd6:	e00b      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd8:	f7fc fa1e 	bl	8001018 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d902      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	75fb      	strb	r3, [r7, #23]
            break;
 8004bee:	e005      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bf0:	4b88      	ldr	r3, [pc, #544]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0ed      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d126      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c10:	d10d      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004c12:	4b80      	ldr	r3, [pc, #512]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c20:	0919      	lsrs	r1, r3, #4
 8004c22:	4b7e      	ldr	r3, [pc, #504]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004c24:	400b      	ands	r3, r1
 8004c26:	497b      	ldr	r1, [pc, #492]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	610b      	str	r3, [r1, #16]
 8004c2c:	e005      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004c2e:	4b79      	ldr	r3, [pc, #484]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	4a78      	ldr	r2, [pc, #480]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c38:	6113      	str	r3, [r2, #16]
 8004c3a:	4b76      	ldr	r3, [pc, #472]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c48:	4972      	ldr	r1, [pc, #456]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	670b      	str	r3, [r1, #112]	; 0x70
 8004c4e:	e004      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
 8004c52:	75bb      	strb	r3, [r7, #22]
 8004c54:	e001      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d07d      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c6a:	2b28      	cmp	r3, #40	; 0x28
 8004c6c:	d866      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004c6e:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004d43 	.word	0x08004d43
 8004c78:	08004d3d 	.word	0x08004d3d
 8004c7c:	08004d3d 	.word	0x08004d3d
 8004c80:	08004d3d 	.word	0x08004d3d
 8004c84:	08004d3d 	.word	0x08004d3d
 8004c88:	08004d3d 	.word	0x08004d3d
 8004c8c:	08004d3d 	.word	0x08004d3d
 8004c90:	08004d3d 	.word	0x08004d3d
 8004c94:	08004d19 	.word	0x08004d19
 8004c98:	08004d3d 	.word	0x08004d3d
 8004c9c:	08004d3d 	.word	0x08004d3d
 8004ca0:	08004d3d 	.word	0x08004d3d
 8004ca4:	08004d3d 	.word	0x08004d3d
 8004ca8:	08004d3d 	.word	0x08004d3d
 8004cac:	08004d3d 	.word	0x08004d3d
 8004cb0:	08004d3d 	.word	0x08004d3d
 8004cb4:	08004d2b 	.word	0x08004d2b
 8004cb8:	08004d3d 	.word	0x08004d3d
 8004cbc:	08004d3d 	.word	0x08004d3d
 8004cc0:	08004d3d 	.word	0x08004d3d
 8004cc4:	08004d3d 	.word	0x08004d3d
 8004cc8:	08004d3d 	.word	0x08004d3d
 8004ccc:	08004d3d 	.word	0x08004d3d
 8004cd0:	08004d3d 	.word	0x08004d3d
 8004cd4:	08004d43 	.word	0x08004d43
 8004cd8:	08004d3d 	.word	0x08004d3d
 8004cdc:	08004d3d 	.word	0x08004d3d
 8004ce0:	08004d3d 	.word	0x08004d3d
 8004ce4:	08004d3d 	.word	0x08004d3d
 8004ce8:	08004d3d 	.word	0x08004d3d
 8004cec:	08004d3d 	.word	0x08004d3d
 8004cf0:	08004d3d 	.word	0x08004d3d
 8004cf4:	08004d43 	.word	0x08004d43
 8004cf8:	08004d3d 	.word	0x08004d3d
 8004cfc:	08004d3d 	.word	0x08004d3d
 8004d00:	08004d3d 	.word	0x08004d3d
 8004d04:	08004d3d 	.word	0x08004d3d
 8004d08:	08004d3d 	.word	0x08004d3d
 8004d0c:	08004d3d 	.word	0x08004d3d
 8004d10:	08004d3d 	.word	0x08004d3d
 8004d14:	08004d43 	.word	0x08004d43
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fda6 	bl	8005870 <RCCEx_PLL2_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d28:	e00c      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3324      	adds	r3, #36	; 0x24
 8004d2e:	2101      	movs	r1, #1
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fe4f 	bl	80059d4 <RCCEx_PLL3_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d3a:	e003      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d40:	e000      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d4a:	4b32      	ldr	r3, [pc, #200]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d56:	492f      	ldr	r1, [pc, #188]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	654b      	str	r3, [r1, #84]	; 0x54
 8004d5c:	e001      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
 8004d60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d037      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	d820      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004dbf 	.word	0x08004dbf
 8004d80:	08004d95 	.word	0x08004d95
 8004d84:	08004da7 	.word	0x08004da7
 8004d88:	08004dbf 	.word	0x08004dbf
 8004d8c:	08004dbf 	.word	0x08004dbf
 8004d90:	08004dbf 	.word	0x08004dbf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fd68 	bl	8005870 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004da4:	e00c      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3324      	adds	r3, #36	; 0x24
 8004daa:	2101      	movs	r1, #1
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fe11 	bl	80059d4 <RCCEx_PLL3_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004db6:	e003      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	75fb      	strb	r3, [r7, #23]
      break;
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004dc6:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dca:	f023 0207 	bic.w	r2, r3, #7
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd2:	4910      	ldr	r1, [pc, #64]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	654b      	str	r3, [r1, #84]	; 0x54
 8004dd8:	e001      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d040      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	2b05      	cmp	r3, #5
 8004df2:	d827      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e4b 	.word	0x08004e4b
 8004e00:	08004e21 	.word	0x08004e21
 8004e04:	08004e33 	.word	0x08004e33
 8004e08:	08004e4b 	.word	0x08004e4b
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e4b 	.word	0x08004e4b
 8004e14:	58024400 	.word	0x58024400
 8004e18:	58024800 	.word	0x58024800
 8004e1c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	2101      	movs	r1, #1
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fd22 	bl	8005870 <RCCEx_PLL2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e30:	e00c      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3324      	adds	r3, #36	; 0x24
 8004e36:	2101      	movs	r1, #1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fdcb 	bl	80059d4 <RCCEx_PLL3_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e42:	e003      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
      break;
 8004e48:	e000      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e52:	4bb2      	ldr	r3, [pc, #712]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	f023 0207 	bic.w	r2, r3, #7
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e60:	49ae      	ldr	r1, [pc, #696]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	658b      	str	r3, [r1, #88]	; 0x58
 8004e66:	e001      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d044      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e82:	d01b      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e88:	d805      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d022      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004e94:	e01b      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9a:	d01d      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea0:	d01c      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004ea2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ea6:	d01b      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004ea8:	e011      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3304      	adds	r3, #4
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fcdd 	bl	8005870 <RCCEx_PLL2_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004eba:	e012      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3324      	adds	r3, #36	; 0x24
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fd86 	bl	80059d4 <RCCEx_PLL3_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ecc:	e009      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed2:	e006      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ed4:	bf00      	nop
 8004ed6:	e004      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ed8:	bf00      	nop
 8004eda:	e002      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004edc:	bf00      	nop
 8004ede:	e000      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ee8:	4b8c      	ldr	r3, [pc, #560]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef6:	4989      	ldr	r1, [pc, #548]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	654b      	str	r3, [r1, #84]	; 0x54
 8004efc:	e001      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
 8004f00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d044      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f18:	d01b      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1e:	d805      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d022      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004f2a:	e01b      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f30:	d01d      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004f32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f36:	d01c      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004f38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f3c:	d01b      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004f3e:	e011      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fc92 	bl	8005870 <RCCEx_PLL2_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f50:	e012      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3324      	adds	r3, #36	; 0x24
 8004f56:	2102      	movs	r1, #2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fd3b 	bl	80059d4 <RCCEx_PLL3_Config>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f62:	e009      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	75fb      	strb	r3, [r7, #23]
      break;
 8004f68:	e006      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004f6a:	bf00      	nop
 8004f6c:	e004      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004f6e:	bf00      	nop
 8004f70:	e002      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004f72:	bf00      	nop
 8004f74:	e000      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f7e:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f8c:	4963      	ldr	r1, [pc, #396]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	658b      	str	r3, [r1, #88]	; 0x58
 8004f92:	e001      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d044      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fae:	d01b      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb4:	d805      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d022      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004fc0:	e01b      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc6:	d01d      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004fc8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004fcc:	d01c      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004fce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004fd2:	d01b      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004fd4:	e011      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fc47 	bl	8005870 <RCCEx_PLL2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004fe6:	e012      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3324      	adds	r3, #36	; 0x24
 8004fec:	2102      	movs	r1, #2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fcf0 	bl	80059d4 <RCCEx_PLL3_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004ff8:	e009      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ffe:	e006      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005000:	bf00      	nop
 8005002:	e004      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005004:	bf00      	nop
 8005006:	e002      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005008:	bf00      	nop
 800500a:	e000      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800500c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005014:	4b41      	ldr	r3, [pc, #260]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005022:	493e      	ldr	r1, [pc, #248]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005024:	4313      	orrs	r3, r2
 8005026:	658b      	str	r3, [r1, #88]	; 0x58
 8005028:	e001      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d10a      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3324      	adds	r3, #36	; 0x24
 800504a:	2102      	movs	r1, #2
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fcc1 	bl	80059d4 <RCCEx_PLL3_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800505c:	4b2f      	ldr	r3, [pc, #188]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800506a:	492c      	ldr	r1, [pc, #176]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800506c:	4313      	orrs	r3, r2
 800506e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005086:	d10a      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3324      	adds	r3, #36	; 0x24
 800508c:	2102      	movs	r1, #2
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fca0 	bl	80059d4 <RCCEx_PLL3_Config>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800509e:	4b1f      	ldr	r3, [pc, #124]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ac:	491b      	ldr	r1, [pc, #108]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d032      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d00d      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80050ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ce:	d016      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d111      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fbc8 	bl	8005870 <RCCEx_PLL2_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80050e4:	e00c      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3324      	adds	r3, #36	; 0x24
 80050ea:	2102      	movs	r1, #2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fc71 	bl	80059d4 <RCCEx_PLL3_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80050f6:	e003      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	75fb      	strb	r3, [r7, #23]
      break;
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80050fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10c      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005114:	4901      	ldr	r1, [pc, #4]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005116:	4313      	orrs	r3, r2
 8005118:	658b      	str	r3, [r1, #88]	; 0x58
 800511a:	e003      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800511c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d02f      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800513a:	d00c      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800513c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005140:	d015      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005146:	d10f      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005148:	4b71      	ldr	r3, [pc, #452]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	4a70      	ldr	r2, [pc, #448]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800514e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005154:	e00c      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3324      	adds	r3, #36	; 0x24
 800515a:	2101      	movs	r1, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fc39 	bl	80059d4 <RCCEx_PLL3_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005166:	e003      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	75fb      	strb	r3, [r7, #23]
      break;
 800516c:	e000      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800516e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005176:	4b66      	ldr	r3, [pc, #408]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005184:	4962      	ldr	r1, [pc, #392]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005186:	4313      	orrs	r3, r2
 8005188:	654b      	str	r3, [r1, #84]	; 0x54
 800518a:	e001      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d029      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80051a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a8:	d007      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80051aa:	e00f      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ac:	4b58      	ldr	r3, [pc, #352]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	4a57      	ldr	r2, [pc, #348]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80051b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80051b8:	e00b      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	2102      	movs	r1, #2
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fb55 	bl	8005870 <RCCEx_PLL2_Config>
 80051c6:	4603      	mov	r3, r0
 80051c8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80051ca:	e002      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	75fb      	strb	r3, [r7, #23]
      break;
 80051d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051d8:	4b4d      	ldr	r3, [pc, #308]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80051da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e4:	494a      	ldr	r1, [pc, #296]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80051ea:	e001      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
 80051ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3324      	adds	r3, #36	; 0x24
 8005200:	2102      	movs	r1, #2
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fbe6 	bl	80059d4 <RCCEx_PLL3_Config>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d02f      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005226:	d00c      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522c:	d802      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d011      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005232:	e00d      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005238:	d00f      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800523a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800523e:	d00e      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005240:	e006      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005242:	4b33      	ldr	r3, [pc, #204]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	4a32      	ldr	r2, [pc, #200]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800524c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800524e:	e007      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	75fb      	strb	r3, [r7, #23]
      break;
 8005254:	e004      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005256:	bf00      	nop
 8005258:	e002      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800525e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005260:	7dfb      	ldrb	r3, [r7, #23]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005266:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005272:	4927      	ldr	r1, [pc, #156]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005274:	4313      	orrs	r3, r2
 8005276:	654b      	str	r3, [r1, #84]	; 0x54
 8005278:	e001      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800528a:	4b21      	ldr	r3, [pc, #132]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800528c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	491e      	ldr	r1, [pc, #120]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005298:	4313      	orrs	r3, r2
 800529a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b4:	4916      	ldr	r1, [pc, #88]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00d      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052c6:	4b12      	ldr	r3, [pc, #72]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	4a11      	ldr	r2, [pc, #68]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052d0:	6113      	str	r3, [r2, #16]
 80052d2:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052dc:	490c      	ldr	r1, [pc, #48]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	da08      	bge.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f6:	4906      	ldr	r1, [pc, #24]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80052fc:	7dbb      	ldrb	r3, [r7, #22]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e000      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	58024400 	.word	0x58024400

08005314 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005318:	f7ff f8c2 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 800531c:	4601      	mov	r1, r0
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4a04      	ldr	r2, [pc, #16]	; (800533c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800532a:	5cd3      	ldrb	r3, [r2, r3]
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	58024400 	.word	0x58024400
 800533c:	080085c4 	.word	0x080085c4

08005340 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	; 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005348:	4b9d      	ldr	r3, [pc, #628]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005352:	4b9b      	ldr	r3, [pc, #620]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	0b1b      	lsrs	r3, r3, #12
 8005358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800535c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800535e:	4b98      	ldr	r3, [pc, #608]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	091b      	lsrs	r3, r3, #4
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800536a:	4b95      	ldr	r3, [pc, #596]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	08db      	lsrs	r3, r3, #3
 8005370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 810a 	beq.w	80055a2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d05a      	beq.n	800544a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005394:	2b01      	cmp	r3, #1
 8005396:	d302      	bcc.n	800539e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005398:	2b02      	cmp	r3, #2
 800539a:	d078      	beq.n	800548e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800539c:	e099      	b.n	80054d2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800539e:	4b88      	ldr	r3, [pc, #544]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d02d      	beq.n	8005406 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053aa:	4b85      	ldr	r3, [pc, #532]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	08db      	lsrs	r3, r3, #3
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	4a83      	ldr	r2, [pc, #524]	; (80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80053b6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ba:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d4:	4b7a      	ldr	r3, [pc, #488]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80053ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005400:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005404:	e087      	b.n	8005516 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005410:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005418:	4b69      	ldr	r3, [pc, #420]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005420:	ee07 3a90 	vmov	s15, r3
 8005424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005428:	ed97 6a03 	vldr	s12, [r7, #12]
 800542c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005444:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005448:	e065      	b.n	8005516 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	ee07 3a90 	vmov	s15, r3
 8005450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005454:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545c:	4b58      	ldr	r3, [pc, #352]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005464:	ee07 3a90 	vmov	s15, r3
 8005468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005470:	eddf 5a55 	vldr	s11, [pc, #340]	; 80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005488:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800548c:	e043      	b.n	8005516 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005498:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800549c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a0:	4b47      	ldr	r3, [pc, #284]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80054b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054d0:	e021      	b.n	8005516 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	ee07 3a90 	vmov	s15, r3
 80054d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054dc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80054e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e4:	4b36      	ldr	r3, [pc, #216]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ec:	ee07 3a90 	vmov	s15, r3
 80054f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80054fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005510:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005514:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005516:	4b2a      	ldr	r3, [pc, #168]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	0a5b      	lsrs	r3, r3, #9
 800551c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005520:	ee07 3a90 	vmov	s15, r3
 8005524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800552c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005530:	edd7 6a07 	vldr	s13, [r7, #28]
 8005534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800553c:	ee17 2a90 	vmov	r2, s15
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005544:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	0c1b      	lsrs	r3, r3, #16
 800554a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800555a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800555e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800556a:	ee17 2a90 	vmov	r2, s15
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005572:	4b13      	ldr	r3, [pc, #76]	; (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	0e1b      	lsrs	r3, r3, #24
 8005578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800557c:	ee07 3a90 	vmov	s15, r3
 8005580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005588:	ee37 7a87 	vadd.f32	s14, s15, s14
 800558c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005598:	ee17 2a90 	vmov	r2, s15
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80055a0:	e008      	b.n	80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	3724      	adds	r7, #36	; 0x24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	58024400 	.word	0x58024400
 80055c4:	03d09000 	.word	0x03d09000
 80055c8:	46000000 	.word	0x46000000
 80055cc:	4c742400 	.word	0x4c742400
 80055d0:	4a742400 	.word	0x4a742400
 80055d4:	4af42400 	.word	0x4af42400

080055d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80055d8:	b480      	push	{r7}
 80055da:	b089      	sub	sp, #36	; 0x24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055e0:	4b9d      	ldr	r3, [pc, #628]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80055ea:	4b9b      	ldr	r3, [pc, #620]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	0d1b      	lsrs	r3, r3, #20
 80055f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055f6:	4b98      	ldr	r3, [pc, #608]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	0a1b      	lsrs	r3, r3, #8
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005602:	4b95      	ldr	r3, [pc, #596]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	08db      	lsrs	r3, r3, #3
 8005608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	fb02 f303 	mul.w	r3, r2, r3
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 810a 	beq.w	800583a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d05a      	beq.n	80056e2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800562c:	2b01      	cmp	r3, #1
 800562e:	d302      	bcc.n	8005636 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005630:	2b02      	cmp	r3, #2
 8005632:	d078      	beq.n	8005726 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005634:	e099      	b.n	800576a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005636:	4b88      	ldr	r3, [pc, #544]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d02d      	beq.n	800569e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005642:	4b85      	ldr	r3, [pc, #532]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	08db      	lsrs	r3, r3, #3
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	4a83      	ldr	r2, [pc, #524]	; (800585c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800564e:	fa22 f303 	lsr.w	r3, r2, r3
 8005652:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566c:	4b7a      	ldr	r3, [pc, #488]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005680:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005698:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800569c:	e087      	b.n	80057ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80056ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b0:	4b69      	ldr	r3, [pc, #420]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80056c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056e0:	e065      	b.n	80057ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	ee07 3a90 	vmov	s15, r3
 80056e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80056f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f4:	4b58      	ldr	r3, [pc, #352]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fc:	ee07 3a90 	vmov	s15, r3
 8005700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005704:	ed97 6a03 	vldr	s12, [r7, #12]
 8005708:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800570c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005720:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005724:	e043      	b.n	80057ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005730:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005738:	4b47      	ldr	r3, [pc, #284]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005748:	ed97 6a03 	vldr	s12, [r7, #12]
 800574c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005764:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005768:	e021      	b.n	80057ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005774:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577c:	4b36      	ldr	r3, [pc, #216]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005790:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ac:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80057ae:	4b2a      	ldr	r3, [pc, #168]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	0a5b      	lsrs	r3, r3, #9
 80057b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80057cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d4:	ee17 2a90 	vmov	r2, s15
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80057dc:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	0c1b      	lsrs	r3, r3, #16
 80057e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80057fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005802:	ee17 2a90 	vmov	r2, s15
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800580a:	4b13      	ldr	r3, [pc, #76]	; (8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	0e1b      	lsrs	r3, r3, #24
 8005810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005814:	ee07 3a90 	vmov	s15, r3
 8005818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005820:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005824:	edd7 6a07 	vldr	s13, [r7, #28]
 8005828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800582c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005830:	ee17 2a90 	vmov	r2, s15
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005838:	e008      	b.n	800584c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	609a      	str	r2, [r3, #8]
}
 800584c:	bf00      	nop
 800584e:	3724      	adds	r7, #36	; 0x24
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	58024400 	.word	0x58024400
 800585c:	03d09000 	.word	0x03d09000
 8005860:	46000000 	.word	0x46000000
 8005864:	4c742400 	.word	0x4c742400
 8005868:	4a742400 	.word	0x4a742400
 800586c:	4af42400 	.word	0x4af42400

08005870 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800587e:	4b53      	ldr	r3, [pc, #332]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b03      	cmp	r3, #3
 8005888:	d101      	bne.n	800588e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e099      	b.n	80059c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800588e:	4b4f      	ldr	r3, [pc, #316]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a4e      	ldr	r2, [pc, #312]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005894:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800589a:	f7fb fbbd 	bl	8001018 <HAL_GetTick>
 800589e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058a0:	e008      	b.n	80058b4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80058a2:	f7fb fbb9 	bl	8001018 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e086      	b.n	80059c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058b4:	4b45      	ldr	r3, [pc, #276]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f0      	bne.n	80058a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058c0:	4b42      	ldr	r3, [pc, #264]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	031b      	lsls	r3, r3, #12
 80058ce:	493f      	ldr	r1, [pc, #252]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	628b      	str	r3, [r1, #40]	; 0x28
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	3b01      	subs	r3, #1
 80058da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	025b      	lsls	r3, r3, #9
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	061b      	lsls	r3, r3, #24
 8005900:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005904:	4931      	ldr	r1, [pc, #196]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005906:	4313      	orrs	r3, r2
 8005908:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800590a:	4b30      	ldr	r3, [pc, #192]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	492d      	ldr	r1, [pc, #180]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005918:	4313      	orrs	r3, r2
 800591a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800591c:	4b2b      	ldr	r3, [pc, #172]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	f023 0220 	bic.w	r2, r3, #32
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	4928      	ldr	r1, [pc, #160]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 800592a:	4313      	orrs	r3, r2
 800592c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800592e:	4b27      	ldr	r3, [pc, #156]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	4a26      	ldr	r2, [pc, #152]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005934:	f023 0310 	bic.w	r3, r3, #16
 8005938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 800593c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <RCCEx_PLL2_Config+0x160>)
 8005940:	4013      	ands	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	69d2      	ldr	r2, [r2, #28]
 8005946:	00d2      	lsls	r2, r2, #3
 8005948:	4920      	ldr	r1, [pc, #128]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 800594a:	4313      	orrs	r3, r2
 800594c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800594e:	4b1f      	ldr	r3, [pc, #124]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	4a1e      	ldr	r2, [pc, #120]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005954:	f043 0310 	orr.w	r3, r3, #16
 8005958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d106      	bne.n	800596e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005960:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	4a19      	ldr	r2, [pc, #100]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800596a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800596c:	e00f      	b.n	800598e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d106      	bne.n	8005982 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005974:	4b15      	ldr	r3, [pc, #84]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a14      	ldr	r2, [pc, #80]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 800597a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800597e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005980:	e005      	b.n	800598e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	4a11      	ldr	r2, [pc, #68]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800598c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a0e      	ldr	r2, [pc, #56]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 8005994:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599a:	f7fb fb3d 	bl	8001018 <HAL_GetTick>
 800599e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059a0:	e008      	b.n	80059b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059a2:	f7fb fb39 	bl	8001018 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e006      	b.n	80059c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <RCCEx_PLL2_Config+0x15c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0f0      	beq.n	80059a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	58024400 	.word	0x58024400
 80059d0:	ffff0007 	.word	0xffff0007

080059d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059e2:	4b53      	ldr	r3, [pc, #332]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d101      	bne.n	80059f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e099      	b.n	8005b26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059f2:	4b4f      	ldr	r3, [pc, #316]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a4e      	ldr	r2, [pc, #312]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 80059f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059fe:	f7fb fb0b 	bl	8001018 <HAL_GetTick>
 8005a02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a04:	e008      	b.n	8005a18 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a06:	f7fb fb07 	bl	8001018 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e086      	b.n	8005b26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a18:	4b45      	ldr	r3, [pc, #276]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f0      	bne.n	8005a06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a24:	4b42      	ldr	r3, [pc, #264]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	051b      	lsls	r3, r3, #20
 8005a32:	493f      	ldr	r1, [pc, #252]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	628b      	str	r3, [r1, #40]	; 0x28
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	025b      	lsls	r3, r3, #9
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	041b      	lsls	r3, r3, #16
 8005a56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	061b      	lsls	r3, r3, #24
 8005a64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a68:	4931      	ldr	r1, [pc, #196]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a6e:	4b30      	ldr	r3, [pc, #192]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	492d      	ldr	r1, [pc, #180]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a80:	4b2b      	ldr	r3, [pc, #172]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	4928      	ldr	r1, [pc, #160]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a92:	4b27      	ldr	r3, [pc, #156]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	4a26      	ldr	r2, [pc, #152]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a9e:	4b24      	ldr	r3, [pc, #144]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa2:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <RCCEx_PLL3_Config+0x160>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	69d2      	ldr	r2, [r2, #28]
 8005aaa:	00d2      	lsls	r2, r2, #3
 8005aac:	4920      	ldr	r1, [pc, #128]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ab2:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	4a1e      	ldr	r2, [pc, #120]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d106      	bne.n	8005ad2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	4a19      	ldr	r2, [pc, #100]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005aca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ace:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ad0:	e00f      	b.n	8005af2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d106      	bne.n	8005ae6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ad8:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	4a14      	ldr	r2, [pc, #80]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005ade:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ae2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ae4:	e005      	b.n	8005af2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ae6:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	4a11      	ldr	r2, [pc, #68]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005af2:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a0e      	ldr	r2, [pc, #56]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afe:	f7fb fa8b 	bl	8001018 <HAL_GetTick>
 8005b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b04:	e008      	b.n	8005b18 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b06:	f7fb fa87 	bl	8001018 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e006      	b.n	8005b26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <RCCEx_PLL3_Config+0x15c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0f0      	beq.n	8005b06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	58024400 	.word	0x58024400
 8005b34:	ffff0007 	.word	0xffff0007

08005b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e042      	b.n	8005bd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fb f8bd 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2224      	movs	r2, #36	; 0x24
 8005b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8c4 	bl	8005d08 <UART_SetConfig>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e022      	b.n	8005bd0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f002 fa36 	bl	8008004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f002 fabd 	bl	8008148 <UART_CheckIdleState>
 8005bce:	4603      	mov	r3, r0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	; 0x28
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	f040 8083 	bne.w	8005cfa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_UART_Transmit+0x28>
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e07b      	b.n	8005cfc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_UART_Transmit+0x3a>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e074      	b.n	8005cfc <HAL_UART_Transmit+0x124>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2221      	movs	r2, #33	; 0x21
 8005c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c2a:	f7fb f9f5 	bl	8001018 <HAL_GetTick>
 8005c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	88fa      	ldrh	r2, [r7, #6]
 8005c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c48:	d108      	bne.n	8005c5c <HAL_UART_Transmit+0x84>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e003      	b.n	8005c64 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c64:	e02c      	b.n	8005cc0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2180      	movs	r1, #128	; 0x80
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f002 fab1 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e03d      	b.n	8005cfc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10b      	bne.n	8005c9e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	3302      	adds	r3, #2
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	e007      	b.n	8005cae <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	3301      	adds	r3, #1
 8005cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1cc      	bne.n	8005c66 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2140      	movs	r1, #64	; 0x40
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f002 fa7e 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e00a      	b.n	8005cfc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e000      	b.n	8005cfc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005cfa:	2302      	movs	r3, #2
  }
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	0000      	movs	r0, r0
	...

08005d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d08:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d0c:	b090      	sub	sp, #64	; 0x40
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	4bc1      	ldr	r3, [pc, #772]	; (8006050 <UART_SetConfig+0x348>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d52:	430b      	orrs	r3, r1
 8005d54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4ab7      	ldr	r2, [pc, #732]	; (8006054 <UART_SetConfig+0x34c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d82:	4313      	orrs	r3, r2
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	4bb2      	ldr	r3, [pc, #712]	; (8006058 <UART_SetConfig+0x350>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d96:	430b      	orrs	r3, r1
 8005d98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	f023 010f 	bic.w	r1, r3, #15
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4aa9      	ldr	r2, [pc, #676]	; (800605c <UART_SetConfig+0x354>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d177      	bne.n	8005eaa <UART_SetConfig+0x1a2>
 8005dba:	4ba9      	ldr	r3, [pc, #676]	; (8006060 <UART_SetConfig+0x358>)
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dc2:	2b28      	cmp	r3, #40	; 0x28
 8005dc4:	d86c      	bhi.n	8005ea0 <UART_SetConfig+0x198>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <UART_SetConfig+0xc4>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005e71 	.word	0x08005e71
 8005dd0:	08005ea1 	.word	0x08005ea1
 8005dd4:	08005ea1 	.word	0x08005ea1
 8005dd8:	08005ea1 	.word	0x08005ea1
 8005ddc:	08005ea1 	.word	0x08005ea1
 8005de0:	08005ea1 	.word	0x08005ea1
 8005de4:	08005ea1 	.word	0x08005ea1
 8005de8:	08005ea1 	.word	0x08005ea1
 8005dec:	08005e79 	.word	0x08005e79
 8005df0:	08005ea1 	.word	0x08005ea1
 8005df4:	08005ea1 	.word	0x08005ea1
 8005df8:	08005ea1 	.word	0x08005ea1
 8005dfc:	08005ea1 	.word	0x08005ea1
 8005e00:	08005ea1 	.word	0x08005ea1
 8005e04:	08005ea1 	.word	0x08005ea1
 8005e08:	08005ea1 	.word	0x08005ea1
 8005e0c:	08005e81 	.word	0x08005e81
 8005e10:	08005ea1 	.word	0x08005ea1
 8005e14:	08005ea1 	.word	0x08005ea1
 8005e18:	08005ea1 	.word	0x08005ea1
 8005e1c:	08005ea1 	.word	0x08005ea1
 8005e20:	08005ea1 	.word	0x08005ea1
 8005e24:	08005ea1 	.word	0x08005ea1
 8005e28:	08005ea1 	.word	0x08005ea1
 8005e2c:	08005e89 	.word	0x08005e89
 8005e30:	08005ea1 	.word	0x08005ea1
 8005e34:	08005ea1 	.word	0x08005ea1
 8005e38:	08005ea1 	.word	0x08005ea1
 8005e3c:	08005ea1 	.word	0x08005ea1
 8005e40:	08005ea1 	.word	0x08005ea1
 8005e44:	08005ea1 	.word	0x08005ea1
 8005e48:	08005ea1 	.word	0x08005ea1
 8005e4c:	08005e91 	.word	0x08005e91
 8005e50:	08005ea1 	.word	0x08005ea1
 8005e54:	08005ea1 	.word	0x08005ea1
 8005e58:	08005ea1 	.word	0x08005ea1
 8005e5c:	08005ea1 	.word	0x08005ea1
 8005e60:	08005ea1 	.word	0x08005ea1
 8005e64:	08005ea1 	.word	0x08005ea1
 8005e68:	08005ea1 	.word	0x08005ea1
 8005e6c:	08005e99 	.word	0x08005e99
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e76:	e233      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e7e:	e22f      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005e80:	2308      	movs	r3, #8
 8005e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e86:	e22b      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e8e:	e227      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005e90:	2320      	movs	r3, #32
 8005e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e96:	e223      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005e98:	2340      	movs	r3, #64	; 0x40
 8005e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e9e:	e21f      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ea6:	bf00      	nop
 8005ea8:	e21a      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a6d      	ldr	r2, [pc, #436]	; (8006064 <UART_SetConfig+0x35c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d132      	bne.n	8005f1a <UART_SetConfig+0x212>
 8005eb4:	4b6a      	ldr	r3, [pc, #424]	; (8006060 <UART_SetConfig+0x358>)
 8005eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	2b05      	cmp	r3, #5
 8005ebe:	d827      	bhi.n	8005f10 <UART_SetConfig+0x208>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <UART_SetConfig+0x1c0>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005ee1 	.word	0x08005ee1
 8005ecc:	08005ee9 	.word	0x08005ee9
 8005ed0:	08005ef1 	.word	0x08005ef1
 8005ed4:	08005ef9 	.word	0x08005ef9
 8005ed8:	08005f01 	.word	0x08005f01
 8005edc:	08005f09 	.word	0x08005f09
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ee6:	e1fb      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005ee8:	2304      	movs	r3, #4
 8005eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005eee:	e1f7      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005ef0:	2308      	movs	r3, #8
 8005ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ef6:	e1f3      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005efe:	e1ef      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f00:	2320      	movs	r3, #32
 8005f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f06:	e1eb      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f08:	2340      	movs	r3, #64	; 0x40
 8005f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f0e:	e1e7      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f16:	bf00      	nop
 8005f18:	e1e2      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a52      	ldr	r2, [pc, #328]	; (8006068 <UART_SetConfig+0x360>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d132      	bne.n	8005f8a <UART_SetConfig+0x282>
 8005f24:	4b4e      	ldr	r3, [pc, #312]	; (8006060 <UART_SetConfig+0x358>)
 8005f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	2b05      	cmp	r3, #5
 8005f2e:	d827      	bhi.n	8005f80 <UART_SetConfig+0x278>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <UART_SetConfig+0x230>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005f51 	.word	0x08005f51
 8005f3c:	08005f59 	.word	0x08005f59
 8005f40:	08005f61 	.word	0x08005f61
 8005f44:	08005f69 	.word	0x08005f69
 8005f48:	08005f71 	.word	0x08005f71
 8005f4c:	08005f79 	.word	0x08005f79
 8005f50:	2300      	movs	r3, #0
 8005f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f56:	e1c3      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f5e:	e1bf      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f60:	2308      	movs	r3, #8
 8005f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f66:	e1bb      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f6e:	e1b7      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f70:	2320      	movs	r3, #32
 8005f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f76:	e1b3      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f78:	2340      	movs	r3, #64	; 0x40
 8005f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f7e:	e1af      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f86:	bf00      	nop
 8005f88:	e1aa      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a37      	ldr	r2, [pc, #220]	; (800606c <UART_SetConfig+0x364>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d132      	bne.n	8005ffa <UART_SetConfig+0x2f2>
 8005f94:	4b32      	ldr	r3, [pc, #200]	; (8006060 <UART_SetConfig+0x358>)
 8005f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	2b05      	cmp	r3, #5
 8005f9e:	d827      	bhi.n	8005ff0 <UART_SetConfig+0x2e8>
 8005fa0:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x2a0>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fc1 	.word	0x08005fc1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	08005fd1 	.word	0x08005fd1
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005fe9 	.word	0x08005fe9
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fc6:	e18b      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fce:	e187      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fd6:	e183      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fde:	e17f      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005fe0:	2320      	movs	r3, #32
 8005fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fe6:	e17b      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005fe8:	2340      	movs	r3, #64	; 0x40
 8005fea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fee:	e177      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005ff0:	2380      	movs	r3, #128	; 0x80
 8005ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ff6:	bf00      	nop
 8005ff8:	e172      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <UART_SetConfig+0x368>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d144      	bne.n	800608e <UART_SetConfig+0x386>
 8006004:	4b16      	ldr	r3, [pc, #88]	; (8006060 <UART_SetConfig+0x358>)
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	2b05      	cmp	r3, #5
 800600e:	d839      	bhi.n	8006084 <UART_SetConfig+0x37c>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x310>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	08006031 	.word	0x08006031
 800601c:	08006039 	.word	0x08006039
 8006020:	08006041 	.word	0x08006041
 8006024:	08006049 	.word	0x08006049
 8006028:	08006075 	.word	0x08006075
 800602c:	0800607d 	.word	0x0800607d
 8006030:	2300      	movs	r3, #0
 8006032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006036:	e153      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006038:	2304      	movs	r3, #4
 800603a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800603e:	e14f      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006040:	2308      	movs	r3, #8
 8006042:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006046:	e14b      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006048:	2310      	movs	r3, #16
 800604a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800604e:	e147      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006050:	cfff69f3 	.word	0xcfff69f3
 8006054:	58000c00 	.word	0x58000c00
 8006058:	11fff4ff 	.word	0x11fff4ff
 800605c:	40011000 	.word	0x40011000
 8006060:	58024400 	.word	0x58024400
 8006064:	40004400 	.word	0x40004400
 8006068:	40004800 	.word	0x40004800
 800606c:	40004c00 	.word	0x40004c00
 8006070:	40005000 	.word	0x40005000
 8006074:	2320      	movs	r3, #32
 8006076:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800607a:	e131      	b.n	80062e0 <UART_SetConfig+0x5d8>
 800607c:	2340      	movs	r3, #64	; 0x40
 800607e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006082:	e12d      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800608a:	bf00      	nop
 800608c:	e128      	b.n	80062e0 <UART_SetConfig+0x5d8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4ac3      	ldr	r2, [pc, #780]	; (80063a0 <UART_SetConfig+0x698>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d178      	bne.n	800618a <UART_SetConfig+0x482>
 8006098:	4bc2      	ldr	r3, [pc, #776]	; (80063a4 <UART_SetConfig+0x69c>)
 800609a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060a0:	2b28      	cmp	r3, #40	; 0x28
 80060a2:	d86d      	bhi.n	8006180 <UART_SetConfig+0x478>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <UART_SetConfig+0x3a4>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	08006151 	.word	0x08006151
 80060b0:	08006181 	.word	0x08006181
 80060b4:	08006181 	.word	0x08006181
 80060b8:	08006181 	.word	0x08006181
 80060bc:	08006181 	.word	0x08006181
 80060c0:	08006181 	.word	0x08006181
 80060c4:	08006181 	.word	0x08006181
 80060c8:	08006181 	.word	0x08006181
 80060cc:	08006159 	.word	0x08006159
 80060d0:	08006181 	.word	0x08006181
 80060d4:	08006181 	.word	0x08006181
 80060d8:	08006181 	.word	0x08006181
 80060dc:	08006181 	.word	0x08006181
 80060e0:	08006181 	.word	0x08006181
 80060e4:	08006181 	.word	0x08006181
 80060e8:	08006181 	.word	0x08006181
 80060ec:	08006161 	.word	0x08006161
 80060f0:	08006181 	.word	0x08006181
 80060f4:	08006181 	.word	0x08006181
 80060f8:	08006181 	.word	0x08006181
 80060fc:	08006181 	.word	0x08006181
 8006100:	08006181 	.word	0x08006181
 8006104:	08006181 	.word	0x08006181
 8006108:	08006181 	.word	0x08006181
 800610c:	08006169 	.word	0x08006169
 8006110:	08006181 	.word	0x08006181
 8006114:	08006181 	.word	0x08006181
 8006118:	08006181 	.word	0x08006181
 800611c:	08006181 	.word	0x08006181
 8006120:	08006181 	.word	0x08006181
 8006124:	08006181 	.word	0x08006181
 8006128:	08006181 	.word	0x08006181
 800612c:	08006171 	.word	0x08006171
 8006130:	08006181 	.word	0x08006181
 8006134:	08006181 	.word	0x08006181
 8006138:	08006181 	.word	0x08006181
 800613c:	08006181 	.word	0x08006181
 8006140:	08006181 	.word	0x08006181
 8006144:	08006181 	.word	0x08006181
 8006148:	08006181 	.word	0x08006181
 800614c:	08006179 	.word	0x08006179
 8006150:	2301      	movs	r3, #1
 8006152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006156:	e0c3      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006158:	2304      	movs	r3, #4
 800615a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800615e:	e0bf      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006160:	2308      	movs	r3, #8
 8006162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006166:	e0bb      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006168:	2310      	movs	r3, #16
 800616a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800616e:	e0b7      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006170:	2320      	movs	r3, #32
 8006172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006176:	e0b3      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006178:	2340      	movs	r3, #64	; 0x40
 800617a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800617e:	e0af      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006186:	bf00      	nop
 8006188:	e0aa      	b.n	80062e0 <UART_SetConfig+0x5d8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a86      	ldr	r2, [pc, #536]	; (80063a8 <UART_SetConfig+0x6a0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d132      	bne.n	80061fa <UART_SetConfig+0x4f2>
 8006194:	4b83      	ldr	r3, [pc, #524]	; (80063a4 <UART_SetConfig+0x69c>)
 8006196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	2b05      	cmp	r3, #5
 800619e:	d827      	bhi.n	80061f0 <UART_SetConfig+0x4e8>
 80061a0:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <UART_SetConfig+0x4a0>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	080061c1 	.word	0x080061c1
 80061ac:	080061c9 	.word	0x080061c9
 80061b0:	080061d1 	.word	0x080061d1
 80061b4:	080061d9 	.word	0x080061d9
 80061b8:	080061e1 	.word	0x080061e1
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80061c6:	e08b      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80061c8:	2304      	movs	r3, #4
 80061ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80061ce:	e087      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80061d0:	2308      	movs	r3, #8
 80061d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80061d6:	e083      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80061d8:	2310      	movs	r3, #16
 80061da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80061de:	e07f      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80061e0:	2320      	movs	r3, #32
 80061e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80061e6:	e07b      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80061e8:	2340      	movs	r3, #64	; 0x40
 80061ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80061ee:	e077      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80061f6:	bf00      	nop
 80061f8:	e072      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6b      	ldr	r2, [pc, #428]	; (80063ac <UART_SetConfig+0x6a4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d132      	bne.n	800626a <UART_SetConfig+0x562>
 8006204:	4b67      	ldr	r3, [pc, #412]	; (80063a4 <UART_SetConfig+0x69c>)
 8006206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	2b05      	cmp	r3, #5
 800620e:	d827      	bhi.n	8006260 <UART_SetConfig+0x558>
 8006210:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <UART_SetConfig+0x510>)
 8006212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006216:	bf00      	nop
 8006218:	08006231 	.word	0x08006231
 800621c:	08006239 	.word	0x08006239
 8006220:	08006241 	.word	0x08006241
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	08006259 	.word	0x08006259
 8006230:	2300      	movs	r3, #0
 8006232:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006236:	e053      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800623e:	e04f      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006246:	e04b      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800624e:	e047      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006250:	2320      	movs	r3, #32
 8006252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006256:	e043      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006258:	2340      	movs	r3, #64	; 0x40
 800625a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800625e:	e03f      	b.n	80062e0 <UART_SetConfig+0x5d8>
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006266:	bf00      	nop
 8006268:	e03a      	b.n	80062e0 <UART_SetConfig+0x5d8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a50      	ldr	r2, [pc, #320]	; (80063b0 <UART_SetConfig+0x6a8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d132      	bne.n	80062da <UART_SetConfig+0x5d2>
 8006274:	4b4b      	ldr	r3, [pc, #300]	; (80063a4 <UART_SetConfig+0x69c>)
 8006276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	2b05      	cmp	r3, #5
 800627e:	d827      	bhi.n	80062d0 <UART_SetConfig+0x5c8>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <UART_SetConfig+0x580>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	080062a1 	.word	0x080062a1
 800628c:	080062a9 	.word	0x080062a9
 8006290:	080062b1 	.word	0x080062b1
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062c1 	.word	0x080062c1
 800629c:	080062c9 	.word	0x080062c9
 80062a0:	2302      	movs	r3, #2
 80062a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80062a6:	e01b      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80062a8:	2304      	movs	r3, #4
 80062aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80062ae:	e017      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80062b0:	2308      	movs	r3, #8
 80062b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80062b6:	e013      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80062b8:	2310      	movs	r3, #16
 80062ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80062be:	e00f      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80062c0:	2320      	movs	r3, #32
 80062c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80062c6:	e00b      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80062c8:	2340      	movs	r3, #64	; 0x40
 80062ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80062ce:	e007      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80062d0:	2380      	movs	r3, #128	; 0x80
 80062d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <UART_SetConfig+0x5d8>
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a32      	ldr	r2, [pc, #200]	; (80063b0 <UART_SetConfig+0x6a8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	f040 86f7 	bne.w	80070da <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	f000 80c0 	beq.w	8006476 <UART_SetConfig+0x76e>
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	dc04      	bgt.n	8006304 <UART_SetConfig+0x5fc>
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d00c      	beq.n	8006318 <UART_SetConfig+0x610>
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d065      	beq.n	80063ce <UART_SetConfig+0x6c6>
 8006302:	e27a      	b.n	80067fa <UART_SetConfig+0xaf2>
 8006304:	2b20      	cmp	r3, #32
 8006306:	f000 81b0 	beq.w	800666a <UART_SetConfig+0x962>
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	f000 821e 	beq.w	800674c <UART_SetConfig+0xa44>
 8006310:	2b10      	cmp	r3, #16
 8006312:	f000 8104 	beq.w	800651e <UART_SetConfig+0x816>
 8006316:	e270      	b.n	80067fa <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006318:	f7fe fffc 	bl	8005314 <HAL_RCCEx_GetD3PCLK1Freq>
 800631c:	4602      	mov	r2, r0
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	d04e      	beq.n	80063c4 <UART_SetConfig+0x6bc>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	2b01      	cmp	r3, #1
 800632c:	d048      	beq.n	80063c0 <UART_SetConfig+0x6b8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	2b02      	cmp	r3, #2
 8006334:	d042      	beq.n	80063bc <UART_SetConfig+0x6b4>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2b03      	cmp	r3, #3
 800633c:	d03c      	beq.n	80063b8 <UART_SetConfig+0x6b0>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2b04      	cmp	r3, #4
 8006344:	d036      	beq.n	80063b4 <UART_SetConfig+0x6ac>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b05      	cmp	r3, #5
 800634c:	d026      	beq.n	800639c <UART_SetConfig+0x694>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	2b06      	cmp	r3, #6
 8006354:	d020      	beq.n	8006398 <UART_SetConfig+0x690>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	2b07      	cmp	r3, #7
 800635c:	d01a      	beq.n	8006394 <UART_SetConfig+0x68c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	2b08      	cmp	r3, #8
 8006364:	d014      	beq.n	8006390 <UART_SetConfig+0x688>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	2b09      	cmp	r3, #9
 800636c:	d00e      	beq.n	800638c <UART_SetConfig+0x684>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b0a      	cmp	r3, #10
 8006374:	d008      	beq.n	8006388 <UART_SetConfig+0x680>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b0b      	cmp	r3, #11
 800637c:	d102      	bne.n	8006384 <UART_SetConfig+0x67c>
 800637e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006382:	e020      	b.n	80063c6 <UART_SetConfig+0x6be>
 8006384:	2301      	movs	r3, #1
 8006386:	e01e      	b.n	80063c6 <UART_SetConfig+0x6be>
 8006388:	2380      	movs	r3, #128	; 0x80
 800638a:	e01c      	b.n	80063c6 <UART_SetConfig+0x6be>
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	e01a      	b.n	80063c6 <UART_SetConfig+0x6be>
 8006390:	2320      	movs	r3, #32
 8006392:	e018      	b.n	80063c6 <UART_SetConfig+0x6be>
 8006394:	2310      	movs	r3, #16
 8006396:	e016      	b.n	80063c6 <UART_SetConfig+0x6be>
 8006398:	230c      	movs	r3, #12
 800639a:	e014      	b.n	80063c6 <UART_SetConfig+0x6be>
 800639c:	230a      	movs	r3, #10
 800639e:	e012      	b.n	80063c6 <UART_SetConfig+0x6be>
 80063a0:	40011400 	.word	0x40011400
 80063a4:	58024400 	.word	0x58024400
 80063a8:	40007800 	.word	0x40007800
 80063ac:	40007c00 	.word	0x40007c00
 80063b0:	58000c00 	.word	0x58000c00
 80063b4:	2308      	movs	r3, #8
 80063b6:	e006      	b.n	80063c6 <UART_SetConfig+0x6be>
 80063b8:	2306      	movs	r3, #6
 80063ba:	e004      	b.n	80063c6 <UART_SetConfig+0x6be>
 80063bc:	2304      	movs	r3, #4
 80063be:	e002      	b.n	80063c6 <UART_SetConfig+0x6be>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e000      	b.n	80063c6 <UART_SetConfig+0x6be>
 80063c4:	2301      	movs	r3, #1
 80063c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063cc:	e219      	b.n	8006802 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ce:	f107 0318 	add.w	r3, r7, #24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe ffb4 	bl	8005340 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d044      	beq.n	800646c <UART_SetConfig+0x764>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d03e      	beq.n	8006468 <UART_SetConfig+0x760>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d038      	beq.n	8006464 <UART_SetConfig+0x75c>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d032      	beq.n	8006460 <UART_SetConfig+0x758>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d02c      	beq.n	800645c <UART_SetConfig+0x754>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	2b05      	cmp	r3, #5
 8006408:	d026      	beq.n	8006458 <UART_SetConfig+0x750>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	2b06      	cmp	r3, #6
 8006410:	d020      	beq.n	8006454 <UART_SetConfig+0x74c>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	2b07      	cmp	r3, #7
 8006418:	d01a      	beq.n	8006450 <UART_SetConfig+0x748>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	2b08      	cmp	r3, #8
 8006420:	d014      	beq.n	800644c <UART_SetConfig+0x744>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	2b09      	cmp	r3, #9
 8006428:	d00e      	beq.n	8006448 <UART_SetConfig+0x740>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	2b0a      	cmp	r3, #10
 8006430:	d008      	beq.n	8006444 <UART_SetConfig+0x73c>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	2b0b      	cmp	r3, #11
 8006438:	d102      	bne.n	8006440 <UART_SetConfig+0x738>
 800643a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800643e:	e016      	b.n	800646e <UART_SetConfig+0x766>
 8006440:	2301      	movs	r3, #1
 8006442:	e014      	b.n	800646e <UART_SetConfig+0x766>
 8006444:	2380      	movs	r3, #128	; 0x80
 8006446:	e012      	b.n	800646e <UART_SetConfig+0x766>
 8006448:	2340      	movs	r3, #64	; 0x40
 800644a:	e010      	b.n	800646e <UART_SetConfig+0x766>
 800644c:	2320      	movs	r3, #32
 800644e:	e00e      	b.n	800646e <UART_SetConfig+0x766>
 8006450:	2310      	movs	r3, #16
 8006452:	e00c      	b.n	800646e <UART_SetConfig+0x766>
 8006454:	230c      	movs	r3, #12
 8006456:	e00a      	b.n	800646e <UART_SetConfig+0x766>
 8006458:	230a      	movs	r3, #10
 800645a:	e008      	b.n	800646e <UART_SetConfig+0x766>
 800645c:	2308      	movs	r3, #8
 800645e:	e006      	b.n	800646e <UART_SetConfig+0x766>
 8006460:	2306      	movs	r3, #6
 8006462:	e004      	b.n	800646e <UART_SetConfig+0x766>
 8006464:	2304      	movs	r3, #4
 8006466:	e002      	b.n	800646e <UART_SetConfig+0x766>
 8006468:	2302      	movs	r3, #2
 800646a:	e000      	b.n	800646e <UART_SetConfig+0x766>
 800646c:	2301      	movs	r3, #1
 800646e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006472:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006474:	e1c5      	b.n	8006802 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006476:	f107 030c 	add.w	r3, r7, #12
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff f8ac 	bl	80055d8 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	d044      	beq.n	8006514 <UART_SetConfig+0x80c>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	2b01      	cmp	r3, #1
 8006490:	d03e      	beq.n	8006510 <UART_SetConfig+0x808>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	2b02      	cmp	r3, #2
 8006498:	d038      	beq.n	800650c <UART_SetConfig+0x804>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d032      	beq.n	8006508 <UART_SetConfig+0x800>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d02c      	beq.n	8006504 <UART_SetConfig+0x7fc>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	2b05      	cmp	r3, #5
 80064b0:	d026      	beq.n	8006500 <UART_SetConfig+0x7f8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d020      	beq.n	80064fc <UART_SetConfig+0x7f4>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	2b07      	cmp	r3, #7
 80064c0:	d01a      	beq.n	80064f8 <UART_SetConfig+0x7f0>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d014      	beq.n	80064f4 <UART_SetConfig+0x7ec>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	2b09      	cmp	r3, #9
 80064d0:	d00e      	beq.n	80064f0 <UART_SetConfig+0x7e8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	2b0a      	cmp	r3, #10
 80064d8:	d008      	beq.n	80064ec <UART_SetConfig+0x7e4>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	2b0b      	cmp	r3, #11
 80064e0:	d102      	bne.n	80064e8 <UART_SetConfig+0x7e0>
 80064e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064e6:	e016      	b.n	8006516 <UART_SetConfig+0x80e>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e014      	b.n	8006516 <UART_SetConfig+0x80e>
 80064ec:	2380      	movs	r3, #128	; 0x80
 80064ee:	e012      	b.n	8006516 <UART_SetConfig+0x80e>
 80064f0:	2340      	movs	r3, #64	; 0x40
 80064f2:	e010      	b.n	8006516 <UART_SetConfig+0x80e>
 80064f4:	2320      	movs	r3, #32
 80064f6:	e00e      	b.n	8006516 <UART_SetConfig+0x80e>
 80064f8:	2310      	movs	r3, #16
 80064fa:	e00c      	b.n	8006516 <UART_SetConfig+0x80e>
 80064fc:	230c      	movs	r3, #12
 80064fe:	e00a      	b.n	8006516 <UART_SetConfig+0x80e>
 8006500:	230a      	movs	r3, #10
 8006502:	e008      	b.n	8006516 <UART_SetConfig+0x80e>
 8006504:	2308      	movs	r3, #8
 8006506:	e006      	b.n	8006516 <UART_SetConfig+0x80e>
 8006508:	2306      	movs	r3, #6
 800650a:	e004      	b.n	8006516 <UART_SetConfig+0x80e>
 800650c:	2304      	movs	r3, #4
 800650e:	e002      	b.n	8006516 <UART_SetConfig+0x80e>
 8006510:	2302      	movs	r3, #2
 8006512:	e000      	b.n	8006516 <UART_SetConfig+0x80e>
 8006514:	2301      	movs	r3, #1
 8006516:	fbb2 f3f3 	udiv	r3, r2, r3
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800651c:	e171      	b.n	8006802 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800651e:	4b7a      	ldr	r3, [pc, #488]	; (8006708 <UART_SetConfig+0xa00>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d054      	beq.n	80065d4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800652a:	4b77      	ldr	r3, [pc, #476]	; (8006708 <UART_SetConfig+0xa00>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	08db      	lsrs	r3, r3, #3
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	4a75      	ldr	r2, [pc, #468]	; (800670c <UART_SetConfig+0xa04>)
 8006536:	40da      	lsrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	d044      	beq.n	80065ca <UART_SetConfig+0x8c2>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b01      	cmp	r3, #1
 8006546:	d03e      	beq.n	80065c6 <UART_SetConfig+0x8be>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	2b02      	cmp	r3, #2
 800654e:	d038      	beq.n	80065c2 <UART_SetConfig+0x8ba>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	2b03      	cmp	r3, #3
 8006556:	d032      	beq.n	80065be <UART_SetConfig+0x8b6>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	2b04      	cmp	r3, #4
 800655e:	d02c      	beq.n	80065ba <UART_SetConfig+0x8b2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	2b05      	cmp	r3, #5
 8006566:	d026      	beq.n	80065b6 <UART_SetConfig+0x8ae>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	2b06      	cmp	r3, #6
 800656e:	d020      	beq.n	80065b2 <UART_SetConfig+0x8aa>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	2b07      	cmp	r3, #7
 8006576:	d01a      	beq.n	80065ae <UART_SetConfig+0x8a6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	2b08      	cmp	r3, #8
 800657e:	d014      	beq.n	80065aa <UART_SetConfig+0x8a2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	2b09      	cmp	r3, #9
 8006586:	d00e      	beq.n	80065a6 <UART_SetConfig+0x89e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	2b0a      	cmp	r3, #10
 800658e:	d008      	beq.n	80065a2 <UART_SetConfig+0x89a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	2b0b      	cmp	r3, #11
 8006596:	d102      	bne.n	800659e <UART_SetConfig+0x896>
 8006598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800659c:	e016      	b.n	80065cc <UART_SetConfig+0x8c4>
 800659e:	2301      	movs	r3, #1
 80065a0:	e014      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065a2:	2380      	movs	r3, #128	; 0x80
 80065a4:	e012      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065a6:	2340      	movs	r3, #64	; 0x40
 80065a8:	e010      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065aa:	2320      	movs	r3, #32
 80065ac:	e00e      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065ae:	2310      	movs	r3, #16
 80065b0:	e00c      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065b2:	230c      	movs	r3, #12
 80065b4:	e00a      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065b6:	230a      	movs	r3, #10
 80065b8:	e008      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065ba:	2308      	movs	r3, #8
 80065bc:	e006      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065be:	2306      	movs	r3, #6
 80065c0:	e004      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065c2:	2304      	movs	r3, #4
 80065c4:	e002      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e000      	b.n	80065cc <UART_SetConfig+0x8c4>
 80065ca:	2301      	movs	r3, #1
 80065cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80065d2:	e116      	b.n	8006802 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d043      	beq.n	8006664 <UART_SetConfig+0x95c>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d03d      	beq.n	8006660 <UART_SetConfig+0x958>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d037      	beq.n	800665c <UART_SetConfig+0x954>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d031      	beq.n	8006658 <UART_SetConfig+0x950>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d02b      	beq.n	8006654 <UART_SetConfig+0x94c>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	2b05      	cmp	r3, #5
 8006602:	d025      	beq.n	8006650 <UART_SetConfig+0x948>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b06      	cmp	r3, #6
 800660a:	d01f      	beq.n	800664c <UART_SetConfig+0x944>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	2b07      	cmp	r3, #7
 8006612:	d019      	beq.n	8006648 <UART_SetConfig+0x940>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	2b08      	cmp	r3, #8
 800661a:	d013      	beq.n	8006644 <UART_SetConfig+0x93c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	2b09      	cmp	r3, #9
 8006622:	d00d      	beq.n	8006640 <UART_SetConfig+0x938>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	2b0a      	cmp	r3, #10
 800662a:	d007      	beq.n	800663c <UART_SetConfig+0x934>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	2b0b      	cmp	r3, #11
 8006632:	d101      	bne.n	8006638 <UART_SetConfig+0x930>
 8006634:	4b36      	ldr	r3, [pc, #216]	; (8006710 <UART_SetConfig+0xa08>)
 8006636:	e016      	b.n	8006666 <UART_SetConfig+0x95e>
 8006638:	4b34      	ldr	r3, [pc, #208]	; (800670c <UART_SetConfig+0xa04>)
 800663a:	e014      	b.n	8006666 <UART_SetConfig+0x95e>
 800663c:	4b35      	ldr	r3, [pc, #212]	; (8006714 <UART_SetConfig+0xa0c>)
 800663e:	e012      	b.n	8006666 <UART_SetConfig+0x95e>
 8006640:	4b35      	ldr	r3, [pc, #212]	; (8006718 <UART_SetConfig+0xa10>)
 8006642:	e010      	b.n	8006666 <UART_SetConfig+0x95e>
 8006644:	4b35      	ldr	r3, [pc, #212]	; (800671c <UART_SetConfig+0xa14>)
 8006646:	e00e      	b.n	8006666 <UART_SetConfig+0x95e>
 8006648:	4b35      	ldr	r3, [pc, #212]	; (8006720 <UART_SetConfig+0xa18>)
 800664a:	e00c      	b.n	8006666 <UART_SetConfig+0x95e>
 800664c:	4b35      	ldr	r3, [pc, #212]	; (8006724 <UART_SetConfig+0xa1c>)
 800664e:	e00a      	b.n	8006666 <UART_SetConfig+0x95e>
 8006650:	4b35      	ldr	r3, [pc, #212]	; (8006728 <UART_SetConfig+0xa20>)
 8006652:	e008      	b.n	8006666 <UART_SetConfig+0x95e>
 8006654:	4b35      	ldr	r3, [pc, #212]	; (800672c <UART_SetConfig+0xa24>)
 8006656:	e006      	b.n	8006666 <UART_SetConfig+0x95e>
 8006658:	4b35      	ldr	r3, [pc, #212]	; (8006730 <UART_SetConfig+0xa28>)
 800665a:	e004      	b.n	8006666 <UART_SetConfig+0x95e>
 800665c:	4b35      	ldr	r3, [pc, #212]	; (8006734 <UART_SetConfig+0xa2c>)
 800665e:	e002      	b.n	8006666 <UART_SetConfig+0x95e>
 8006660:	4b35      	ldr	r3, [pc, #212]	; (8006738 <UART_SetConfig+0xa30>)
 8006662:	e000      	b.n	8006666 <UART_SetConfig+0x95e>
 8006664:	4b29      	ldr	r3, [pc, #164]	; (800670c <UART_SetConfig+0xa04>)
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006668:	e0cb      	b.n	8006802 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	2b00      	cmp	r3, #0
 8006670:	d046      	beq.n	8006700 <UART_SetConfig+0x9f8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2b01      	cmp	r3, #1
 8006678:	d040      	beq.n	80066fc <UART_SetConfig+0x9f4>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	2b02      	cmp	r3, #2
 8006680:	d03a      	beq.n	80066f8 <UART_SetConfig+0x9f0>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	2b03      	cmp	r3, #3
 8006688:	d034      	beq.n	80066f4 <UART_SetConfig+0x9ec>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	2b04      	cmp	r3, #4
 8006690:	d02e      	beq.n	80066f0 <UART_SetConfig+0x9e8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	2b05      	cmp	r3, #5
 8006698:	d028      	beq.n	80066ec <UART_SetConfig+0x9e4>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	2b06      	cmp	r3, #6
 80066a0:	d022      	beq.n	80066e8 <UART_SetConfig+0x9e0>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2b07      	cmp	r3, #7
 80066a8:	d01c      	beq.n	80066e4 <UART_SetConfig+0x9dc>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d016      	beq.n	80066e0 <UART_SetConfig+0x9d8>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	2b09      	cmp	r3, #9
 80066b8:	d00f      	beq.n	80066da <UART_SetConfig+0x9d2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	2b0a      	cmp	r3, #10
 80066c0:	d008      	beq.n	80066d4 <UART_SetConfig+0x9cc>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	2b0b      	cmp	r3, #11
 80066c8:	d102      	bne.n	80066d0 <UART_SetConfig+0x9c8>
 80066ca:	f643 5309 	movw	r3, #15625	; 0x3d09
 80066ce:	e018      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066d0:	4b13      	ldr	r3, [pc, #76]	; (8006720 <UART_SetConfig+0xa18>)
 80066d2:	e016      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066d4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80066d8:	e013      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80066de:	e010      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066e0:	4b16      	ldr	r3, [pc, #88]	; (800673c <UART_SetConfig+0xa34>)
 80066e2:	e00e      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066e4:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <UART_SetConfig+0xa08>)
 80066e6:	e00c      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066e8:	4b15      	ldr	r3, [pc, #84]	; (8006740 <UART_SetConfig+0xa38>)
 80066ea:	e00a      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066ec:	4b15      	ldr	r3, [pc, #84]	; (8006744 <UART_SetConfig+0xa3c>)
 80066ee:	e008      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066f0:	4b08      	ldr	r3, [pc, #32]	; (8006714 <UART_SetConfig+0xa0c>)
 80066f2:	e006      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066f4:	4b14      	ldr	r3, [pc, #80]	; (8006748 <UART_SetConfig+0xa40>)
 80066f6:	e004      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066f8:	4b07      	ldr	r3, [pc, #28]	; (8006718 <UART_SetConfig+0xa10>)
 80066fa:	e002      	b.n	8006702 <UART_SetConfig+0x9fa>
 80066fc:	4b07      	ldr	r3, [pc, #28]	; (800671c <UART_SetConfig+0xa14>)
 80066fe:	e000      	b.n	8006702 <UART_SetConfig+0x9fa>
 8006700:	4b07      	ldr	r3, [pc, #28]	; (8006720 <UART_SetConfig+0xa18>)
 8006702:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006704:	e07d      	b.n	8006802 <UART_SetConfig+0xafa>
 8006706:	bf00      	nop
 8006708:	58024400 	.word	0x58024400
 800670c:	03d09000 	.word	0x03d09000
 8006710:	0003d090 	.word	0x0003d090
 8006714:	0007a120 	.word	0x0007a120
 8006718:	000f4240 	.word	0x000f4240
 800671c:	001e8480 	.word	0x001e8480
 8006720:	003d0900 	.word	0x003d0900
 8006724:	00516155 	.word	0x00516155
 8006728:	0061a800 	.word	0x0061a800
 800672c:	007a1200 	.word	0x007a1200
 8006730:	00a2c2aa 	.word	0x00a2c2aa
 8006734:	00f42400 	.word	0x00f42400
 8006738:	01e84800 	.word	0x01e84800
 800673c:	0001e848 	.word	0x0001e848
 8006740:	00051615 	.word	0x00051615
 8006744:	00061a80 	.word	0x00061a80
 8006748:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d04e      	beq.n	80067f2 <UART_SetConfig+0xaea>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	2b01      	cmp	r3, #1
 800675a:	d047      	beq.n	80067ec <UART_SetConfig+0xae4>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	2b02      	cmp	r3, #2
 8006762:	d040      	beq.n	80067e6 <UART_SetConfig+0xade>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	2b03      	cmp	r3, #3
 800676a:	d039      	beq.n	80067e0 <UART_SetConfig+0xad8>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	2b04      	cmp	r3, #4
 8006772:	d032      	beq.n	80067da <UART_SetConfig+0xad2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	2b05      	cmp	r3, #5
 800677a:	d02b      	beq.n	80067d4 <UART_SetConfig+0xacc>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	2b06      	cmp	r3, #6
 8006782:	d024      	beq.n	80067ce <UART_SetConfig+0xac6>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	2b07      	cmp	r3, #7
 800678a:	d01d      	beq.n	80067c8 <UART_SetConfig+0xac0>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	2b08      	cmp	r3, #8
 8006792:	d016      	beq.n	80067c2 <UART_SetConfig+0xaba>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	2b09      	cmp	r3, #9
 800679a:	d00f      	beq.n	80067bc <UART_SetConfig+0xab4>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	2b0a      	cmp	r3, #10
 80067a2:	d008      	beq.n	80067b6 <UART_SetConfig+0xaae>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	2b0b      	cmp	r3, #11
 80067aa:	d101      	bne.n	80067b0 <UART_SetConfig+0xaa8>
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	e022      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b4:	e01f      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ba:	e01c      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c0:	e019      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c6:	e016      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067cc:	e013      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067ce:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80067d2:	e010      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067d4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80067d8:	e00d      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067de:	e00a      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067e0:	f241 5355 	movw	r3, #5461	; 0x1555
 80067e4:	e007      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067ea:	e004      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067f0:	e001      	b.n	80067f6 <UART_SetConfig+0xaee>
 80067f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067f8:	e003      	b.n	8006802 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006800:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	2b00      	cmp	r3, #0
 8006806:	f001 83e8 	beq.w	8007fda <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	4613      	mov	r3, r2
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	4413      	add	r3, r2
 8006814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006816:	429a      	cmp	r2, r3
 8006818:	d305      	bcc.n	8006826 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006822:	429a      	cmp	r2, r3
 8006824:	d904      	bls.n	8006830 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800682c:	f001 bbd5 	b.w	8007fda <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8006830:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006834:	2b08      	cmp	r3, #8
 8006836:	f000 8154 	beq.w	8006ae2 <UART_SetConfig+0xdda>
 800683a:	2b08      	cmp	r3, #8
 800683c:	dc06      	bgt.n	800684c <UART_SetConfig+0xb44>
 800683e:	2b02      	cmp	r3, #2
 8006840:	d00f      	beq.n	8006862 <UART_SetConfig+0xb5a>
 8006842:	2b04      	cmp	r3, #4
 8006844:	f000 80ac 	beq.w	80069a0 <UART_SetConfig+0xc98>
 8006848:	f000 bc30 	b.w	80070ac <UART_SetConfig+0x13a4>
 800684c:	2b20      	cmp	r3, #32
 800684e:	f000 832d 	beq.w	8006eac <UART_SetConfig+0x11a4>
 8006852:	2b40      	cmp	r3, #64	; 0x40
 8006854:	f000 83a5 	beq.w	8006fa2 <UART_SetConfig+0x129a>
 8006858:	2b10      	cmp	r3, #16
 800685a:	f000 81e3 	beq.w	8006c24 <UART_SetConfig+0xf1c>
 800685e:	f000 bc25 	b.w	80070ac <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006862:	f7fe fd57 	bl	8005314 <HAL_RCCEx_GetD3PCLK1Freq>
 8006866:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	4618      	mov	r0, r3
 800686c:	f04f 0100 	mov.w	r1, #0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d067      	beq.n	8006948 <UART_SetConfig+0xc40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	2b01      	cmp	r3, #1
 800687e:	d05e      	beq.n	800693e <UART_SetConfig+0xc36>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	2b02      	cmp	r3, #2
 8006886:	d055      	beq.n	8006934 <UART_SetConfig+0xc2c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	2b03      	cmp	r3, #3
 800688e:	d04c      	beq.n	800692a <UART_SetConfig+0xc22>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	2b04      	cmp	r3, #4
 8006896:	d043      	beq.n	8006920 <UART_SetConfig+0xc18>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	2b05      	cmp	r3, #5
 800689e:	d03a      	beq.n	8006916 <UART_SetConfig+0xc0e>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	2b06      	cmp	r3, #6
 80068a6:	d031      	beq.n	800690c <UART_SetConfig+0xc04>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	2b07      	cmp	r3, #7
 80068ae:	d028      	beq.n	8006902 <UART_SetConfig+0xbfa>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d01f      	beq.n	80068f8 <UART_SetConfig+0xbf0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	2b09      	cmp	r3, #9
 80068be:	d016      	beq.n	80068ee <UART_SetConfig+0xbe6>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	2b0a      	cmp	r3, #10
 80068c6:	d00d      	beq.n	80068e4 <UART_SetConfig+0xbdc>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	2b0b      	cmp	r3, #11
 80068ce:	d104      	bne.n	80068da <UART_SetConfig+0xbd2>
 80068d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068d4:	f04f 0400 	mov.w	r4, #0
 80068d8:	e03a      	b.n	8006950 <UART_SetConfig+0xc48>
 80068da:	f04f 0301 	mov.w	r3, #1
 80068de:	f04f 0400 	mov.w	r4, #0
 80068e2:	e035      	b.n	8006950 <UART_SetConfig+0xc48>
 80068e4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80068e8:	f04f 0400 	mov.w	r4, #0
 80068ec:	e030      	b.n	8006950 <UART_SetConfig+0xc48>
 80068ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 80068f2:	f04f 0400 	mov.w	r4, #0
 80068f6:	e02b      	b.n	8006950 <UART_SetConfig+0xc48>
 80068f8:	f04f 0320 	mov.w	r3, #32
 80068fc:	f04f 0400 	mov.w	r4, #0
 8006900:	e026      	b.n	8006950 <UART_SetConfig+0xc48>
 8006902:	f04f 0310 	mov.w	r3, #16
 8006906:	f04f 0400 	mov.w	r4, #0
 800690a:	e021      	b.n	8006950 <UART_SetConfig+0xc48>
 800690c:	f04f 030c 	mov.w	r3, #12
 8006910:	f04f 0400 	mov.w	r4, #0
 8006914:	e01c      	b.n	8006950 <UART_SetConfig+0xc48>
 8006916:	f04f 030a 	mov.w	r3, #10
 800691a:	f04f 0400 	mov.w	r4, #0
 800691e:	e017      	b.n	8006950 <UART_SetConfig+0xc48>
 8006920:	f04f 0308 	mov.w	r3, #8
 8006924:	f04f 0400 	mov.w	r4, #0
 8006928:	e012      	b.n	8006950 <UART_SetConfig+0xc48>
 800692a:	f04f 0306 	mov.w	r3, #6
 800692e:	f04f 0400 	mov.w	r4, #0
 8006932:	e00d      	b.n	8006950 <UART_SetConfig+0xc48>
 8006934:	f04f 0304 	mov.w	r3, #4
 8006938:	f04f 0400 	mov.w	r4, #0
 800693c:	e008      	b.n	8006950 <UART_SetConfig+0xc48>
 800693e:	f04f 0302 	mov.w	r3, #2
 8006942:	f04f 0400 	mov.w	r4, #0
 8006946:	e003      	b.n	8006950 <UART_SetConfig+0xc48>
 8006948:	f04f 0301 	mov.w	r3, #1
 800694c:	f04f 0400 	mov.w	r4, #0
 8006950:	461a      	mov	r2, r3
 8006952:	4623      	mov	r3, r4
 8006954:	f7f9 fcc0 	bl	80002d8 <__aeabi_uldivmod>
 8006958:	4603      	mov	r3, r0
 800695a:	460c      	mov	r4, r1
 800695c:	4619      	mov	r1, r3
 800695e:	4622      	mov	r2, r4
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	f04f 0400 	mov.w	r4, #0
 8006968:	0214      	lsls	r4, r2, #8
 800696a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800696e:	020b      	lsls	r3, r1, #8
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6852      	ldr	r2, [r2, #4]
 8006974:	0852      	lsrs	r2, r2, #1
 8006976:	4611      	mov	r1, r2
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	eb13 0b01 	adds.w	fp, r3, r1
 8006980:	eb44 0c02 	adc.w	ip, r4, r2
 8006984:	4658      	mov	r0, fp
 8006986:	4661      	mov	r1, ip
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f04f 0400 	mov.w	r4, #0
 8006990:	461a      	mov	r2, r3
 8006992:	4623      	mov	r3, r4
 8006994:	f7f9 fca0 	bl	80002d8 <__aeabi_uldivmod>
 8006998:	4603      	mov	r3, r0
 800699a:	460c      	mov	r4, r1
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800699e:	e389      	b.n	80070b4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a0:	f107 0318 	add.w	r3, r7, #24
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe fccb 	bl	8005340 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f04f 0100 	mov.w	r1, #0
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d067      	beq.n	8006a8a <UART_SetConfig+0xd82>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d05e      	beq.n	8006a80 <UART_SetConfig+0xd78>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d055      	beq.n	8006a76 <UART_SetConfig+0xd6e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d04c      	beq.n	8006a6c <UART_SetConfig+0xd64>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d043      	beq.n	8006a62 <UART_SetConfig+0xd5a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	2b05      	cmp	r3, #5
 80069e0:	d03a      	beq.n	8006a58 <UART_SetConfig+0xd50>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b06      	cmp	r3, #6
 80069e8:	d031      	beq.n	8006a4e <UART_SetConfig+0xd46>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	2b07      	cmp	r3, #7
 80069f0:	d028      	beq.n	8006a44 <UART_SetConfig+0xd3c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d01f      	beq.n	8006a3a <UART_SetConfig+0xd32>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2b09      	cmp	r3, #9
 8006a00:	d016      	beq.n	8006a30 <UART_SetConfig+0xd28>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	2b0a      	cmp	r3, #10
 8006a08:	d00d      	beq.n	8006a26 <UART_SetConfig+0xd1e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2b0b      	cmp	r3, #11
 8006a10:	d104      	bne.n	8006a1c <UART_SetConfig+0xd14>
 8006a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a16:	f04f 0400 	mov.w	r4, #0
 8006a1a:	e03a      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a1c:	f04f 0301 	mov.w	r3, #1
 8006a20:	f04f 0400 	mov.w	r4, #0
 8006a24:	e035      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a26:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a2a:	f04f 0400 	mov.w	r4, #0
 8006a2e:	e030      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a30:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006a34:	f04f 0400 	mov.w	r4, #0
 8006a38:	e02b      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a3a:	f04f 0320 	mov.w	r3, #32
 8006a3e:	f04f 0400 	mov.w	r4, #0
 8006a42:	e026      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a44:	f04f 0310 	mov.w	r3, #16
 8006a48:	f04f 0400 	mov.w	r4, #0
 8006a4c:	e021      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a4e:	f04f 030c 	mov.w	r3, #12
 8006a52:	f04f 0400 	mov.w	r4, #0
 8006a56:	e01c      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a58:	f04f 030a 	mov.w	r3, #10
 8006a5c:	f04f 0400 	mov.w	r4, #0
 8006a60:	e017      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a62:	f04f 0308 	mov.w	r3, #8
 8006a66:	f04f 0400 	mov.w	r4, #0
 8006a6a:	e012      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a6c:	f04f 0306 	mov.w	r3, #6
 8006a70:	f04f 0400 	mov.w	r4, #0
 8006a74:	e00d      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a76:	f04f 0304 	mov.w	r3, #4
 8006a7a:	f04f 0400 	mov.w	r4, #0
 8006a7e:	e008      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a80:	f04f 0302 	mov.w	r3, #2
 8006a84:	f04f 0400 	mov.w	r4, #0
 8006a88:	e003      	b.n	8006a92 <UART_SetConfig+0xd8a>
 8006a8a:	f04f 0301 	mov.w	r3, #1
 8006a8e:	f04f 0400 	mov.w	r4, #0
 8006a92:	461a      	mov	r2, r3
 8006a94:	4623      	mov	r3, r4
 8006a96:	f7f9 fc1f 	bl	80002d8 <__aeabi_uldivmod>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	f04f 0300 	mov.w	r3, #0
 8006aa6:	f04f 0400 	mov.w	r4, #0
 8006aaa:	0214      	lsls	r4, r2, #8
 8006aac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006ab0:	020b      	lsls	r3, r1, #8
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6852      	ldr	r2, [r2, #4]
 8006ab6:	0852      	lsrs	r2, r2, #1
 8006ab8:	4611      	mov	r1, r2
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	eb13 0b01 	adds.w	fp, r3, r1
 8006ac2:	eb44 0c02 	adc.w	ip, r4, r2
 8006ac6:	4658      	mov	r0, fp
 8006ac8:	4661      	mov	r1, ip
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f04f 0400 	mov.w	r4, #0
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4623      	mov	r3, r4
 8006ad6:	f7f9 fbff 	bl	80002d8 <__aeabi_uldivmod>
 8006ada:	4603      	mov	r3, r0
 8006adc:	460c      	mov	r4, r1
 8006ade:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ae0:	e2e8      	b.n	80070b4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae2:	f107 030c 	add.w	r3, r7, #12
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fe fd76 	bl	80055d8 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f04f 0100 	mov.w	r1, #0
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d067      	beq.n	8006bcc <UART_SetConfig+0xec4>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d05e      	beq.n	8006bc2 <UART_SetConfig+0xeba>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d055      	beq.n	8006bb8 <UART_SetConfig+0xeb0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d04c      	beq.n	8006bae <UART_SetConfig+0xea6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d043      	beq.n	8006ba4 <UART_SetConfig+0xe9c>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	2b05      	cmp	r3, #5
 8006b22:	d03a      	beq.n	8006b9a <UART_SetConfig+0xe92>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	2b06      	cmp	r3, #6
 8006b2a:	d031      	beq.n	8006b90 <UART_SetConfig+0xe88>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	2b07      	cmp	r3, #7
 8006b32:	d028      	beq.n	8006b86 <UART_SetConfig+0xe7e>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d01f      	beq.n	8006b7c <UART_SetConfig+0xe74>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	2b09      	cmp	r3, #9
 8006b42:	d016      	beq.n	8006b72 <UART_SetConfig+0xe6a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	2b0a      	cmp	r3, #10
 8006b4a:	d00d      	beq.n	8006b68 <UART_SetConfig+0xe60>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	2b0b      	cmp	r3, #11
 8006b52:	d104      	bne.n	8006b5e <UART_SetConfig+0xe56>
 8006b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b58:	f04f 0400 	mov.w	r4, #0
 8006b5c:	e03a      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006b5e:	f04f 0301 	mov.w	r3, #1
 8006b62:	f04f 0400 	mov.w	r4, #0
 8006b66:	e035      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006b68:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006b6c:	f04f 0400 	mov.w	r4, #0
 8006b70:	e030      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006b72:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006b76:	f04f 0400 	mov.w	r4, #0
 8006b7a:	e02b      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006b7c:	f04f 0320 	mov.w	r3, #32
 8006b80:	f04f 0400 	mov.w	r4, #0
 8006b84:	e026      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006b86:	f04f 0310 	mov.w	r3, #16
 8006b8a:	f04f 0400 	mov.w	r4, #0
 8006b8e:	e021      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006b90:	f04f 030c 	mov.w	r3, #12
 8006b94:	f04f 0400 	mov.w	r4, #0
 8006b98:	e01c      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006b9a:	f04f 030a 	mov.w	r3, #10
 8006b9e:	f04f 0400 	mov.w	r4, #0
 8006ba2:	e017      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006ba4:	f04f 0308 	mov.w	r3, #8
 8006ba8:	f04f 0400 	mov.w	r4, #0
 8006bac:	e012      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006bae:	f04f 0306 	mov.w	r3, #6
 8006bb2:	f04f 0400 	mov.w	r4, #0
 8006bb6:	e00d      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006bb8:	f04f 0304 	mov.w	r3, #4
 8006bbc:	f04f 0400 	mov.w	r4, #0
 8006bc0:	e008      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006bc2:	f04f 0302 	mov.w	r3, #2
 8006bc6:	f04f 0400 	mov.w	r4, #0
 8006bca:	e003      	b.n	8006bd4 <UART_SetConfig+0xecc>
 8006bcc:	f04f 0301 	mov.w	r3, #1
 8006bd0:	f04f 0400 	mov.w	r4, #0
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4623      	mov	r3, r4
 8006bd8:	f7f9 fb7e 	bl	80002d8 <__aeabi_uldivmod>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	4619      	mov	r1, r3
 8006be2:	4622      	mov	r2, r4
 8006be4:	f04f 0300 	mov.w	r3, #0
 8006be8:	f04f 0400 	mov.w	r4, #0
 8006bec:	0214      	lsls	r4, r2, #8
 8006bee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006bf2:	020b      	lsls	r3, r1, #8
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6852      	ldr	r2, [r2, #4]
 8006bf8:	0852      	lsrs	r2, r2, #1
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	eb13 0b01 	adds.w	fp, r3, r1
 8006c04:	eb44 0c02 	adc.w	ip, r4, r2
 8006c08:	4658      	mov	r0, fp
 8006c0a:	4661      	mov	r1, ip
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f04f 0400 	mov.w	r4, #0
 8006c14:	461a      	mov	r2, r3
 8006c16:	4623      	mov	r3, r4
 8006c18:	f7f9 fb5e 	bl	80002d8 <__aeabi_uldivmod>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c22:	e247      	b.n	80070b4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c24:	4b96      	ldr	r3, [pc, #600]	; (8006e80 <UART_SetConfig+0x1178>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80a3 	beq.w	8006d78 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c32:	4b93      	ldr	r3, [pc, #588]	; (8006e80 <UART_SetConfig+0x1178>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	08db      	lsrs	r3, r3, #3
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	4a91      	ldr	r2, [pc, #580]	; (8006e84 <UART_SetConfig+0x117c>)
 8006c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c42:	4618      	mov	r0, r3
 8006c44:	f04f 0100 	mov.w	r1, #0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d067      	beq.n	8006d20 <UART_SetConfig+0x1018>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d05e      	beq.n	8006d16 <UART_SetConfig+0x100e>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d055      	beq.n	8006d0c <UART_SetConfig+0x1004>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d04c      	beq.n	8006d02 <UART_SetConfig+0xffa>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d043      	beq.n	8006cf8 <UART_SetConfig+0xff0>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	d03a      	beq.n	8006cee <UART_SetConfig+0xfe6>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	2b06      	cmp	r3, #6
 8006c7e:	d031      	beq.n	8006ce4 <UART_SetConfig+0xfdc>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2b07      	cmp	r3, #7
 8006c86:	d028      	beq.n	8006cda <UART_SetConfig+0xfd2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d01f      	beq.n	8006cd0 <UART_SetConfig+0xfc8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	2b09      	cmp	r3, #9
 8006c96:	d016      	beq.n	8006cc6 <UART_SetConfig+0xfbe>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	2b0a      	cmp	r3, #10
 8006c9e:	d00d      	beq.n	8006cbc <UART_SetConfig+0xfb4>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b0b      	cmp	r3, #11
 8006ca6:	d104      	bne.n	8006cb2 <UART_SetConfig+0xfaa>
 8006ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cac:	f04f 0400 	mov.w	r4, #0
 8006cb0:	e03a      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006cb2:	f04f 0301 	mov.w	r3, #1
 8006cb6:	f04f 0400 	mov.w	r4, #0
 8006cba:	e035      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006cbc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006cc0:	f04f 0400 	mov.w	r4, #0
 8006cc4:	e030      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006cc6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006cca:	f04f 0400 	mov.w	r4, #0
 8006cce:	e02b      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006cd0:	f04f 0320 	mov.w	r3, #32
 8006cd4:	f04f 0400 	mov.w	r4, #0
 8006cd8:	e026      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006cda:	f04f 0310 	mov.w	r3, #16
 8006cde:	f04f 0400 	mov.w	r4, #0
 8006ce2:	e021      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006ce4:	f04f 030c 	mov.w	r3, #12
 8006ce8:	f04f 0400 	mov.w	r4, #0
 8006cec:	e01c      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006cee:	f04f 030a 	mov.w	r3, #10
 8006cf2:	f04f 0400 	mov.w	r4, #0
 8006cf6:	e017      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006cf8:	f04f 0308 	mov.w	r3, #8
 8006cfc:	f04f 0400 	mov.w	r4, #0
 8006d00:	e012      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006d02:	f04f 0306 	mov.w	r3, #6
 8006d06:	f04f 0400 	mov.w	r4, #0
 8006d0a:	e00d      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006d0c:	f04f 0304 	mov.w	r3, #4
 8006d10:	f04f 0400 	mov.w	r4, #0
 8006d14:	e008      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006d16:	f04f 0302 	mov.w	r3, #2
 8006d1a:	f04f 0400 	mov.w	r4, #0
 8006d1e:	e003      	b.n	8006d28 <UART_SetConfig+0x1020>
 8006d20:	f04f 0301 	mov.w	r3, #1
 8006d24:	f04f 0400 	mov.w	r4, #0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	f7f9 fad4 	bl	80002d8 <__aeabi_uldivmod>
 8006d30:	4603      	mov	r3, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	4619      	mov	r1, r3
 8006d36:	4622      	mov	r2, r4
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	f04f 0400 	mov.w	r4, #0
 8006d40:	0214      	lsls	r4, r2, #8
 8006d42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006d46:	020b      	lsls	r3, r1, #8
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6852      	ldr	r2, [r2, #4]
 8006d4c:	0852      	lsrs	r2, r2, #1
 8006d4e:	4611      	mov	r1, r2
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	eb13 0b01 	adds.w	fp, r3, r1
 8006d58:	eb44 0c02 	adc.w	ip, r4, r2
 8006d5c:	4658      	mov	r0, fp
 8006d5e:	4661      	mov	r1, ip
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f04f 0400 	mov.w	r4, #0
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	f7f9 fab4 	bl	80002d8 <__aeabi_uldivmod>
 8006d70:	4603      	mov	r3, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8006d76:	e19d      	b.n	80070b4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d05b      	beq.n	8006e38 <UART_SetConfig+0x1130>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d053      	beq.n	8006e30 <UART_SetConfig+0x1128>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d04b      	beq.n	8006e28 <UART_SetConfig+0x1120>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d043      	beq.n	8006e20 <UART_SetConfig+0x1118>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d03b      	beq.n	8006e18 <UART_SetConfig+0x1110>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b05      	cmp	r3, #5
 8006da6:	d033      	beq.n	8006e10 <UART_SetConfig+0x1108>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b06      	cmp	r3, #6
 8006dae:	d02b      	beq.n	8006e08 <UART_SetConfig+0x1100>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	2b07      	cmp	r3, #7
 8006db6:	d023      	beq.n	8006e00 <UART_SetConfig+0x10f8>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d01b      	beq.n	8006df8 <UART_SetConfig+0x10f0>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b09      	cmp	r3, #9
 8006dc6:	d013      	beq.n	8006df0 <UART_SetConfig+0x10e8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b0a      	cmp	r3, #10
 8006dce:	d00b      	beq.n	8006de8 <UART_SetConfig+0x10e0>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b0b      	cmp	r3, #11
 8006dd6:	d103      	bne.n	8006de0 <UART_SetConfig+0x10d8>
 8006dd8:	4b2a      	ldr	r3, [pc, #168]	; (8006e84 <UART_SetConfig+0x117c>)
 8006dda:	f04f 0400 	mov.w	r4, #0
 8006dde:	e02e      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006de0:	4b29      	ldr	r3, [pc, #164]	; (8006e88 <UART_SetConfig+0x1180>)
 8006de2:	f04f 0403 	mov.w	r4, #3
 8006de6:	e02a      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006de8:	4b28      	ldr	r3, [pc, #160]	; (8006e8c <UART_SetConfig+0x1184>)
 8006dea:	f04f 0400 	mov.w	r4, #0
 8006dee:	e026      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006df0:	4b27      	ldr	r3, [pc, #156]	; (8006e90 <UART_SetConfig+0x1188>)
 8006df2:	f04f 0400 	mov.w	r4, #0
 8006df6:	e022      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006df8:	4b26      	ldr	r3, [pc, #152]	; (8006e94 <UART_SetConfig+0x118c>)
 8006dfa:	f04f 0400 	mov.w	r4, #0
 8006dfe:	e01e      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006e00:	4b25      	ldr	r3, [pc, #148]	; (8006e98 <UART_SetConfig+0x1190>)
 8006e02:	f04f 0400 	mov.w	r4, #0
 8006e06:	e01a      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006e08:	a419      	add	r4, pc, #100	; (adr r4, 8006e70 <UART_SetConfig+0x1168>)
 8006e0a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006e0e:	e016      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006e10:	4b22      	ldr	r3, [pc, #136]	; (8006e9c <UART_SetConfig+0x1194>)
 8006e12:	f04f 0400 	mov.w	r4, #0
 8006e16:	e012      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006e18:	4b21      	ldr	r3, [pc, #132]	; (8006ea0 <UART_SetConfig+0x1198>)
 8006e1a:	f04f 0400 	mov.w	r4, #0
 8006e1e:	e00e      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006e20:	a415      	add	r4, pc, #84	; (adr r4, 8006e78 <UART_SetConfig+0x1170>)
 8006e22:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006e26:	e00a      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006e28:	4b1e      	ldr	r3, [pc, #120]	; (8006ea4 <UART_SetConfig+0x119c>)
 8006e2a:	f04f 0400 	mov.w	r4, #0
 8006e2e:	e006      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006e30:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <UART_SetConfig+0x11a0>)
 8006e32:	f04f 0401 	mov.w	r4, #1
 8006e36:	e002      	b.n	8006e3e <UART_SetConfig+0x1136>
 8006e38:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <UART_SetConfig+0x1180>)
 8006e3a:	f04f 0403 	mov.w	r4, #3
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6852      	ldr	r2, [r2, #4]
 8006e42:	0852      	lsrs	r2, r2, #1
 8006e44:	4611      	mov	r1, r2
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	eb13 0b01 	adds.w	fp, r3, r1
 8006e4e:	eb44 0c02 	adc.w	ip, r4, r2
 8006e52:	4658      	mov	r0, fp
 8006e54:	4661      	mov	r1, ip
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f04f 0400 	mov.w	r4, #0
 8006e5e:	461a      	mov	r2, r3
 8006e60:	4623      	mov	r3, r4
 8006e62:	f7f9 fa39 	bl	80002d8 <__aeabi_uldivmod>
 8006e66:	4603      	mov	r3, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e6c:	e122      	b.n	80070b4 <UART_SetConfig+0x13ac>
 8006e6e:	bf00      	nop
 8006e70:	51615500 	.word	0x51615500
 8006e74:	00000000 	.word	0x00000000
 8006e78:	a2c2aa00 	.word	0xa2c2aa00
 8006e7c:	00000000 	.word	0x00000000
 8006e80:	58024400 	.word	0x58024400
 8006e84:	03d09000 	.word	0x03d09000
 8006e88:	d0900000 	.word	0xd0900000
 8006e8c:	07a12000 	.word	0x07a12000
 8006e90:	0f424000 	.word	0x0f424000
 8006e94:	1e848000 	.word	0x1e848000
 8006e98:	3d090000 	.word	0x3d090000
 8006e9c:	61a80000 	.word	0x61a80000
 8006ea0:	7a120000 	.word	0x7a120000
 8006ea4:	f4240000 	.word	0xf4240000
 8006ea8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d05b      	beq.n	8006f6c <UART_SetConfig+0x1264>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d053      	beq.n	8006f64 <UART_SetConfig+0x125c>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d04b      	beq.n	8006f5c <UART_SetConfig+0x1254>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d043      	beq.n	8006f54 <UART_SetConfig+0x124c>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d03b      	beq.n	8006f4c <UART_SetConfig+0x1244>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	2b05      	cmp	r3, #5
 8006eda:	d033      	beq.n	8006f44 <UART_SetConfig+0x123c>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	2b06      	cmp	r3, #6
 8006ee2:	d02b      	beq.n	8006f3c <UART_SetConfig+0x1234>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	2b07      	cmp	r3, #7
 8006eea:	d023      	beq.n	8006f34 <UART_SetConfig+0x122c>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d01b      	beq.n	8006f2c <UART_SetConfig+0x1224>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	2b09      	cmp	r3, #9
 8006efa:	d013      	beq.n	8006f24 <UART_SetConfig+0x121c>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	2b0a      	cmp	r3, #10
 8006f02:	d00b      	beq.n	8006f1c <UART_SetConfig+0x1214>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	2b0b      	cmp	r3, #11
 8006f0a:	d103      	bne.n	8006f14 <UART_SetConfig+0x120c>
 8006f0c:	4bc0      	ldr	r3, [pc, #768]	; (8007210 <UART_SetConfig+0x1508>)
 8006f0e:	f04f 0400 	mov.w	r4, #0
 8006f12:	e02e      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f14:	4bbf      	ldr	r3, [pc, #764]	; (8007214 <UART_SetConfig+0x150c>)
 8006f16:	f04f 0400 	mov.w	r4, #0
 8006f1a:	e02a      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f1c:	4bbe      	ldr	r3, [pc, #760]	; (8007218 <UART_SetConfig+0x1510>)
 8006f1e:	f04f 0400 	mov.w	r4, #0
 8006f22:	e026      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f24:	4bbd      	ldr	r3, [pc, #756]	; (800721c <UART_SetConfig+0x1514>)
 8006f26:	f04f 0400 	mov.w	r4, #0
 8006f2a:	e022      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f2c:	4bbc      	ldr	r3, [pc, #752]	; (8007220 <UART_SetConfig+0x1518>)
 8006f2e:	f04f 0400 	mov.w	r4, #0
 8006f32:	e01e      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f34:	4bbb      	ldr	r3, [pc, #748]	; (8007224 <UART_SetConfig+0x151c>)
 8006f36:	f04f 0400 	mov.w	r4, #0
 8006f3a:	e01a      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f3c:	a4b0      	add	r4, pc, #704	; (adr r4, 8007200 <UART_SetConfig+0x14f8>)
 8006f3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006f42:	e016      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f44:	4bb8      	ldr	r3, [pc, #736]	; (8007228 <UART_SetConfig+0x1520>)
 8006f46:	f04f 0400 	mov.w	r4, #0
 8006f4a:	e012      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f4c:	4bb7      	ldr	r3, [pc, #732]	; (800722c <UART_SetConfig+0x1524>)
 8006f4e:	f04f 0400 	mov.w	r4, #0
 8006f52:	e00e      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f54:	a4ac      	add	r4, pc, #688	; (adr r4, 8007208 <UART_SetConfig+0x1500>)
 8006f56:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006f5a:	e00a      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f5c:	4bb4      	ldr	r3, [pc, #720]	; (8007230 <UART_SetConfig+0x1528>)
 8006f5e:	f04f 0400 	mov.w	r4, #0
 8006f62:	e006      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f64:	4bb3      	ldr	r3, [pc, #716]	; (8007234 <UART_SetConfig+0x152c>)
 8006f66:	f04f 0400 	mov.w	r4, #0
 8006f6a:	e002      	b.n	8006f72 <UART_SetConfig+0x126a>
 8006f6c:	4ba9      	ldr	r3, [pc, #676]	; (8007214 <UART_SetConfig+0x150c>)
 8006f6e:	f04f 0400 	mov.w	r4, #0
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6852      	ldr	r2, [r2, #4]
 8006f76:	0852      	lsrs	r2, r2, #1
 8006f78:	4611      	mov	r1, r2
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	eb13 0b01 	adds.w	fp, r3, r1
 8006f82:	eb44 0c02 	adc.w	ip, r4, r2
 8006f86:	4658      	mov	r0, fp
 8006f88:	4661      	mov	r1, ip
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f04f 0400 	mov.w	r4, #0
 8006f92:	461a      	mov	r2, r3
 8006f94:	4623      	mov	r3, r4
 8006f96:	f7f9 f99f 	bl	80002d8 <__aeabi_uldivmod>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fa0:	e088      	b.n	80070b4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d064      	beq.n	8007074 <UART_SetConfig+0x136c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d05b      	beq.n	800706a <UART_SetConfig+0x1362>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d052      	beq.n	8007060 <UART_SetConfig+0x1358>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d04a      	beq.n	8007058 <UART_SetConfig+0x1350>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d041      	beq.n	800704e <UART_SetConfig+0x1346>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d039      	beq.n	8007046 <UART_SetConfig+0x133e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	2b06      	cmp	r3, #6
 8006fd8:	d031      	beq.n	800703e <UART_SetConfig+0x1336>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	2b07      	cmp	r3, #7
 8006fe0:	d028      	beq.n	8007034 <UART_SetConfig+0x132c>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2b08      	cmp	r3, #8
 8006fe8:	d01f      	beq.n	800702a <UART_SetConfig+0x1322>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	2b09      	cmp	r3, #9
 8006ff0:	d016      	beq.n	8007020 <UART_SetConfig+0x1318>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	2b0a      	cmp	r3, #10
 8006ff8:	d00d      	beq.n	8007016 <UART_SetConfig+0x130e>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	2b0b      	cmp	r3, #11
 8007000:	d104      	bne.n	800700c <UART_SetConfig+0x1304>
 8007002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007006:	f04f 0400 	mov.w	r4, #0
 800700a:	e037      	b.n	800707c <UART_SetConfig+0x1374>
 800700c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007010:	f04f 0400 	mov.w	r4, #0
 8007014:	e032      	b.n	800707c <UART_SetConfig+0x1374>
 8007016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800701a:	f04f 0400 	mov.w	r4, #0
 800701e:	e02d      	b.n	800707c <UART_SetConfig+0x1374>
 8007020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007024:	f04f 0400 	mov.w	r4, #0
 8007028:	e028      	b.n	800707c <UART_SetConfig+0x1374>
 800702a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800702e:	f04f 0400 	mov.w	r4, #0
 8007032:	e023      	b.n	800707c <UART_SetConfig+0x1374>
 8007034:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007038:	f04f 0400 	mov.w	r4, #0
 800703c:	e01e      	b.n	800707c <UART_SetConfig+0x1374>
 800703e:	4b7e      	ldr	r3, [pc, #504]	; (8007238 <UART_SetConfig+0x1530>)
 8007040:	f04f 0400 	mov.w	r4, #0
 8007044:	e01a      	b.n	800707c <UART_SetConfig+0x1374>
 8007046:	4b7d      	ldr	r3, [pc, #500]	; (800723c <UART_SetConfig+0x1534>)
 8007048:	f04f 0400 	mov.w	r4, #0
 800704c:	e016      	b.n	800707c <UART_SetConfig+0x1374>
 800704e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007052:	f04f 0400 	mov.w	r4, #0
 8007056:	e011      	b.n	800707c <UART_SetConfig+0x1374>
 8007058:	4b79      	ldr	r3, [pc, #484]	; (8007240 <UART_SetConfig+0x1538>)
 800705a:	f04f 0400 	mov.w	r4, #0
 800705e:	e00d      	b.n	800707c <UART_SetConfig+0x1374>
 8007060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007064:	f04f 0400 	mov.w	r4, #0
 8007068:	e008      	b.n	800707c <UART_SetConfig+0x1374>
 800706a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800706e:	f04f 0400 	mov.w	r4, #0
 8007072:	e003      	b.n	800707c <UART_SetConfig+0x1374>
 8007074:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007078:	f04f 0400 	mov.w	r4, #0
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6852      	ldr	r2, [r2, #4]
 8007080:	0852      	lsrs	r2, r2, #1
 8007082:	4611      	mov	r1, r2
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	eb13 0b01 	adds.w	fp, r3, r1
 800708c:	eb44 0c02 	adc.w	ip, r4, r2
 8007090:	4658      	mov	r0, fp
 8007092:	4661      	mov	r1, ip
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f04f 0400 	mov.w	r4, #0
 800709c:	461a      	mov	r2, r3
 800709e:	4623      	mov	r3, r4
 80070a0:	f7f9 f91a 	bl	80002d8 <__aeabi_uldivmod>
 80070a4:	4603      	mov	r3, r0
 80070a6:	460c      	mov	r4, r1
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070aa:	e003      	b.n	80070b4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 80070b2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ba:	d309      	bcc.n	80070d0 <UART_SetConfig+0x13c8>
 80070bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070c2:	d205      	bcs.n	80070d0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ca:	60da      	str	r2, [r3, #12]
 80070cc:	f000 bf85 	b.w	8007fda <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070d6:	f000 bf80 	b.w	8007fda <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e2:	f040 83da 	bne.w	800789a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 80070e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	f200 83b3 	bhi.w	8007856 <UART_SetConfig+0x1b4e>
 80070f0:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <UART_SetConfig+0x13f0>)
 80070f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f6:	bf00      	nop
 80070f8:	08007245 	.word	0x08007245
 80070fc:	080072fd 	.word	0x080072fd
 8007100:	08007857 	.word	0x08007857
 8007104:	08007857 	.word	0x08007857
 8007108:	080073b5 	.word	0x080073b5
 800710c:	08007857 	.word	0x08007857
 8007110:	08007857 	.word	0x08007857
 8007114:	08007857 	.word	0x08007857
 8007118:	08007471 	.word	0x08007471
 800711c:	08007857 	.word	0x08007857
 8007120:	08007857 	.word	0x08007857
 8007124:	08007857 	.word	0x08007857
 8007128:	08007857 	.word	0x08007857
 800712c:	08007857 	.word	0x08007857
 8007130:	08007857 	.word	0x08007857
 8007134:	08007857 	.word	0x08007857
 8007138:	0800752d 	.word	0x0800752d
 800713c:	08007857 	.word	0x08007857
 8007140:	08007857 	.word	0x08007857
 8007144:	08007857 	.word	0x08007857
 8007148:	08007857 	.word	0x08007857
 800714c:	08007857 	.word	0x08007857
 8007150:	08007857 	.word	0x08007857
 8007154:	08007857 	.word	0x08007857
 8007158:	08007857 	.word	0x08007857
 800715c:	08007857 	.word	0x08007857
 8007160:	08007857 	.word	0x08007857
 8007164:	08007857 	.word	0x08007857
 8007168:	08007857 	.word	0x08007857
 800716c:	08007857 	.word	0x08007857
 8007170:	08007857 	.word	0x08007857
 8007174:	08007857 	.word	0x08007857
 8007178:	0800769f 	.word	0x0800769f
 800717c:	08007857 	.word	0x08007857
 8007180:	08007857 	.word	0x08007857
 8007184:	08007857 	.word	0x08007857
 8007188:	08007857 	.word	0x08007857
 800718c:	08007857 	.word	0x08007857
 8007190:	08007857 	.word	0x08007857
 8007194:	08007857 	.word	0x08007857
 8007198:	08007857 	.word	0x08007857
 800719c:	08007857 	.word	0x08007857
 80071a0:	08007857 	.word	0x08007857
 80071a4:	08007857 	.word	0x08007857
 80071a8:	08007857 	.word	0x08007857
 80071ac:	08007857 	.word	0x08007857
 80071b0:	08007857 	.word	0x08007857
 80071b4:	08007857 	.word	0x08007857
 80071b8:	08007857 	.word	0x08007857
 80071bc:	08007857 	.word	0x08007857
 80071c0:	08007857 	.word	0x08007857
 80071c4:	08007857 	.word	0x08007857
 80071c8:	08007857 	.word	0x08007857
 80071cc:	08007857 	.word	0x08007857
 80071d0:	08007857 	.word	0x08007857
 80071d4:	08007857 	.word	0x08007857
 80071d8:	08007857 	.word	0x08007857
 80071dc:	08007857 	.word	0x08007857
 80071e0:	08007857 	.word	0x08007857
 80071e4:	08007857 	.word	0x08007857
 80071e8:	08007857 	.word	0x08007857
 80071ec:	08007857 	.word	0x08007857
 80071f0:	08007857 	.word	0x08007857
 80071f4:	08007857 	.word	0x08007857
 80071f8:	08007795 	.word	0x08007795
 80071fc:	f3af 8000 	nop.w
 8007200:	05161500 	.word	0x05161500
 8007204:	00000000 	.word	0x00000000
 8007208:	0a2c2a00 	.word	0x0a2c2a00
 800720c:	00000000 	.word	0x00000000
 8007210:	003d0900 	.word	0x003d0900
 8007214:	3d090000 	.word	0x3d090000
 8007218:	007a1200 	.word	0x007a1200
 800721c:	00f42400 	.word	0x00f42400
 8007220:	01e84800 	.word	0x01e84800
 8007224:	03d09000 	.word	0x03d09000
 8007228:	061a8000 	.word	0x061a8000
 800722c:	07a12000 	.word	0x07a12000
 8007230:	0f424000 	.word	0x0f424000
 8007234:	1e848000 	.word	0x1e848000
 8007238:	000aaa00 	.word	0x000aaa00
 800723c:	000ccc00 	.word	0x000ccc00
 8007240:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007244:	f7fd f95c 	bl	8004500 <HAL_RCC_GetPCLK1Freq>
 8007248:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	d044      	beq.n	80072dc <UART_SetConfig+0x15d4>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	2b01      	cmp	r3, #1
 8007258:	d03e      	beq.n	80072d8 <UART_SetConfig+0x15d0>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2b02      	cmp	r3, #2
 8007260:	d038      	beq.n	80072d4 <UART_SetConfig+0x15cc>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	2b03      	cmp	r3, #3
 8007268:	d032      	beq.n	80072d0 <UART_SetConfig+0x15c8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	2b04      	cmp	r3, #4
 8007270:	d02c      	beq.n	80072cc <UART_SetConfig+0x15c4>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	2b05      	cmp	r3, #5
 8007278:	d026      	beq.n	80072c8 <UART_SetConfig+0x15c0>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	2b06      	cmp	r3, #6
 8007280:	d020      	beq.n	80072c4 <UART_SetConfig+0x15bc>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b07      	cmp	r3, #7
 8007288:	d01a      	beq.n	80072c0 <UART_SetConfig+0x15b8>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b08      	cmp	r3, #8
 8007290:	d014      	beq.n	80072bc <UART_SetConfig+0x15b4>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b09      	cmp	r3, #9
 8007298:	d00e      	beq.n	80072b8 <UART_SetConfig+0x15b0>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	2b0a      	cmp	r3, #10
 80072a0:	d008      	beq.n	80072b4 <UART_SetConfig+0x15ac>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b0b      	cmp	r3, #11
 80072a8:	d102      	bne.n	80072b0 <UART_SetConfig+0x15a8>
 80072aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ae:	e016      	b.n	80072de <UART_SetConfig+0x15d6>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e014      	b.n	80072de <UART_SetConfig+0x15d6>
 80072b4:	2380      	movs	r3, #128	; 0x80
 80072b6:	e012      	b.n	80072de <UART_SetConfig+0x15d6>
 80072b8:	2340      	movs	r3, #64	; 0x40
 80072ba:	e010      	b.n	80072de <UART_SetConfig+0x15d6>
 80072bc:	2320      	movs	r3, #32
 80072be:	e00e      	b.n	80072de <UART_SetConfig+0x15d6>
 80072c0:	2310      	movs	r3, #16
 80072c2:	e00c      	b.n	80072de <UART_SetConfig+0x15d6>
 80072c4:	230c      	movs	r3, #12
 80072c6:	e00a      	b.n	80072de <UART_SetConfig+0x15d6>
 80072c8:	230a      	movs	r3, #10
 80072ca:	e008      	b.n	80072de <UART_SetConfig+0x15d6>
 80072cc:	2308      	movs	r3, #8
 80072ce:	e006      	b.n	80072de <UART_SetConfig+0x15d6>
 80072d0:	2306      	movs	r3, #6
 80072d2:	e004      	b.n	80072de <UART_SetConfig+0x15d6>
 80072d4:	2304      	movs	r3, #4
 80072d6:	e002      	b.n	80072de <UART_SetConfig+0x15d6>
 80072d8:	2302      	movs	r3, #2
 80072da:	e000      	b.n	80072de <UART_SetConfig+0x15d6>
 80072dc:	2301      	movs	r3, #1
 80072de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e4:	005a      	lsls	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	441a      	add	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072fa:	e2b0      	b.n	800785e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072fc:	f7fd f916 	bl	800452c <HAL_RCC_GetPCLK2Freq>
 8007300:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	d044      	beq.n	8007394 <UART_SetConfig+0x168c>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	2b01      	cmp	r3, #1
 8007310:	d03e      	beq.n	8007390 <UART_SetConfig+0x1688>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	2b02      	cmp	r3, #2
 8007318:	d038      	beq.n	800738c <UART_SetConfig+0x1684>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	2b03      	cmp	r3, #3
 8007320:	d032      	beq.n	8007388 <UART_SetConfig+0x1680>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	2b04      	cmp	r3, #4
 8007328:	d02c      	beq.n	8007384 <UART_SetConfig+0x167c>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	2b05      	cmp	r3, #5
 8007330:	d026      	beq.n	8007380 <UART_SetConfig+0x1678>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	2b06      	cmp	r3, #6
 8007338:	d020      	beq.n	800737c <UART_SetConfig+0x1674>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	2b07      	cmp	r3, #7
 8007340:	d01a      	beq.n	8007378 <UART_SetConfig+0x1670>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	2b08      	cmp	r3, #8
 8007348:	d014      	beq.n	8007374 <UART_SetConfig+0x166c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	2b09      	cmp	r3, #9
 8007350:	d00e      	beq.n	8007370 <UART_SetConfig+0x1668>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	2b0a      	cmp	r3, #10
 8007358:	d008      	beq.n	800736c <UART_SetConfig+0x1664>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	2b0b      	cmp	r3, #11
 8007360:	d102      	bne.n	8007368 <UART_SetConfig+0x1660>
 8007362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007366:	e016      	b.n	8007396 <UART_SetConfig+0x168e>
 8007368:	2301      	movs	r3, #1
 800736a:	e014      	b.n	8007396 <UART_SetConfig+0x168e>
 800736c:	2380      	movs	r3, #128	; 0x80
 800736e:	e012      	b.n	8007396 <UART_SetConfig+0x168e>
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	e010      	b.n	8007396 <UART_SetConfig+0x168e>
 8007374:	2320      	movs	r3, #32
 8007376:	e00e      	b.n	8007396 <UART_SetConfig+0x168e>
 8007378:	2310      	movs	r3, #16
 800737a:	e00c      	b.n	8007396 <UART_SetConfig+0x168e>
 800737c:	230c      	movs	r3, #12
 800737e:	e00a      	b.n	8007396 <UART_SetConfig+0x168e>
 8007380:	230a      	movs	r3, #10
 8007382:	e008      	b.n	8007396 <UART_SetConfig+0x168e>
 8007384:	2308      	movs	r3, #8
 8007386:	e006      	b.n	8007396 <UART_SetConfig+0x168e>
 8007388:	2306      	movs	r3, #6
 800738a:	e004      	b.n	8007396 <UART_SetConfig+0x168e>
 800738c:	2304      	movs	r3, #4
 800738e:	e002      	b.n	8007396 <UART_SetConfig+0x168e>
 8007390:	2302      	movs	r3, #2
 8007392:	e000      	b.n	8007396 <UART_SetConfig+0x168e>
 8007394:	2301      	movs	r3, #1
 8007396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	005a      	lsls	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	441a      	add	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073b2:	e254      	b.n	800785e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073b4:	f107 0318 	add.w	r3, r7, #24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fd ffc1 	bl	8005340 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d044      	beq.n	8007452 <UART_SetConfig+0x174a>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d03e      	beq.n	800744e <UART_SetConfig+0x1746>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d038      	beq.n	800744a <UART_SetConfig+0x1742>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d032      	beq.n	8007446 <UART_SetConfig+0x173e>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d02c      	beq.n	8007442 <UART_SetConfig+0x173a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	2b05      	cmp	r3, #5
 80073ee:	d026      	beq.n	800743e <UART_SetConfig+0x1736>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	2b06      	cmp	r3, #6
 80073f6:	d020      	beq.n	800743a <UART_SetConfig+0x1732>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	2b07      	cmp	r3, #7
 80073fe:	d01a      	beq.n	8007436 <UART_SetConfig+0x172e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	2b08      	cmp	r3, #8
 8007406:	d014      	beq.n	8007432 <UART_SetConfig+0x172a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	2b09      	cmp	r3, #9
 800740e:	d00e      	beq.n	800742e <UART_SetConfig+0x1726>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	2b0a      	cmp	r3, #10
 8007416:	d008      	beq.n	800742a <UART_SetConfig+0x1722>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	2b0b      	cmp	r3, #11
 800741e:	d102      	bne.n	8007426 <UART_SetConfig+0x171e>
 8007420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007424:	e016      	b.n	8007454 <UART_SetConfig+0x174c>
 8007426:	2301      	movs	r3, #1
 8007428:	e014      	b.n	8007454 <UART_SetConfig+0x174c>
 800742a:	2380      	movs	r3, #128	; 0x80
 800742c:	e012      	b.n	8007454 <UART_SetConfig+0x174c>
 800742e:	2340      	movs	r3, #64	; 0x40
 8007430:	e010      	b.n	8007454 <UART_SetConfig+0x174c>
 8007432:	2320      	movs	r3, #32
 8007434:	e00e      	b.n	8007454 <UART_SetConfig+0x174c>
 8007436:	2310      	movs	r3, #16
 8007438:	e00c      	b.n	8007454 <UART_SetConfig+0x174c>
 800743a:	230c      	movs	r3, #12
 800743c:	e00a      	b.n	8007454 <UART_SetConfig+0x174c>
 800743e:	230a      	movs	r3, #10
 8007440:	e008      	b.n	8007454 <UART_SetConfig+0x174c>
 8007442:	2308      	movs	r3, #8
 8007444:	e006      	b.n	8007454 <UART_SetConfig+0x174c>
 8007446:	2306      	movs	r3, #6
 8007448:	e004      	b.n	8007454 <UART_SetConfig+0x174c>
 800744a:	2304      	movs	r3, #4
 800744c:	e002      	b.n	8007454 <UART_SetConfig+0x174c>
 800744e:	2302      	movs	r3, #2
 8007450:	e000      	b.n	8007454 <UART_SetConfig+0x174c>
 8007452:	2301      	movs	r3, #1
 8007454:	fbb2 f3f3 	udiv	r3, r2, r3
 8007458:	005a      	lsls	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	441a      	add	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	fbb2 f3f3 	udiv	r3, r2, r3
 800746a:	b29b      	uxth	r3, r3
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800746e:	e1f6      	b.n	800785e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007470:	f107 030c 	add.w	r3, r7, #12
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe f8af 	bl	80055d8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	2b00      	cmp	r3, #0
 8007482:	d044      	beq.n	800750e <UART_SetConfig+0x1806>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	2b01      	cmp	r3, #1
 800748a:	d03e      	beq.n	800750a <UART_SetConfig+0x1802>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b02      	cmp	r3, #2
 8007492:	d038      	beq.n	8007506 <UART_SetConfig+0x17fe>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	2b03      	cmp	r3, #3
 800749a:	d032      	beq.n	8007502 <UART_SetConfig+0x17fa>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d02c      	beq.n	80074fe <UART_SetConfig+0x17f6>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	d026      	beq.n	80074fa <UART_SetConfig+0x17f2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	2b06      	cmp	r3, #6
 80074b2:	d020      	beq.n	80074f6 <UART_SetConfig+0x17ee>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b07      	cmp	r3, #7
 80074ba:	d01a      	beq.n	80074f2 <UART_SetConfig+0x17ea>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d014      	beq.n	80074ee <UART_SetConfig+0x17e6>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	2b09      	cmp	r3, #9
 80074ca:	d00e      	beq.n	80074ea <UART_SetConfig+0x17e2>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2b0a      	cmp	r3, #10
 80074d2:	d008      	beq.n	80074e6 <UART_SetConfig+0x17de>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	2b0b      	cmp	r3, #11
 80074da:	d102      	bne.n	80074e2 <UART_SetConfig+0x17da>
 80074dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074e0:	e016      	b.n	8007510 <UART_SetConfig+0x1808>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e014      	b.n	8007510 <UART_SetConfig+0x1808>
 80074e6:	2380      	movs	r3, #128	; 0x80
 80074e8:	e012      	b.n	8007510 <UART_SetConfig+0x1808>
 80074ea:	2340      	movs	r3, #64	; 0x40
 80074ec:	e010      	b.n	8007510 <UART_SetConfig+0x1808>
 80074ee:	2320      	movs	r3, #32
 80074f0:	e00e      	b.n	8007510 <UART_SetConfig+0x1808>
 80074f2:	2310      	movs	r3, #16
 80074f4:	e00c      	b.n	8007510 <UART_SetConfig+0x1808>
 80074f6:	230c      	movs	r3, #12
 80074f8:	e00a      	b.n	8007510 <UART_SetConfig+0x1808>
 80074fa:	230a      	movs	r3, #10
 80074fc:	e008      	b.n	8007510 <UART_SetConfig+0x1808>
 80074fe:	2308      	movs	r3, #8
 8007500:	e006      	b.n	8007510 <UART_SetConfig+0x1808>
 8007502:	2306      	movs	r3, #6
 8007504:	e004      	b.n	8007510 <UART_SetConfig+0x1808>
 8007506:	2304      	movs	r3, #4
 8007508:	e002      	b.n	8007510 <UART_SetConfig+0x1808>
 800750a:	2302      	movs	r3, #2
 800750c:	e000      	b.n	8007510 <UART_SetConfig+0x1808>
 800750e:	2301      	movs	r3, #1
 8007510:	fbb2 f3f3 	udiv	r3, r2, r3
 8007514:	005a      	lsls	r2, r3, #1
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	441a      	add	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	fbb2 f3f3 	udiv	r3, r2, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800752a:	e198      	b.n	800785e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800752c:	4b87      	ldr	r3, [pc, #540]	; (800774c <UART_SetConfig+0x1a44>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05e      	beq.n	80075f6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007538:	4b84      	ldr	r3, [pc, #528]	; (800774c <UART_SetConfig+0x1a44>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	08db      	lsrs	r3, r3, #3
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	4a83      	ldr	r2, [pc, #524]	; (8007750 <UART_SetConfig+0x1a48>)
 8007544:	40da      	lsrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d044      	beq.n	80075d8 <UART_SetConfig+0x18d0>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	2b01      	cmp	r3, #1
 8007554:	d03e      	beq.n	80075d4 <UART_SetConfig+0x18cc>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	2b02      	cmp	r3, #2
 800755c:	d038      	beq.n	80075d0 <UART_SetConfig+0x18c8>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	2b03      	cmp	r3, #3
 8007564:	d032      	beq.n	80075cc <UART_SetConfig+0x18c4>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	2b04      	cmp	r3, #4
 800756c:	d02c      	beq.n	80075c8 <UART_SetConfig+0x18c0>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	2b05      	cmp	r3, #5
 8007574:	d026      	beq.n	80075c4 <UART_SetConfig+0x18bc>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	2b06      	cmp	r3, #6
 800757c:	d020      	beq.n	80075c0 <UART_SetConfig+0x18b8>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	2b07      	cmp	r3, #7
 8007584:	d01a      	beq.n	80075bc <UART_SetConfig+0x18b4>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	2b08      	cmp	r3, #8
 800758c:	d014      	beq.n	80075b8 <UART_SetConfig+0x18b0>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	2b09      	cmp	r3, #9
 8007594:	d00e      	beq.n	80075b4 <UART_SetConfig+0x18ac>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	2b0a      	cmp	r3, #10
 800759c:	d008      	beq.n	80075b0 <UART_SetConfig+0x18a8>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	2b0b      	cmp	r3, #11
 80075a4:	d102      	bne.n	80075ac <UART_SetConfig+0x18a4>
 80075a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075aa:	e016      	b.n	80075da <UART_SetConfig+0x18d2>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e014      	b.n	80075da <UART_SetConfig+0x18d2>
 80075b0:	2380      	movs	r3, #128	; 0x80
 80075b2:	e012      	b.n	80075da <UART_SetConfig+0x18d2>
 80075b4:	2340      	movs	r3, #64	; 0x40
 80075b6:	e010      	b.n	80075da <UART_SetConfig+0x18d2>
 80075b8:	2320      	movs	r3, #32
 80075ba:	e00e      	b.n	80075da <UART_SetConfig+0x18d2>
 80075bc:	2310      	movs	r3, #16
 80075be:	e00c      	b.n	80075da <UART_SetConfig+0x18d2>
 80075c0:	230c      	movs	r3, #12
 80075c2:	e00a      	b.n	80075da <UART_SetConfig+0x18d2>
 80075c4:	230a      	movs	r3, #10
 80075c6:	e008      	b.n	80075da <UART_SetConfig+0x18d2>
 80075c8:	2308      	movs	r3, #8
 80075ca:	e006      	b.n	80075da <UART_SetConfig+0x18d2>
 80075cc:	2306      	movs	r3, #6
 80075ce:	e004      	b.n	80075da <UART_SetConfig+0x18d2>
 80075d0:	2304      	movs	r3, #4
 80075d2:	e002      	b.n	80075da <UART_SetConfig+0x18d2>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e000      	b.n	80075da <UART_SetConfig+0x18d2>
 80075d8:	2301      	movs	r3, #1
 80075da:	fbb2 f3f3 	udiv	r3, r2, r3
 80075de:	005a      	lsls	r2, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	085b      	lsrs	r3, r3, #1
 80075e6:	441a      	add	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80075f4:	e133      	b.n	800785e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d043      	beq.n	8007686 <UART_SetConfig+0x197e>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	2b01      	cmp	r3, #1
 8007604:	d03d      	beq.n	8007682 <UART_SetConfig+0x197a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	2b02      	cmp	r3, #2
 800760c:	d037      	beq.n	800767e <UART_SetConfig+0x1976>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	2b03      	cmp	r3, #3
 8007614:	d031      	beq.n	800767a <UART_SetConfig+0x1972>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	2b04      	cmp	r3, #4
 800761c:	d02b      	beq.n	8007676 <UART_SetConfig+0x196e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	2b05      	cmp	r3, #5
 8007624:	d025      	beq.n	8007672 <UART_SetConfig+0x196a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	2b06      	cmp	r3, #6
 800762c:	d01f      	beq.n	800766e <UART_SetConfig+0x1966>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	2b07      	cmp	r3, #7
 8007634:	d019      	beq.n	800766a <UART_SetConfig+0x1962>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	2b08      	cmp	r3, #8
 800763c:	d013      	beq.n	8007666 <UART_SetConfig+0x195e>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	2b09      	cmp	r3, #9
 8007644:	d00d      	beq.n	8007662 <UART_SetConfig+0x195a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	2b0a      	cmp	r3, #10
 800764c:	d007      	beq.n	800765e <UART_SetConfig+0x1956>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	2b0b      	cmp	r3, #11
 8007654:	d101      	bne.n	800765a <UART_SetConfig+0x1952>
 8007656:	4b3f      	ldr	r3, [pc, #252]	; (8007754 <UART_SetConfig+0x1a4c>)
 8007658:	e016      	b.n	8007688 <UART_SetConfig+0x1980>
 800765a:	4b3f      	ldr	r3, [pc, #252]	; (8007758 <UART_SetConfig+0x1a50>)
 800765c:	e014      	b.n	8007688 <UART_SetConfig+0x1980>
 800765e:	4b3f      	ldr	r3, [pc, #252]	; (800775c <UART_SetConfig+0x1a54>)
 8007660:	e012      	b.n	8007688 <UART_SetConfig+0x1980>
 8007662:	4b3f      	ldr	r3, [pc, #252]	; (8007760 <UART_SetConfig+0x1a58>)
 8007664:	e010      	b.n	8007688 <UART_SetConfig+0x1980>
 8007666:	4b3f      	ldr	r3, [pc, #252]	; (8007764 <UART_SetConfig+0x1a5c>)
 8007668:	e00e      	b.n	8007688 <UART_SetConfig+0x1980>
 800766a:	4b3f      	ldr	r3, [pc, #252]	; (8007768 <UART_SetConfig+0x1a60>)
 800766c:	e00c      	b.n	8007688 <UART_SetConfig+0x1980>
 800766e:	4b3f      	ldr	r3, [pc, #252]	; (800776c <UART_SetConfig+0x1a64>)
 8007670:	e00a      	b.n	8007688 <UART_SetConfig+0x1980>
 8007672:	4b3f      	ldr	r3, [pc, #252]	; (8007770 <UART_SetConfig+0x1a68>)
 8007674:	e008      	b.n	8007688 <UART_SetConfig+0x1980>
 8007676:	4b3f      	ldr	r3, [pc, #252]	; (8007774 <UART_SetConfig+0x1a6c>)
 8007678:	e006      	b.n	8007688 <UART_SetConfig+0x1980>
 800767a:	4b3f      	ldr	r3, [pc, #252]	; (8007778 <UART_SetConfig+0x1a70>)
 800767c:	e004      	b.n	8007688 <UART_SetConfig+0x1980>
 800767e:	4b3f      	ldr	r3, [pc, #252]	; (800777c <UART_SetConfig+0x1a74>)
 8007680:	e002      	b.n	8007688 <UART_SetConfig+0x1980>
 8007682:	4b33      	ldr	r3, [pc, #204]	; (8007750 <UART_SetConfig+0x1a48>)
 8007684:	e000      	b.n	8007688 <UART_SetConfig+0x1980>
 8007686:	4b34      	ldr	r3, [pc, #208]	; (8007758 <UART_SetConfig+0x1a50>)
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6852      	ldr	r2, [r2, #4]
 800768c:	0852      	lsrs	r2, r2, #1
 800768e:	441a      	add	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	fbb2 f3f3 	udiv	r3, r2, r3
 8007698:	b29b      	uxth	r3, r3
 800769a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800769c:	e0df      	b.n	800785e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d045      	beq.n	8007732 <UART_SetConfig+0x1a2a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d03f      	beq.n	800772e <UART_SetConfig+0x1a26>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d039      	beq.n	800772a <UART_SetConfig+0x1a22>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d033      	beq.n	8007726 <UART_SetConfig+0x1a1e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d02d      	beq.n	8007722 <UART_SetConfig+0x1a1a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d027      	beq.n	800771e <UART_SetConfig+0x1a16>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	2b06      	cmp	r3, #6
 80076d4:	d021      	beq.n	800771a <UART_SetConfig+0x1a12>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	2b07      	cmp	r3, #7
 80076dc:	d01b      	beq.n	8007716 <UART_SetConfig+0x1a0e>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d015      	beq.n	8007712 <UART_SetConfig+0x1a0a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	2b09      	cmp	r3, #9
 80076ec:	d00f      	beq.n	800770e <UART_SetConfig+0x1a06>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	2b0a      	cmp	r3, #10
 80076f4:	d008      	beq.n	8007708 <UART_SetConfig+0x1a00>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	2b0b      	cmp	r3, #11
 80076fc:	d102      	bne.n	8007704 <UART_SetConfig+0x19fc>
 80076fe:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007702:	e017      	b.n	8007734 <UART_SetConfig+0x1a2c>
 8007704:	4b18      	ldr	r3, [pc, #96]	; (8007768 <UART_SetConfig+0x1a60>)
 8007706:	e015      	b.n	8007734 <UART_SetConfig+0x1a2c>
 8007708:	f24f 4324 	movw	r3, #62500	; 0xf424
 800770c:	e012      	b.n	8007734 <UART_SetConfig+0x1a2c>
 800770e:	4b1c      	ldr	r3, [pc, #112]	; (8007780 <UART_SetConfig+0x1a78>)
 8007710:	e010      	b.n	8007734 <UART_SetConfig+0x1a2c>
 8007712:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <UART_SetConfig+0x1a7c>)
 8007714:	e00e      	b.n	8007734 <UART_SetConfig+0x1a2c>
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <UART_SetConfig+0x1a4c>)
 8007718:	e00c      	b.n	8007734 <UART_SetConfig+0x1a2c>
 800771a:	4b1b      	ldr	r3, [pc, #108]	; (8007788 <UART_SetConfig+0x1a80>)
 800771c:	e00a      	b.n	8007734 <UART_SetConfig+0x1a2c>
 800771e:	4b1b      	ldr	r3, [pc, #108]	; (800778c <UART_SetConfig+0x1a84>)
 8007720:	e008      	b.n	8007734 <UART_SetConfig+0x1a2c>
 8007722:	4b0e      	ldr	r3, [pc, #56]	; (800775c <UART_SetConfig+0x1a54>)
 8007724:	e006      	b.n	8007734 <UART_SetConfig+0x1a2c>
 8007726:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <UART_SetConfig+0x1a88>)
 8007728:	e004      	b.n	8007734 <UART_SetConfig+0x1a2c>
 800772a:	4b0d      	ldr	r3, [pc, #52]	; (8007760 <UART_SetConfig+0x1a58>)
 800772c:	e002      	b.n	8007734 <UART_SetConfig+0x1a2c>
 800772e:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <UART_SetConfig+0x1a5c>)
 8007730:	e000      	b.n	8007734 <UART_SetConfig+0x1a2c>
 8007732:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <UART_SetConfig+0x1a60>)
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6852      	ldr	r2, [r2, #4]
 8007738:	0852      	lsrs	r2, r2, #1
 800773a:	441a      	add	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	fbb2 f3f3 	udiv	r3, r2, r3
 8007744:	b29b      	uxth	r3, r3
 8007746:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007748:	e089      	b.n	800785e <UART_SetConfig+0x1b56>
 800774a:	bf00      	nop
 800774c:	58024400 	.word	0x58024400
 8007750:	03d09000 	.word	0x03d09000
 8007754:	0007a120 	.word	0x0007a120
 8007758:	07a12000 	.word	0x07a12000
 800775c:	000f4240 	.word	0x000f4240
 8007760:	001e8480 	.word	0x001e8480
 8007764:	003d0900 	.word	0x003d0900
 8007768:	007a1200 	.word	0x007a1200
 800776c:	00a2c2aa 	.word	0x00a2c2aa
 8007770:	00c35000 	.word	0x00c35000
 8007774:	00f42400 	.word	0x00f42400
 8007778:	01458554 	.word	0x01458554
 800777c:	01e84800 	.word	0x01e84800
 8007780:	0001e848 	.word	0x0001e848
 8007784:	0003d090 	.word	0x0003d090
 8007788:	000a2c2a 	.word	0x000a2c2a
 800778c:	000c3500 	.word	0x000c3500
 8007790:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b00      	cmp	r3, #0
 800779a:	d04f      	beq.n	800783c <UART_SetConfig+0x1b34>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d048      	beq.n	8007836 <UART_SetConfig+0x1b2e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d041      	beq.n	8007830 <UART_SetConfig+0x1b28>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d03a      	beq.n	800782a <UART_SetConfig+0x1b22>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d033      	beq.n	8007824 <UART_SetConfig+0x1b1c>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b05      	cmp	r3, #5
 80077c2:	d02c      	beq.n	800781e <UART_SetConfig+0x1b16>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b06      	cmp	r3, #6
 80077ca:	d025      	beq.n	8007818 <UART_SetConfig+0x1b10>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	2b07      	cmp	r3, #7
 80077d2:	d01e      	beq.n	8007812 <UART_SetConfig+0x1b0a>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d017      	beq.n	800780c <UART_SetConfig+0x1b04>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	2b09      	cmp	r3, #9
 80077e2:	d010      	beq.n	8007806 <UART_SetConfig+0x1afe>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	2b0a      	cmp	r3, #10
 80077ea:	d009      	beq.n	8007800 <UART_SetConfig+0x1af8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	2b0b      	cmp	r3, #11
 80077f2:	d102      	bne.n	80077fa <UART_SetConfig+0x1af2>
 80077f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077f8:	e022      	b.n	8007840 <UART_SetConfig+0x1b38>
 80077fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80077fe:	e01f      	b.n	8007840 <UART_SetConfig+0x1b38>
 8007800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007804:	e01c      	b.n	8007840 <UART_SetConfig+0x1b38>
 8007806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800780a:	e019      	b.n	8007840 <UART_SetConfig+0x1b38>
 800780c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007810:	e016      	b.n	8007840 <UART_SetConfig+0x1b38>
 8007812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007816:	e013      	b.n	8007840 <UART_SetConfig+0x1b38>
 8007818:	f241 5354 	movw	r3, #5460	; 0x1554
 800781c:	e010      	b.n	8007840 <UART_SetConfig+0x1b38>
 800781e:	f641 1398 	movw	r3, #6552	; 0x1998
 8007822:	e00d      	b.n	8007840 <UART_SetConfig+0x1b38>
 8007824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007828:	e00a      	b.n	8007840 <UART_SetConfig+0x1b38>
 800782a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800782e:	e007      	b.n	8007840 <UART_SetConfig+0x1b38>
 8007830:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007834:	e004      	b.n	8007840 <UART_SetConfig+0x1b38>
 8007836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800783a:	e001      	b.n	8007840 <UART_SetConfig+0x1b38>
 800783c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6852      	ldr	r2, [r2, #4]
 8007844:	0852      	lsrs	r2, r2, #1
 8007846:	441a      	add	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007850:	b29b      	uxth	r3, r3
 8007852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007854:	e003      	b.n	800785e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800785c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800785e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007860:	2b0f      	cmp	r3, #15
 8007862:	d916      	bls.n	8007892 <UART_SetConfig+0x1b8a>
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786a:	d212      	bcs.n	8007892 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800786c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786e:	b29b      	uxth	r3, r3
 8007870:	f023 030f 	bic.w	r3, r3, #15
 8007874:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007878:	085b      	lsrs	r3, r3, #1
 800787a:	b29b      	uxth	r3, r3
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	b29a      	uxth	r2, r3
 8007882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007884:	4313      	orrs	r3, r2
 8007886:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800788e:	60da      	str	r2, [r3, #12]
 8007890:	e3a3      	b.n	8007fda <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007898:	e39f      	b.n	8007fda <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800789a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	f200 8388 	bhi.w	8007fb4 <UART_SetConfig+0x22ac>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <UART_SetConfig+0x1ba4>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	080079b1 	.word	0x080079b1
 80078b0:	08007a67 	.word	0x08007a67
 80078b4:	08007fb5 	.word	0x08007fb5
 80078b8:	08007fb5 	.word	0x08007fb5
 80078bc:	08007b1d 	.word	0x08007b1d
 80078c0:	08007fb5 	.word	0x08007fb5
 80078c4:	08007fb5 	.word	0x08007fb5
 80078c8:	08007fb5 	.word	0x08007fb5
 80078cc:	08007bd7 	.word	0x08007bd7
 80078d0:	08007fb5 	.word	0x08007fb5
 80078d4:	08007fb5 	.word	0x08007fb5
 80078d8:	08007fb5 	.word	0x08007fb5
 80078dc:	08007fb5 	.word	0x08007fb5
 80078e0:	08007fb5 	.word	0x08007fb5
 80078e4:	08007fb5 	.word	0x08007fb5
 80078e8:	08007fb5 	.word	0x08007fb5
 80078ec:	08007c91 	.word	0x08007c91
 80078f0:	08007fb5 	.word	0x08007fb5
 80078f4:	08007fb5 	.word	0x08007fb5
 80078f8:	08007fb5 	.word	0x08007fb5
 80078fc:	08007fb5 	.word	0x08007fb5
 8007900:	08007fb5 	.word	0x08007fb5
 8007904:	08007fb5 	.word	0x08007fb5
 8007908:	08007fb5 	.word	0x08007fb5
 800790c:	08007fb5 	.word	0x08007fb5
 8007910:	08007fb5 	.word	0x08007fb5
 8007914:	08007fb5 	.word	0x08007fb5
 8007918:	08007fb5 	.word	0x08007fb5
 800791c:	08007fb5 	.word	0x08007fb5
 8007920:	08007fb5 	.word	0x08007fb5
 8007924:	08007fb5 	.word	0x08007fb5
 8007928:	08007fb5 	.word	0x08007fb5
 800792c:	08007e01 	.word	0x08007e01
 8007930:	08007fb5 	.word	0x08007fb5
 8007934:	08007fb5 	.word	0x08007fb5
 8007938:	08007fb5 	.word	0x08007fb5
 800793c:	08007fb5 	.word	0x08007fb5
 8007940:	08007fb5 	.word	0x08007fb5
 8007944:	08007fb5 	.word	0x08007fb5
 8007948:	08007fb5 	.word	0x08007fb5
 800794c:	08007fb5 	.word	0x08007fb5
 8007950:	08007fb5 	.word	0x08007fb5
 8007954:	08007fb5 	.word	0x08007fb5
 8007958:	08007fb5 	.word	0x08007fb5
 800795c:	08007fb5 	.word	0x08007fb5
 8007960:	08007fb5 	.word	0x08007fb5
 8007964:	08007fb5 	.word	0x08007fb5
 8007968:	08007fb5 	.word	0x08007fb5
 800796c:	08007fb5 	.word	0x08007fb5
 8007970:	08007fb5 	.word	0x08007fb5
 8007974:	08007fb5 	.word	0x08007fb5
 8007978:	08007fb5 	.word	0x08007fb5
 800797c:	08007fb5 	.word	0x08007fb5
 8007980:	08007fb5 	.word	0x08007fb5
 8007984:	08007fb5 	.word	0x08007fb5
 8007988:	08007fb5 	.word	0x08007fb5
 800798c:	08007fb5 	.word	0x08007fb5
 8007990:	08007fb5 	.word	0x08007fb5
 8007994:	08007fb5 	.word	0x08007fb5
 8007998:	08007fb5 	.word	0x08007fb5
 800799c:	08007fb5 	.word	0x08007fb5
 80079a0:	08007fb5 	.word	0x08007fb5
 80079a4:	08007fb5 	.word	0x08007fb5
 80079a8:	08007fb5 	.word	0x08007fb5
 80079ac:	08007ef5 	.word	0x08007ef5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b0:	f7fc fda6 	bl	8004500 <HAL_RCC_GetPCLK1Freq>
 80079b4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d044      	beq.n	8007a48 <UART_SetConfig+0x1d40>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d03e      	beq.n	8007a44 <UART_SetConfig+0x1d3c>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d038      	beq.n	8007a40 <UART_SetConfig+0x1d38>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d032      	beq.n	8007a3c <UART_SetConfig+0x1d34>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d02c      	beq.n	8007a38 <UART_SetConfig+0x1d30>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	d026      	beq.n	8007a34 <UART_SetConfig+0x1d2c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	2b06      	cmp	r3, #6
 80079ec:	d020      	beq.n	8007a30 <UART_SetConfig+0x1d28>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	2b07      	cmp	r3, #7
 80079f4:	d01a      	beq.n	8007a2c <UART_SetConfig+0x1d24>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	2b08      	cmp	r3, #8
 80079fc:	d014      	beq.n	8007a28 <UART_SetConfig+0x1d20>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	2b09      	cmp	r3, #9
 8007a04:	d00e      	beq.n	8007a24 <UART_SetConfig+0x1d1c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	2b0a      	cmp	r3, #10
 8007a0c:	d008      	beq.n	8007a20 <UART_SetConfig+0x1d18>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	2b0b      	cmp	r3, #11
 8007a14:	d102      	bne.n	8007a1c <UART_SetConfig+0x1d14>
 8007a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a1a:	e016      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e014      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	e012      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a24:	2340      	movs	r3, #64	; 0x40
 8007a26:	e010      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a28:	2320      	movs	r3, #32
 8007a2a:	e00e      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	e00c      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a30:	230c      	movs	r3, #12
 8007a32:	e00a      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a34:	230a      	movs	r3, #10
 8007a36:	e008      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a38:	2308      	movs	r3, #8
 8007a3a:	e006      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a3c:	2306      	movs	r3, #6
 8007a3e:	e004      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a40:	2304      	movs	r3, #4
 8007a42:	e002      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e000      	b.n	8007a4a <UART_SetConfig+0x1d42>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	085b      	lsrs	r3, r3, #1
 8007a56:	441a      	add	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a64:	e2aa      	b.n	8007fbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a66:	f7fc fd61 	bl	800452c <HAL_RCC_GetPCLK2Freq>
 8007a6a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d044      	beq.n	8007afe <UART_SetConfig+0x1df6>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d03e      	beq.n	8007afa <UART_SetConfig+0x1df2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d038      	beq.n	8007af6 <UART_SetConfig+0x1dee>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d032      	beq.n	8007af2 <UART_SetConfig+0x1dea>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d02c      	beq.n	8007aee <UART_SetConfig+0x1de6>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	2b05      	cmp	r3, #5
 8007a9a:	d026      	beq.n	8007aea <UART_SetConfig+0x1de2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2b06      	cmp	r3, #6
 8007aa2:	d020      	beq.n	8007ae6 <UART_SetConfig+0x1dde>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	2b07      	cmp	r3, #7
 8007aaa:	d01a      	beq.n	8007ae2 <UART_SetConfig+0x1dda>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d014      	beq.n	8007ade <UART_SetConfig+0x1dd6>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b09      	cmp	r3, #9
 8007aba:	d00e      	beq.n	8007ada <UART_SetConfig+0x1dd2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b0a      	cmp	r3, #10
 8007ac2:	d008      	beq.n	8007ad6 <UART_SetConfig+0x1dce>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b0b      	cmp	r3, #11
 8007aca:	d102      	bne.n	8007ad2 <UART_SetConfig+0x1dca>
 8007acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ad0:	e016      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e014      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007ad6:	2380      	movs	r3, #128	; 0x80
 8007ad8:	e012      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007ada:	2340      	movs	r3, #64	; 0x40
 8007adc:	e010      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007ade:	2320      	movs	r3, #32
 8007ae0:	e00e      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007ae2:	2310      	movs	r3, #16
 8007ae4:	e00c      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	e00a      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007aea:	230a      	movs	r3, #10
 8007aec:	e008      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007aee:	2308      	movs	r3, #8
 8007af0:	e006      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007af2:	2306      	movs	r3, #6
 8007af4:	e004      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007af6:	2304      	movs	r3, #4
 8007af8:	e002      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e000      	b.n	8007b00 <UART_SetConfig+0x1df8>
 8007afe:	2301      	movs	r3, #1
 8007b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b02:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	085b      	lsrs	r3, r3, #1
 8007b0c:	441a      	add	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b1a:	e24f      	b.n	8007fbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b1c:	f107 0318 	add.w	r3, r7, #24
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fd fc0d 	bl	8005340 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b26:	69fa      	ldr	r2, [r7, #28]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d044      	beq.n	8007bba <UART_SetConfig+0x1eb2>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d03e      	beq.n	8007bb6 <UART_SetConfig+0x1eae>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d038      	beq.n	8007bb2 <UART_SetConfig+0x1eaa>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d032      	beq.n	8007bae <UART_SetConfig+0x1ea6>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d02c      	beq.n	8007baa <UART_SetConfig+0x1ea2>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	2b05      	cmp	r3, #5
 8007b56:	d026      	beq.n	8007ba6 <UART_SetConfig+0x1e9e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	2b06      	cmp	r3, #6
 8007b5e:	d020      	beq.n	8007ba2 <UART_SetConfig+0x1e9a>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	2b07      	cmp	r3, #7
 8007b66:	d01a      	beq.n	8007b9e <UART_SetConfig+0x1e96>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d014      	beq.n	8007b9a <UART_SetConfig+0x1e92>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	d00e      	beq.n	8007b96 <UART_SetConfig+0x1e8e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2b0a      	cmp	r3, #10
 8007b7e:	d008      	beq.n	8007b92 <UART_SetConfig+0x1e8a>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	2b0b      	cmp	r3, #11
 8007b86:	d102      	bne.n	8007b8e <UART_SetConfig+0x1e86>
 8007b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b8c:	e016      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e014      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007b92:	2380      	movs	r3, #128	; 0x80
 8007b94:	e012      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	e010      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007b9a:	2320      	movs	r3, #32
 8007b9c:	e00e      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007b9e:	2310      	movs	r3, #16
 8007ba0:	e00c      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007ba2:	230c      	movs	r3, #12
 8007ba4:	e00a      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007ba6:	230a      	movs	r3, #10
 8007ba8:	e008      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007baa:	2308      	movs	r3, #8
 8007bac:	e006      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007bae:	2306      	movs	r3, #6
 8007bb0:	e004      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007bb2:	2304      	movs	r3, #4
 8007bb4:	e002      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e000      	b.n	8007bbc <UART_SetConfig+0x1eb4>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	085b      	lsrs	r3, r3, #1
 8007bc6:	441a      	add	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bd4:	e1f2      	b.n	8007fbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bd6:	f107 030c 	add.w	r3, r7, #12
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd fcfc 	bl	80055d8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d044      	beq.n	8007c74 <UART_SetConfig+0x1f6c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d03e      	beq.n	8007c70 <UART_SetConfig+0x1f68>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d038      	beq.n	8007c6c <UART_SetConfig+0x1f64>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d032      	beq.n	8007c68 <UART_SetConfig+0x1f60>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d02c      	beq.n	8007c64 <UART_SetConfig+0x1f5c>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d026      	beq.n	8007c60 <UART_SetConfig+0x1f58>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	2b06      	cmp	r3, #6
 8007c18:	d020      	beq.n	8007c5c <UART_SetConfig+0x1f54>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	2b07      	cmp	r3, #7
 8007c20:	d01a      	beq.n	8007c58 <UART_SetConfig+0x1f50>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d014      	beq.n	8007c54 <UART_SetConfig+0x1f4c>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	2b09      	cmp	r3, #9
 8007c30:	d00e      	beq.n	8007c50 <UART_SetConfig+0x1f48>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	2b0a      	cmp	r3, #10
 8007c38:	d008      	beq.n	8007c4c <UART_SetConfig+0x1f44>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	2b0b      	cmp	r3, #11
 8007c40:	d102      	bne.n	8007c48 <UART_SetConfig+0x1f40>
 8007c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c46:	e016      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e014      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c4c:	2380      	movs	r3, #128	; 0x80
 8007c4e:	e012      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c50:	2340      	movs	r3, #64	; 0x40
 8007c52:	e010      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c54:	2320      	movs	r3, #32
 8007c56:	e00e      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	e00c      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c5c:	230c      	movs	r3, #12
 8007c5e:	e00a      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c60:	230a      	movs	r3, #10
 8007c62:	e008      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c64:	2308      	movs	r3, #8
 8007c66:	e006      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c68:	2306      	movs	r3, #6
 8007c6a:	e004      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c6c:	2304      	movs	r3, #4
 8007c6e:	e002      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e000      	b.n	8007c76 <UART_SetConfig+0x1f6e>
 8007c74:	2301      	movs	r3, #1
 8007c76:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	441a      	add	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c8e:	e195      	b.n	8007fbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c90:	4b87      	ldr	r3, [pc, #540]	; (8007eb0 <UART_SetConfig+0x21a8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d05d      	beq.n	8007d58 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c9c:	4b84      	ldr	r3, [pc, #528]	; (8007eb0 <UART_SetConfig+0x21a8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	08db      	lsrs	r3, r3, #3
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	4a83      	ldr	r2, [pc, #524]	; (8007eb4 <UART_SetConfig+0x21ac>)
 8007ca8:	40da      	lsrs	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d044      	beq.n	8007d3c <UART_SetConfig+0x2034>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d03e      	beq.n	8007d38 <UART_SetConfig+0x2030>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d038      	beq.n	8007d34 <UART_SetConfig+0x202c>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d032      	beq.n	8007d30 <UART_SetConfig+0x2028>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d02c      	beq.n	8007d2c <UART_SetConfig+0x2024>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	2b05      	cmp	r3, #5
 8007cd8:	d026      	beq.n	8007d28 <UART_SetConfig+0x2020>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	2b06      	cmp	r3, #6
 8007ce0:	d020      	beq.n	8007d24 <UART_SetConfig+0x201c>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	2b07      	cmp	r3, #7
 8007ce8:	d01a      	beq.n	8007d20 <UART_SetConfig+0x2018>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	2b08      	cmp	r3, #8
 8007cf0:	d014      	beq.n	8007d1c <UART_SetConfig+0x2014>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	2b09      	cmp	r3, #9
 8007cf8:	d00e      	beq.n	8007d18 <UART_SetConfig+0x2010>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	2b0a      	cmp	r3, #10
 8007d00:	d008      	beq.n	8007d14 <UART_SetConfig+0x200c>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	2b0b      	cmp	r3, #11
 8007d08:	d102      	bne.n	8007d10 <UART_SetConfig+0x2008>
 8007d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d0e:	e016      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e014      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d14:	2380      	movs	r3, #128	; 0x80
 8007d16:	e012      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d18:	2340      	movs	r3, #64	; 0x40
 8007d1a:	e010      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	e00e      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d20:	2310      	movs	r3, #16
 8007d22:	e00c      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d24:	230c      	movs	r3, #12
 8007d26:	e00a      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d28:	230a      	movs	r3, #10
 8007d2a:	e008      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d2c:	2308      	movs	r3, #8
 8007d2e:	e006      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d30:	2306      	movs	r3, #6
 8007d32:	e004      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d34:	2304      	movs	r3, #4
 8007d36:	e002      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	e000      	b.n	8007d3e <UART_SetConfig+0x2036>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	441a      	add	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007d56:	e131      	b.n	8007fbc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d043      	beq.n	8007de8 <UART_SetConfig+0x20e0>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d03d      	beq.n	8007de4 <UART_SetConfig+0x20dc>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d037      	beq.n	8007de0 <UART_SetConfig+0x20d8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d031      	beq.n	8007ddc <UART_SetConfig+0x20d4>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d02b      	beq.n	8007dd8 <UART_SetConfig+0x20d0>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	2b05      	cmp	r3, #5
 8007d86:	d025      	beq.n	8007dd4 <UART_SetConfig+0x20cc>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	2b06      	cmp	r3, #6
 8007d8e:	d01f      	beq.n	8007dd0 <UART_SetConfig+0x20c8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	2b07      	cmp	r3, #7
 8007d96:	d019      	beq.n	8007dcc <UART_SetConfig+0x20c4>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d013      	beq.n	8007dc8 <UART_SetConfig+0x20c0>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	2b09      	cmp	r3, #9
 8007da6:	d00d      	beq.n	8007dc4 <UART_SetConfig+0x20bc>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2b0a      	cmp	r3, #10
 8007dae:	d007      	beq.n	8007dc0 <UART_SetConfig+0x20b8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	2b0b      	cmp	r3, #11
 8007db6:	d101      	bne.n	8007dbc <UART_SetConfig+0x20b4>
 8007db8:	4b3f      	ldr	r3, [pc, #252]	; (8007eb8 <UART_SetConfig+0x21b0>)
 8007dba:	e016      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007dbc:	4b3d      	ldr	r3, [pc, #244]	; (8007eb4 <UART_SetConfig+0x21ac>)
 8007dbe:	e014      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007dc0:	4b3e      	ldr	r3, [pc, #248]	; (8007ebc <UART_SetConfig+0x21b4>)
 8007dc2:	e012      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007dc4:	4b3e      	ldr	r3, [pc, #248]	; (8007ec0 <UART_SetConfig+0x21b8>)
 8007dc6:	e010      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007dc8:	4b3e      	ldr	r3, [pc, #248]	; (8007ec4 <UART_SetConfig+0x21bc>)
 8007dca:	e00e      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007dcc:	4b3e      	ldr	r3, [pc, #248]	; (8007ec8 <UART_SetConfig+0x21c0>)
 8007dce:	e00c      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007dd0:	4b3e      	ldr	r3, [pc, #248]	; (8007ecc <UART_SetConfig+0x21c4>)
 8007dd2:	e00a      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007dd4:	4b3e      	ldr	r3, [pc, #248]	; (8007ed0 <UART_SetConfig+0x21c8>)
 8007dd6:	e008      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007dd8:	4b3e      	ldr	r3, [pc, #248]	; (8007ed4 <UART_SetConfig+0x21cc>)
 8007dda:	e006      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007ddc:	4b3e      	ldr	r3, [pc, #248]	; (8007ed8 <UART_SetConfig+0x21d0>)
 8007dde:	e004      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007de0:	4b3e      	ldr	r3, [pc, #248]	; (8007edc <UART_SetConfig+0x21d4>)
 8007de2:	e002      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007de4:	4b3e      	ldr	r3, [pc, #248]	; (8007ee0 <UART_SetConfig+0x21d8>)
 8007de6:	e000      	b.n	8007dea <UART_SetConfig+0x20e2>
 8007de8:	4b32      	ldr	r3, [pc, #200]	; (8007eb4 <UART_SetConfig+0x21ac>)
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6852      	ldr	r2, [r2, #4]
 8007dee:	0852      	lsrs	r2, r2, #1
 8007df0:	441a      	add	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dfe:	e0dd      	b.n	8007fbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d046      	beq.n	8007e96 <UART_SetConfig+0x218e>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d040      	beq.n	8007e92 <UART_SetConfig+0x218a>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d03a      	beq.n	8007e8e <UART_SetConfig+0x2186>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d034      	beq.n	8007e8a <UART_SetConfig+0x2182>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d02e      	beq.n	8007e86 <UART_SetConfig+0x217e>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	2b05      	cmp	r3, #5
 8007e2e:	d028      	beq.n	8007e82 <UART_SetConfig+0x217a>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	2b06      	cmp	r3, #6
 8007e36:	d022      	beq.n	8007e7e <UART_SetConfig+0x2176>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	2b07      	cmp	r3, #7
 8007e3e:	d01c      	beq.n	8007e7a <UART_SetConfig+0x2172>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d016      	beq.n	8007e76 <UART_SetConfig+0x216e>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d00f      	beq.n	8007e70 <UART_SetConfig+0x2168>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	2b0a      	cmp	r3, #10
 8007e56:	d008      	beq.n	8007e6a <UART_SetConfig+0x2162>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	2b0b      	cmp	r3, #11
 8007e5e:	d102      	bne.n	8007e66 <UART_SetConfig+0x215e>
 8007e60:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007e64:	e018      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e66:	4b18      	ldr	r3, [pc, #96]	; (8007ec8 <UART_SetConfig+0x21c0>)
 8007e68:	e016      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e6a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007e6e:	e013      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007e74:	e010      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e76:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <UART_SetConfig+0x21dc>)
 8007e78:	e00e      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e7a:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <UART_SetConfig+0x21b0>)
 8007e7c:	e00c      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <UART_SetConfig+0x21e0>)
 8007e80:	e00a      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e82:	4b1a      	ldr	r3, [pc, #104]	; (8007eec <UART_SetConfig+0x21e4>)
 8007e84:	e008      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e86:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <UART_SetConfig+0x21b4>)
 8007e88:	e006      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e8a:	4b19      	ldr	r3, [pc, #100]	; (8007ef0 <UART_SetConfig+0x21e8>)
 8007e8c:	e004      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ec0 <UART_SetConfig+0x21b8>)
 8007e90:	e002      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e92:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <UART_SetConfig+0x21bc>)
 8007e94:	e000      	b.n	8007e98 <UART_SetConfig+0x2190>
 8007e96:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <UART_SetConfig+0x21c0>)
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6852      	ldr	r2, [r2, #4]
 8007e9c:	0852      	lsrs	r2, r2, #1
 8007e9e:	441a      	add	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007eac:	e086      	b.n	8007fbc <UART_SetConfig+0x22b4>
 8007eae:	bf00      	nop
 8007eb0:	58024400 	.word	0x58024400
 8007eb4:	03d09000 	.word	0x03d09000
 8007eb8:	0003d090 	.word	0x0003d090
 8007ebc:	0007a120 	.word	0x0007a120
 8007ec0:	000f4240 	.word	0x000f4240
 8007ec4:	001e8480 	.word	0x001e8480
 8007ec8:	003d0900 	.word	0x003d0900
 8007ecc:	00516155 	.word	0x00516155
 8007ed0:	0061a800 	.word	0x0061a800
 8007ed4:	007a1200 	.word	0x007a1200
 8007ed8:	00a2c2aa 	.word	0x00a2c2aa
 8007edc:	00f42400 	.word	0x00f42400
 8007ee0:	01e84800 	.word	0x01e84800
 8007ee4:	0001e848 	.word	0x0001e848
 8007ee8:	00051615 	.word	0x00051615
 8007eec:	00061a80 	.word	0x00061a80
 8007ef0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d04e      	beq.n	8007f9a <UART_SetConfig+0x2292>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d047      	beq.n	8007f94 <UART_SetConfig+0x228c>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d040      	beq.n	8007f8e <UART_SetConfig+0x2286>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d039      	beq.n	8007f88 <UART_SetConfig+0x2280>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d032      	beq.n	8007f82 <UART_SetConfig+0x227a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	2b05      	cmp	r3, #5
 8007f22:	d02b      	beq.n	8007f7c <UART_SetConfig+0x2274>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	2b06      	cmp	r3, #6
 8007f2a:	d024      	beq.n	8007f76 <UART_SetConfig+0x226e>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	2b07      	cmp	r3, #7
 8007f32:	d01d      	beq.n	8007f70 <UART_SetConfig+0x2268>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d016      	beq.n	8007f6a <UART_SetConfig+0x2262>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	2b09      	cmp	r3, #9
 8007f42:	d00f      	beq.n	8007f64 <UART_SetConfig+0x225c>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	2b0a      	cmp	r3, #10
 8007f4a:	d008      	beq.n	8007f5e <UART_SetConfig+0x2256>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	2b0b      	cmp	r3, #11
 8007f52:	d101      	bne.n	8007f58 <UART_SetConfig+0x2250>
 8007f54:	2380      	movs	r3, #128	; 0x80
 8007f56:	e022      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f5c:	e01f      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f62:	e01c      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f68:	e019      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f6e:	e016      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f74:	e013      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f76:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007f7a:	e010      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f7c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007f80:	e00d      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f86:	e00a      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f88:	f241 5355 	movw	r3, #5461	; 0x1555
 8007f8c:	e007      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f92:	e004      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f98:	e001      	b.n	8007f9e <UART_SetConfig+0x2296>
 8007f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	6852      	ldr	r2, [r2, #4]
 8007fa2:	0852      	lsrs	r2, r2, #1
 8007fa4:	441a      	add	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fb2:	e003      	b.n	8007fbc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007fba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbe:	2b0f      	cmp	r3, #15
 8007fc0:	d908      	bls.n	8007fd4 <UART_SetConfig+0x22cc>
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc8:	d204      	bcs.n	8007fd4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fd0:	60da      	str	r2, [r3, #12]
 8007fd2:	e002      	b.n	8007fda <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007ff6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3740      	adds	r7, #64	; 0x40
 8007ffe:	46bd      	mov	sp, r7
 8008000:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00a      	beq.n	800802e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00a      	beq.n	8008050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00a      	beq.n	8008072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00a      	beq.n	8008094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00a      	beq.n	80080b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01a      	beq.n	800811a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008102:	d10a      	bne.n	800811a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	605a      	str	r2, [r3, #4]
  }
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af02      	add	r7, sp, #8
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008158:	f7f8 ff5e 	bl	8001018 <HAL_GetTick>
 800815c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b08      	cmp	r3, #8
 800816a:	d10e      	bne.n	800818a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800816c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f82c 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e022      	b.n	80081d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b04      	cmp	r3, #4
 8008196:	d10e      	bne.n	80081b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f816 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e00c      	b.n	80081d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	4613      	mov	r3, r2
 80081e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e8:	e062      	b.n	80082b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f0:	d05e      	beq.n	80082b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f2:	f7f8 ff11 	bl	8001018 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d302      	bcc.n	8008208 <UART_WaitOnFlagUntilTimeout+0x30>
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d11d      	bne.n	8008244 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008216:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0201 	bic.w	r2, r2, #1
 8008226:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2220      	movs	r2, #32
 800822c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2220      	movs	r2, #32
 8008234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e045      	b.n	80082d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0304 	and.w	r3, r3, #4
 800824e:	2b00      	cmp	r3, #0
 8008250:	d02e      	beq.n	80082b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800825c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008260:	d126      	bne.n	80082b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800826a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800827a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0201 	bic.w	r2, r2, #1
 800828a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2220      	movs	r2, #32
 8008290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2220      	movs	r2, #32
 8008298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2220      	movs	r2, #32
 80082a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e00f      	b.n	80082d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	69da      	ldr	r2, [r3, #28]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	4013      	ands	r3, r2
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	429a      	cmp	r2, r3
 80082be:	bf0c      	ite	eq
 80082c0:	2301      	moveq	r3, #1
 80082c2:	2300      	movne	r3, #0
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	461a      	mov	r2, r3
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d08d      	beq.n	80081ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d101      	bne.n	80082ee <HAL_UARTEx_DisableFifoMode+0x16>
 80082ea:	2302      	movs	r3, #2
 80082ec:	e027      	b.n	800833e <HAL_UARTEx_DisableFifoMode+0x66>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2224      	movs	r2, #36	; 0x24
 80082fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0201 	bic.w	r2, r2, #1
 8008314:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800831c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2220      	movs	r2, #32
 8008330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800835e:	2302      	movs	r3, #2
 8008360:	e02d      	b.n	80083be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2224      	movs	r2, #36	; 0x24
 800836e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 0201 	bic.w	r2, r2, #1
 8008388:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f850 	bl	8008444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d101      	bne.n	80083de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083da:	2302      	movs	r3, #2
 80083dc:	e02d      	b.n	800843a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2224      	movs	r2, #36	; 0x24
 80083ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 0201 	bic.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f812 	bl	8008444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b089      	sub	sp, #36	; 0x24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800844c:	4a2f      	ldr	r2, [pc, #188]	; (800850c <UARTEx_SetNbDataToProcess+0xc8>)
 800844e:	f107 0314 	add.w	r3, r7, #20
 8008452:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008456:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800845a:	4a2d      	ldr	r2, [pc, #180]	; (8008510 <UARTEx_SetNbDataToProcess+0xcc>)
 800845c:	f107 030c 	add.w	r3, r7, #12
 8008460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008464:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800846c:	2b00      	cmp	r3, #0
 800846e:	d108      	bne.n	8008482 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008480:	e03d      	b.n	80084fe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008482:	2308      	movs	r3, #8
 8008484:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008486:	2308      	movs	r3, #8
 8008488:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	0e5b      	lsrs	r3, r3, #25
 8008492:	b2db      	uxtb	r3, r3
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	0f5b      	lsrs	r3, r3, #29
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	f003 0307 	and.w	r3, r3, #7
 80084a8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80084aa:	7fbb      	ldrb	r3, [r7, #30]
 80084ac:	7f3a      	ldrb	r2, [r7, #28]
 80084ae:	f107 0120 	add.w	r1, r7, #32
 80084b2:	440a      	add	r2, r1
 80084b4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80084b8:	fb02 f303 	mul.w	r3, r2, r3
 80084bc:	7f3a      	ldrb	r2, [r7, #28]
 80084be:	f107 0120 	add.w	r1, r7, #32
 80084c2:	440a      	add	r2, r1
 80084c4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80084c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80084d4:	7ffb      	ldrb	r3, [r7, #31]
 80084d6:	7f7a      	ldrb	r2, [r7, #29]
 80084d8:	f107 0120 	add.w	r1, r7, #32
 80084dc:	440a      	add	r2, r1
 80084de:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80084e2:	fb02 f303 	mul.w	r3, r2, r3
 80084e6:	7f7a      	ldrb	r2, [r7, #29]
 80084e8:	f107 0120 	add.w	r1, r7, #32
 80084ec:	440a      	add	r2, r1
 80084ee:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80084f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084fe:	bf00      	nop
 8008500:	3724      	adds	r7, #36	; 0x24
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	08008584 	.word	0x08008584
 8008510:	0800858c 	.word	0x0800858c

08008514 <__libc_init_array>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	4e0d      	ldr	r6, [pc, #52]	; (800854c <__libc_init_array+0x38>)
 8008518:	4c0d      	ldr	r4, [pc, #52]	; (8008550 <__libc_init_array+0x3c>)
 800851a:	1ba4      	subs	r4, r4, r6
 800851c:	10a4      	asrs	r4, r4, #2
 800851e:	2500      	movs	r5, #0
 8008520:	42a5      	cmp	r5, r4
 8008522:	d109      	bne.n	8008538 <__libc_init_array+0x24>
 8008524:	4e0b      	ldr	r6, [pc, #44]	; (8008554 <__libc_init_array+0x40>)
 8008526:	4c0c      	ldr	r4, [pc, #48]	; (8008558 <__libc_init_array+0x44>)
 8008528:	f000 f820 	bl	800856c <_init>
 800852c:	1ba4      	subs	r4, r4, r6
 800852e:	10a4      	asrs	r4, r4, #2
 8008530:	2500      	movs	r5, #0
 8008532:	42a5      	cmp	r5, r4
 8008534:	d105      	bne.n	8008542 <__libc_init_array+0x2e>
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800853c:	4798      	blx	r3
 800853e:	3501      	adds	r5, #1
 8008540:	e7ee      	b.n	8008520 <__libc_init_array+0xc>
 8008542:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008546:	4798      	blx	r3
 8008548:	3501      	adds	r5, #1
 800854a:	e7f2      	b.n	8008532 <__libc_init_array+0x1e>
 800854c:	080085dc 	.word	0x080085dc
 8008550:	080085dc 	.word	0x080085dc
 8008554:	080085dc 	.word	0x080085dc
 8008558:	080085e0 	.word	0x080085e0

0800855c <memset>:
 800855c:	4402      	add	r2, r0
 800855e:	4603      	mov	r3, r0
 8008560:	4293      	cmp	r3, r2
 8008562:	d100      	bne.n	8008566 <memset+0xa>
 8008564:	4770      	bx	lr
 8008566:	f803 1b01 	strb.w	r1, [r3], #1
 800856a:	e7f9      	b.n	8008560 <memset+0x4>

0800856c <_init>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	bf00      	nop
 8008570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008572:	bc08      	pop	{r3}
 8008574:	469e      	mov	lr, r3
 8008576:	4770      	bx	lr

08008578 <_fini>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	bf00      	nop
 800857c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857e:	bc08      	pop	{r3}
 8008580:	469e      	mov	lr, r3
 8008582:	4770      	bx	lr
