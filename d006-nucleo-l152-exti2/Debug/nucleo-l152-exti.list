
nucleo-l152-exti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018bc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080019f8  080019f8  000119f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a1c  08001a1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a1c  08001a1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a1c  08001a1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001a30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001a30  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f14  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010a5  00000000  00000000  00024f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d0  00000000  00000000  00025ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000538  00000000  00000000  000265c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014c2d  00000000  00000000  00026af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004cab  00000000  00000000  0003b725  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082a7f  00000000  00000000  000403d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2e4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001650  00000000  00000000  000c2ecc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080019e0 	.word	0x080019e0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080019e0 	.word	0x080019e0

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 f9e5 	bl	800054e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f806 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000188:	f000 f87c 	bl	8000284 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800018c:	f000 f850 	bl	8000230 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000190:	e7fe      	b.n	8000190 <main+0x14>
	...

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b092      	sub	sp, #72	; 0x48
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0314 	add.w	r3, r7, #20
 800019e:	2234      	movs	r2, #52	; 0x34
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f001 fc14 	bl	80019d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	463b      	mov	r3, r7
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001b6:	4b1d      	ldr	r3, [pc, #116]	; (800022c <SystemClock_Config+0x98>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80001be:	4a1b      	ldr	r2, [pc, #108]	; (800022c <SystemClock_Config+0x98>)
 80001c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001c4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c6:	2302      	movs	r3, #2
 80001c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ce:	2310      	movs	r3, #16
 80001d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d2:	2302      	movs	r3, #2
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80001d6:	2300      	movs	r3, #0
 80001d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80001de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80001e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80001e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0314 	add.w	r3, r7, #20
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 fca8 	bl	8000b40 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001f6:	f000 f8ad 	bl	8000354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fe:	2303      	movs	r3, #3
 8000200:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800020e:	463b      	mov	r3, r7
 8000210:	2101      	movs	r1, #1
 8000212:	4618      	mov	r0, r3
 8000214:	f000 ffc4 	bl	80011a0 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800021e:	f000 f899 	bl	8000354 <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3748      	adds	r7, #72	; 0x48
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40007000 	.word	0x40007000

08000230 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000236:	4a12      	ldr	r2, [pc, #72]	; (8000280 <MX_USART2_UART_Init+0x50>)
 8000238:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <MX_USART2_UART_Init+0x4c>)
 800023c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000240:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <MX_USART2_UART_Init+0x4c>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800024e:	4b0b      	ldr	r3, [pc, #44]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000256:	220c      	movs	r2, #12
 8000258:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025a:	4b08      	ldr	r3, [pc, #32]	; (800027c <MX_USART2_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000268:	f001 f9b8 	bl	80015dc <HAL_UART_Init>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000272:	f000 f86f 	bl	8000354 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000028 	.word	0x20000028
 8000280:	40004400 	.word	0x40004400

08000284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b08a      	sub	sp, #40	; 0x28
 8000288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029a:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <MX_GPIO_Init+0xc0>)
 800029c:	69db      	ldr	r3, [r3, #28]
 800029e:	4a29      	ldr	r2, [pc, #164]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002a0:	f043 0304 	orr.w	r3, r3, #4
 80002a4:	61d3      	str	r3, [r2, #28]
 80002a6:	4b27      	ldr	r3, [pc, #156]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	f003 0304 	and.w	r3, r3, #4
 80002ae:	613b      	str	r3, [r7, #16]
 80002b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002b2:	4b24      	ldr	r3, [pc, #144]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	4a23      	ldr	r2, [pc, #140]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002b8:	f043 0320 	orr.w	r3, r3, #32
 80002bc:	61d3      	str	r3, [r2, #28]
 80002be:	4b21      	ldr	r3, [pc, #132]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	f003 0320 	and.w	r3, r3, #32
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002cc:	69db      	ldr	r3, [r3, #28]
 80002ce:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	61d3      	str	r3, [r2, #28]
 80002d6:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002d8:	69db      	ldr	r3, [r3, #28]
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e2:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002e4:	69db      	ldr	r3, [r3, #28]
 80002e6:	4a17      	ldr	r2, [pc, #92]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002e8:	f043 0302 	orr.w	r3, r3, #2
 80002ec:	61d3      	str	r3, [r2, #28]
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_GPIO_Init+0xc0>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	f003 0302 	and.w	r3, r3, #2
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2120      	movs	r1, #32
 80002fe:	4812      	ldr	r0, [pc, #72]	; (8000348 <MX_GPIO_Init+0xc4>)
 8000300:	f000 fc06 	bl	8000b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <MX_GPIO_Init+0xc8>)
 800030c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	4619      	mov	r1, r3
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <MX_GPIO_Init+0xcc>)
 800031a:	f000 fa6b 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800031e:	2320      	movs	r3, #32
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2300      	movs	r3, #0
 800032c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	4619      	mov	r1, r3
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <MX_GPIO_Init+0xc4>)
 8000336:	f000 fa5d 	bl	80007f4 <HAL_GPIO_Init>

}
 800033a:	bf00      	nop
 800033c:	3728      	adds	r7, #40	; 0x28
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40023800 	.word	0x40023800
 8000348:	40020000 	.word	0x40020000
 800034c:	10110000 	.word	0x10110000
 8000350:	40020800 	.word	0x40020800

08000354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <HAL_MspInit+0x5c>)
 8000368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800036a:	4a14      	ldr	r2, [pc, #80]	; (80003bc <HAL_MspInit+0x5c>)
 800036c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000370:	6253      	str	r3, [r2, #36]	; 0x24
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <HAL_MspInit+0x5c>)
 8000374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <HAL_MspInit+0x5c>)
 8000380:	6a1b      	ldr	r3, [r3, #32]
 8000382:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <HAL_MspInit+0x5c>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6213      	str	r3, [r2, #32]
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <HAL_MspInit+0x5c>)
 800038c:	6a1b      	ldr	r3, [r3, #32]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <HAL_MspInit+0x5c>)
 8000398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039a:	4a08      	ldr	r2, [pc, #32]	; (80003bc <HAL_MspInit+0x5c>)
 800039c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a0:	6253      	str	r3, [r2, #36]	; 0x24
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <HAL_MspInit+0x5c>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003ae:	2007      	movs	r0, #7
 80003b0:	f000 f9ec 	bl	800078c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40023800 	.word	0x40023800

080003c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c8:	f107 0314 	add.w	r3, r7, #20
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a17      	ldr	r2, [pc, #92]	; (800043c <HAL_UART_MspInit+0x7c>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d127      	bne.n	8000432 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <HAL_UART_MspInit+0x80>)
 80003e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e6:	4a16      	ldr	r2, [pc, #88]	; (8000440 <HAL_UART_MspInit+0x80>)
 80003e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ec:	6253      	str	r3, [r2, #36]	; 0x24
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <HAL_UART_MspInit+0x80>)
 80003f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f6:	613b      	str	r3, [r7, #16]
 80003f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <HAL_UART_MspInit+0x80>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a10      	ldr	r2, [pc, #64]	; (8000440 <HAL_UART_MspInit+0x80>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <HAL_UART_MspInit+0x80>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000412:	230c      	movs	r3, #12
 8000414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000416:	2302      	movs	r3, #2
 8000418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800041e:	2303      	movs	r3, #3
 8000420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000422:	2307      	movs	r3, #7
 8000424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	4619      	mov	r1, r3
 800042c:	4805      	ldr	r0, [pc, #20]	; (8000444 <HAL_UART_MspInit+0x84>)
 800042e:	f000 f9e1 	bl	80007f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000432:	bf00      	nop
 8000434:	3728      	adds	r7, #40	; 0x28
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40004400 	.word	0x40004400
 8000440:	40023800 	.word	0x40023800
 8000444:	40020000 	.word	0x40020000

08000448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <HardFault_Handler+0x4>

0800045a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <MemManage_Handler+0x4>

08000460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <BusFault_Handler+0x4>

08000466 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <UsageFault_Handler+0x4>

0800046c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000494:	f000 f8ae 	bl	80005f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <SystemInit+0x5c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a14      	ldr	r2, [pc, #80]	; (80004f8 <SystemInit+0x5c>)
 80004a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004aa:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <SystemInit+0x5c>)
 80004ae:	689a      	ldr	r2, [r3, #8]
 80004b0:	4911      	ldr	r1, [pc, #68]	; (80004f8 <SystemInit+0x5c>)
 80004b2:	4b12      	ldr	r3, [pc, #72]	; (80004fc <SystemInit+0x60>)
 80004b4:	4013      	ands	r3, r2
 80004b6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <SystemInit+0x5c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <SystemInit+0x5c>)
 80004be:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80004c2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80004c6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <SystemInit+0x5c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <SystemInit+0x5c>)
 80004ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004d2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <SystemInit+0x5c>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <SystemInit+0x5c>)
 80004da:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80004de:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <SystemInit+0x5c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <SystemInit+0x64>)
 80004e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004ec:	609a      	str	r2, [r3, #8]
#endif
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40023800 	.word	0x40023800
 80004fc:	88ffc00c 	.word	0x88ffc00c
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000504:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000506:	e003      	b.n	8000510 <LoopCopyDataInit>

08000508 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800050a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800050c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800050e:	3104      	adds	r1, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000510:	480a      	ldr	r0, [pc, #40]	; (800053c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000514:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000516:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000518:	d3f6      	bcc.n	8000508 <CopyDataInit>
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800051c:	e002      	b.n	8000524 <LoopFillZerobss>

0800051e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000520:	f842 3b04 	str.w	r3, [r2], #4

08000524 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000526:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000528:	d3f9      	bcc.n	800051e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800052a:	f7ff ffb7 	bl	800049c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800052e:	f001 fa2b 	bl	8001988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000532:	f7ff fe23 	bl	800017c <main>
  bx lr
 8000536:	4770      	bx	lr
  ldr r3, =_sidata
 8000538:	08001a24 	.word	0x08001a24
  ldr r0, =_sdata
 800053c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000540:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000544:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000548:	2000006c 	.word	0x2000006c

0800054c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC1_IRQHandler>

0800054e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000554:	2300      	movs	r3, #0
 8000556:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000558:	2003      	movs	r0, #3
 800055a:	f000 f917 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800055e:	2000      	movs	r0, #0
 8000560:	f000 f80e 	bl	8000580 <HAL_InitTick>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d002      	beq.n	8000570 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	e001      	b.n	8000574 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000570:	f7ff fef6 	bl	8000360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000574:	79fb      	ldrb	r3, [r7, #7]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <HAL_InitTick+0x68>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d022      	beq.n	80005da <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_InitTick+0x6c>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <HAL_InitTick+0x68>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f916 	bl	80007da <HAL_SYSTICK_Config>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10f      	bne.n	80005d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b0f      	cmp	r3, #15
 80005b8:	d809      	bhi.n	80005ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ba:	2200      	movs	r2, #0
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005c2:	f000 f8ee 	bl	80007a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <HAL_InitTick+0x70>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	e007      	b.n	80005de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	73fb      	strb	r3, [r7, #15]
 80005d2:	e004      	b.n	80005de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005d4:	2301      	movs	r3, #1
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	e001      	b.n	80005de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000008 	.word	0x20000008
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000004 	.word	0x20000004

080005f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_IncTick+0x1c>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_IncTick+0x20>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4413      	add	r3, r2
 8000602:	4a03      	ldr	r2, [pc, #12]	; (8000610 <HAL_IncTick+0x1c>)
 8000604:	6013      	str	r3, [r2, #0]
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000068 	.word	0x20000068
 8000614:	20000008 	.word	0x20000008

08000618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <HAL_GetTick+0x10>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000068 	.word	0x20000068

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800076c:	f7ff ff90 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff49 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff5e 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <__NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffb0 	bl	8000748 <SysTick_Config>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80007f4:	b480      	push	{r7}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800080a:	e160      	b.n	8000ace <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	fa01 f303 	lsl.w	r3, r1, r3
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	f000 8152 	beq.w	8000ac8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d003      	beq.n	8000834 <HAL_GPIO_Init+0x40>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2b12      	cmp	r3, #18
 8000832:	d123      	bne.n	800087c <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	08da      	lsrs	r2, r3, #3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3208      	adds	r2, #8
 800083c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000840:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	f003 0307 	and.w	r3, r3, #7
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	220f      	movs	r2, #15
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	4013      	ands	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	691a      	ldr	r2, [r3, #16]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	4313      	orrs	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	08da      	lsrs	r2, r3, #3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3208      	adds	r2, #8
 8000876:	6939      	ldr	r1, [r7, #16]
 8000878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	2203      	movs	r2, #3
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0203 	and.w	r2, r3, #3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d00b      	beq.n	80008d0 <HAL_GPIO_Init+0xdc>
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d007      	beq.n	80008d0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c4:	2b11      	cmp	r3, #17
 80008c6:	d003      	beq.n	80008d0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b12      	cmp	r3, #18
 80008ce:	d130      	bne.n	8000932 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000906:	2201      	movs	r2, #1
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	f003 0201 	and.w	r2, r3, #1
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2203      	movs	r2, #3
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 80ac 	beq.w	8000ac8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000970:	4b5d      	ldr	r3, [pc, #372]	; (8000ae8 <HAL_GPIO_Init+0x2f4>)
 8000972:	6a1b      	ldr	r3, [r3, #32]
 8000974:	4a5c      	ldr	r2, [pc, #368]	; (8000ae8 <HAL_GPIO_Init+0x2f4>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6213      	str	r3, [r2, #32]
 800097c:	4b5a      	ldr	r3, [pc, #360]	; (8000ae8 <HAL_GPIO_Init+0x2f4>)
 800097e:	6a1b      	ldr	r3, [r3, #32]
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000988:	4a58      	ldr	r2, [pc, #352]	; (8000aec <HAL_GPIO_Init+0x2f8>)
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	3302      	adds	r3, #2
 8000990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000994:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	f003 0303 	and.w	r3, r3, #3
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	220f      	movs	r2, #15
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a50      	ldr	r2, [pc, #320]	; (8000af0 <HAL_GPIO_Init+0x2fc>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d025      	beq.n	8000a00 <HAL_GPIO_Init+0x20c>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a4f      	ldr	r2, [pc, #316]	; (8000af4 <HAL_GPIO_Init+0x300>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d01f      	beq.n	80009fc <HAL_GPIO_Init+0x208>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a4e      	ldr	r2, [pc, #312]	; (8000af8 <HAL_GPIO_Init+0x304>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d019      	beq.n	80009f8 <HAL_GPIO_Init+0x204>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a4d      	ldr	r2, [pc, #308]	; (8000afc <HAL_GPIO_Init+0x308>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d013      	beq.n	80009f4 <HAL_GPIO_Init+0x200>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a4c      	ldr	r2, [pc, #304]	; (8000b00 <HAL_GPIO_Init+0x30c>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d00d      	beq.n	80009f0 <HAL_GPIO_Init+0x1fc>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a4b      	ldr	r2, [pc, #300]	; (8000b04 <HAL_GPIO_Init+0x310>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d007      	beq.n	80009ec <HAL_GPIO_Init+0x1f8>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a4a      	ldr	r2, [pc, #296]	; (8000b08 <HAL_GPIO_Init+0x314>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d101      	bne.n	80009e8 <HAL_GPIO_Init+0x1f4>
 80009e4:	2306      	movs	r3, #6
 80009e6:	e00c      	b.n	8000a02 <HAL_GPIO_Init+0x20e>
 80009e8:	2307      	movs	r3, #7
 80009ea:	e00a      	b.n	8000a02 <HAL_GPIO_Init+0x20e>
 80009ec:	2305      	movs	r3, #5
 80009ee:	e008      	b.n	8000a02 <HAL_GPIO_Init+0x20e>
 80009f0:	2304      	movs	r3, #4
 80009f2:	e006      	b.n	8000a02 <HAL_GPIO_Init+0x20e>
 80009f4:	2303      	movs	r3, #3
 80009f6:	e004      	b.n	8000a02 <HAL_GPIO_Init+0x20e>
 80009f8:	2302      	movs	r3, #2
 80009fa:	e002      	b.n	8000a02 <HAL_GPIO_Init+0x20e>
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <HAL_GPIO_Init+0x20e>
 8000a00:	2300      	movs	r3, #0
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	f002 0203 	and.w	r2, r2, #3
 8000a08:	0092      	lsls	r2, r2, #2
 8000a0a:	4093      	lsls	r3, r2
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a12:	4936      	ldr	r1, [pc, #216]	; (8000aec <HAL_GPIO_Init+0x2f8>)
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	3302      	adds	r3, #2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a20:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <HAL_GPIO_Init+0x318>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a44:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <HAL_GPIO_Init+0x318>)
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <HAL_GPIO_Init+0x318>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a6e:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <HAL_GPIO_Init+0x318>)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <HAL_GPIO_Init+0x318>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a98:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <HAL_GPIO_Init+0x318>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_GPIO_Init+0x318>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <HAL_GPIO_Init+0x318>)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f47f ae97 	bne.w	800080c <HAL_GPIO_Init+0x18>
  } 
}
 8000ade:	bf00      	nop
 8000ae0:	371c      	adds	r7, #28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40010000 	.word	0x40010000
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40020800 	.word	0x40020800
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40021400 	.word	0x40021400
 8000b08:	40021800 	.word	0x40021800
 8000b0c:	40010400 	.word	0x40010400

08000b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b20:	787b      	ldrb	r3, [r7, #1]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000b2c:	e003      	b.n	8000b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	041a      	lsls	r2, r3, #16
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	619a      	str	r2, [r3, #24]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e31d      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b52:	4b94      	ldr	r3, [pc, #592]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f003 030c 	and.w	r3, r3, #12
 8000b5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b5c:	4b91      	ldr	r3, [pc, #580]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b64:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d07b      	beq.n	8000c6a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d006      	beq.n	8000b86 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	2b0c      	cmp	r3, #12
 8000b7c:	d10f      	bne.n	8000b9e <HAL_RCC_OscConfig+0x5e>
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b84:	d10b      	bne.n	8000b9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b86:	4b87      	ldr	r3, [pc, #540]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d06a      	beq.n	8000c68 <HAL_RCC_OscConfig+0x128>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d166      	bne.n	8000c68 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e2f7      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d106      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x74>
 8000ba6:	4b7f      	ldr	r3, [pc, #508]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a7e      	ldr	r2, [pc, #504]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e02d      	b.n	8000c10 <HAL_RCC_OscConfig+0xd0>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10c      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x96>
 8000bbc:	4b79      	ldr	r3, [pc, #484]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a78      	ldr	r2, [pc, #480]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b76      	ldr	r3, [pc, #472]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a75      	ldr	r2, [pc, #468]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e01c      	b.n	8000c10 <HAL_RCC_OscConfig+0xd0>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b05      	cmp	r3, #5
 8000bdc:	d10c      	bne.n	8000bf8 <HAL_RCC_OscConfig+0xb8>
 8000bde:	4b71      	ldr	r3, [pc, #452]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a70      	ldr	r2, [pc, #448]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	4b6e      	ldr	r3, [pc, #440]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a6d      	ldr	r2, [pc, #436]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	e00b      	b.n	8000c10 <HAL_RCC_OscConfig+0xd0>
 8000bf8:	4b6a      	ldr	r3, [pc, #424]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a69      	ldr	r2, [pc, #420]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b67      	ldr	r3, [pc, #412]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a66      	ldr	r2, [pc, #408]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d013      	beq.n	8000c40 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c18:	f7ff fcfe 	bl	8000618 <HAL_GetTick>
 8000c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c20:	f7ff fcfa 	bl	8000618 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b64      	cmp	r3, #100	; 0x64
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e2ad      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c32:	4b5c      	ldr	r3, [pc, #368]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0f0      	beq.n	8000c20 <HAL_RCC_OscConfig+0xe0>
 8000c3e:	e014      	b.n	8000c6a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c40:	f7ff fcea 	bl	8000618 <HAL_GetTick>
 8000c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c48:	f7ff fce6 	bl	8000618 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b64      	cmp	r3, #100	; 0x64
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e299      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c5a:	4b52      	ldr	r3, [pc, #328]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f0      	bne.n	8000c48 <HAL_RCC_OscConfig+0x108>
 8000c66:	e000      	b.n	8000c6a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d05a      	beq.n	8000d2c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d005      	beq.n	8000c88 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2b0c      	cmp	r3, #12
 8000c80:	d119      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x176>
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d116      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c88:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d005      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x160>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d001      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e276      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca0:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	493d      	ldr	r1, [pc, #244]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb4:	e03a      	b.n	8000d2c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d020      	beq.n	8000d00 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cbe:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <HAL_RCC_OscConfig+0x268>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fca8 	bl	8000618 <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ccc:	f7ff fca4 	bl	8000618 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e257      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f0      	beq.n	8000ccc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cea:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	492a      	ldr	r1, [pc, #168]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	604b      	str	r3, [r1, #4]
 8000cfe:	e015      	b.n	8000d2c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <HAL_RCC_OscConfig+0x268>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d06:	f7ff fc87 	bl	8000618 <HAL_GetTick>
 8000d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d0c:	e008      	b.n	8000d20 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0e:	f7ff fc83 	bl	8000618 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e236      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f0      	bne.n	8000d0e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 80b8 	beq.w	8000eaa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d170      	bne.n	8000e22 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d005      	beq.n	8000d58 <HAL_RCC_OscConfig+0x218>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e21a      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a1a      	ldr	r2, [r3, #32]
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d921      	bls.n	8000dac <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fbd5 	bl	800151c <RCC_SetFlashLatencyFromMSIRange>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e208      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	4906      	ldr	r1, [pc, #24]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	061b      	lsls	r3, r3, #24
 8000d9c:	4901      	ldr	r1, [pc, #4]	; (8000da4 <HAL_RCC_OscConfig+0x264>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	604b      	str	r3, [r1, #4]
 8000da2:	e020      	b.n	8000de6 <HAL_RCC_OscConfig+0x2a6>
 8000da4:	40023800 	.word	0x40023800
 8000da8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dac:	4ba4      	ldr	r3, [pc, #656]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	49a1      	ldr	r1, [pc, #644]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dbe:	4ba0      	ldr	r3, [pc, #640]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	061b      	lsls	r3, r3, #24
 8000dcc:	499c      	ldr	r1, [pc, #624]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fba0 	bl	800151c <RCC_SetFlashLatencyFromMSIRange>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e1d3      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	0b5b      	lsrs	r3, r3, #13
 8000dec:	3301      	adds	r3, #1
 8000dee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000df6:	4a92      	ldr	r2, [pc, #584]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000df8:	6892      	ldr	r2, [r2, #8]
 8000dfa:	0912      	lsrs	r2, r2, #4
 8000dfc:	f002 020f 	and.w	r2, r2, #15
 8000e00:	4990      	ldr	r1, [pc, #576]	; (8001044 <HAL_RCC_OscConfig+0x504>)
 8000e02:	5c8a      	ldrb	r2, [r1, r2]
 8000e04:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000e06:	4a90      	ldr	r2, [pc, #576]	; (8001048 <HAL_RCC_OscConfig+0x508>)
 8000e08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e0a:	4b90      	ldr	r3, [pc, #576]	; (800104c <HAL_RCC_OscConfig+0x50c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fbb6 	bl	8000580 <HAL_InitTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d045      	beq.n	8000eaa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	e1b5      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d029      	beq.n	8000e7e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e2a:	4b89      	ldr	r3, [pc, #548]	; (8001050 <HAL_RCC_OscConfig+0x510>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e30:	f7ff fbf2 	bl	8000618 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e38:	f7ff fbee 	bl	8000618 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e1a1      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e4a:	4b7d      	ldr	r3, [pc, #500]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e56:	4b7a      	ldr	r3, [pc, #488]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	4977      	ldr	r1, [pc, #476]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e68:	4b75      	ldr	r3, [pc, #468]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	061b      	lsls	r3, r3, #24
 8000e76:	4972      	ldr	r1, [pc, #456]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	604b      	str	r3, [r1, #4]
 8000e7c:	e015      	b.n	8000eaa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e7e:	4b74      	ldr	r3, [pc, #464]	; (8001050 <HAL_RCC_OscConfig+0x510>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e84:	f7ff fbc8 	bl	8000618 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fbc4 	bl	8000618 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e177      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e9e:	4b68      	ldr	r3, [pc, #416]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f0      	bne.n	8000e8c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d030      	beq.n	8000f18 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d016      	beq.n	8000eec <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ebe:	4b65      	ldr	r3, [pc, #404]	; (8001054 <HAL_RCC_OscConfig+0x514>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec4:	f7ff fba8 	bl	8000618 <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fba4 	bl	8000618 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e157      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ede:	4b58      	ldr	r3, [pc, #352]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f0      	beq.n	8000ecc <HAL_RCC_OscConfig+0x38c>
 8000eea:	e015      	b.n	8000f18 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eec:	4b59      	ldr	r3, [pc, #356]	; (8001054 <HAL_RCC_OscConfig+0x514>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fb91 	bl	8000618 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000efa:	f7ff fb8d 	bl	8000618 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e140      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000f0c:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f0      	bne.n	8000efa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80b5 	beq.w	8001090 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10d      	bne.n	8000f52 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b42      	ldr	r3, [pc, #264]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	4a41      	ldr	r2, [pc, #260]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6253      	str	r3, [r2, #36]	; 0x24
 8000f42:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f52:	4b41      	ldr	r3, [pc, #260]	; (8001058 <HAL_RCC_OscConfig+0x518>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d118      	bne.n	8000f90 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <HAL_RCC_OscConfig+0x518>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a3d      	ldr	r2, [pc, #244]	; (8001058 <HAL_RCC_OscConfig+0x518>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fb55 	bl	8000618 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f72:	f7ff fb51 	bl	8000618 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b64      	cmp	r3, #100	; 0x64
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e104      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <HAL_RCC_OscConfig+0x518>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x466>
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9c:	4a28      	ldr	r2, [pc, #160]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6353      	str	r3, [r2, #52]	; 0x34
 8000fa4:	e02d      	b.n	8001002 <HAL_RCC_OscConfig+0x4c2>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x488>
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	4a23      	ldr	r2, [pc, #140]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fb8:	6353      	str	r3, [r2, #52]	; 0x34
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbe:	4a20      	ldr	r2, [pc, #128]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fc4:	6353      	str	r3, [r2, #52]	; 0x34
 8000fc6:	e01c      	b.n	8001002 <HAL_RCC_OscConfig+0x4c2>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d10c      	bne.n	8000fea <HAL_RCC_OscConfig+0x4aa>
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd4:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fda:	6353      	str	r3, [r2, #52]	; 0x34
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe6:	6353      	str	r3, [r2, #52]	; 0x34
 8000fe8:	e00b      	b.n	8001002 <HAL_RCC_OscConfig+0x4c2>
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ff4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffa:	4a11      	ldr	r2, [pc, #68]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 8000ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001000:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d015      	beq.n	8001036 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100a:	f7ff fb05 	bl	8000618 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f7ff fb01 	bl	8000618 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e0b2      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_RCC_OscConfig+0x500>)
 800102a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0ee      	beq.n	8001012 <HAL_RCC_OscConfig+0x4d2>
 8001034:	e023      	b.n	800107e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff faef 	bl	8000618 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800103c:	e019      	b.n	8001072 <HAL_RCC_OscConfig+0x532>
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	08001a04 	.word	0x08001a04
 8001048:	20000000 	.word	0x20000000
 800104c:	20000004 	.word	0x20000004
 8001050:	42470020 	.word	0x42470020
 8001054:	42470680 	.word	0x42470680
 8001058:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105c:	f7ff fadc 	bl	8000618 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	f241 3288 	movw	r2, #5000	; 0x1388
 800106a:	4293      	cmp	r3, r2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e08d      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001072:	4b49      	ldr	r3, [pc, #292]	; (8001198 <HAL_RCC_OscConfig+0x658>)
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1ee      	bne.n	800105c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d105      	bne.n	8001090 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001084:	4b44      	ldr	r3, [pc, #272]	; (8001198 <HAL_RCC_OscConfig+0x658>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	4a43      	ldr	r2, [pc, #268]	; (8001198 <HAL_RCC_OscConfig+0x658>)
 800108a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800108e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	2b00      	cmp	r3, #0
 8001096:	d079      	beq.n	800118c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2b0c      	cmp	r3, #12
 800109c:	d056      	beq.n	800114c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d13b      	bne.n	800111e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a6:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_RCC_OscConfig+0x65c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fab4 	bl	8000618 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b4:	f7ff fab0 	bl	8000618 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e063      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <HAL_RCC_OscConfig+0x658>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_RCC_OscConfig+0x658>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	4319      	orrs	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	430b      	orrs	r3, r1
 80010ea:	492b      	ldr	r1, [pc, #172]	; (8001198 <HAL_RCC_OscConfig+0x658>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_RCC_OscConfig+0x65c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fa8f 	bl	8000618 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010fe:	f7ff fa8b 	bl	8000618 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e03e      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_RCC_OscConfig+0x658>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x5be>
 800111c:	e036      	b.n	800118c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <HAL_RCC_OscConfig+0x65c>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fa78 	bl	8000618 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112c:	f7ff fa74 	bl	8000618 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e027      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_RCC_OscConfig+0x658>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x5ec>
 800114a:	e01f      	b.n	800118c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e01a      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_RCC_OscConfig+0x658>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	429a      	cmp	r2, r3
 800116a:	d10d      	bne.n	8001188 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001176:	429a      	cmp	r2, r3
 8001178:	d106      	bne.n	8001188 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	42470060 	.word	0x42470060

080011a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e11a      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011b4:	4b8f      	ldr	r3, [pc, #572]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d919      	bls.n	80011f6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_RCC_ClockConfig+0x34>
 80011c8:	4b8a      	ldr	r3, [pc, #552]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a89      	ldr	r2, [pc, #548]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b87      	ldr	r3, [pc, #540]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 0201 	bic.w	r2, r3, #1
 80011dc:	4985      	ldr	r1, [pc, #532]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e4:	4b83      	ldr	r3, [pc, #524]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e0f9      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d008      	beq.n	8001214 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001202:	4b7d      	ldr	r3, [pc, #500]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	497a      	ldr	r1, [pc, #488]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 8001210:	4313      	orrs	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 808e 	beq.w	800133e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d107      	bne.n	800123a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800122a:	4b73      	ldr	r3, [pc, #460]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d121      	bne.n	800127a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e0d7      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d107      	bne.n	8001252 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001242:	4b6d      	ldr	r3, [pc, #436]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d115      	bne.n	800127a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e0cb      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d107      	bne.n	800126a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800125a:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0bf      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800126a:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0b7      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800127a:	4b5f      	ldr	r3, [pc, #380]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f023 0203 	bic.w	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	495c      	ldr	r1, [pc, #368]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800128c:	f7ff f9c4 	bl	8000618 <HAL_GetTick>
 8001290:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d112      	bne.n	80012c0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800129c:	f7ff f9bc 	bl	8000618 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e09b      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b2:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d1ee      	bne.n	800129c <HAL_RCC_ClockConfig+0xfc>
 80012be:	e03e      	b.n	800133e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d112      	bne.n	80012ee <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ca:	f7ff f9a5 	bl	8000618 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e084      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e0:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b0c      	cmp	r3, #12
 80012ea:	d1ee      	bne.n	80012ca <HAL_RCC_ClockConfig+0x12a>
 80012ec:	e027      	b.n	800133e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d11d      	bne.n	8001332 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012f6:	e00a      	b.n	800130e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f8:	f7ff f98e 	bl	8000618 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	; 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e06d      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800130e:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b04      	cmp	r3, #4
 8001318:	d1ee      	bne.n	80012f8 <HAL_RCC_ClockConfig+0x158>
 800131a:	e010      	b.n	800133e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131c:	f7ff f97c 	bl	8000618 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f241 3288 	movw	r2, #5000	; 0x1388
 800132a:	4293      	cmp	r3, r2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e05b      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ee      	bne.n	800131c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d219      	bcs.n	8001380 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d105      	bne.n	800135e <HAL_RCC_ClockConfig+0x1be>
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a27      	ldr	r2, [pc, #156]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 0201 	bic.w	r2, r3, #1
 8001366:	4923      	ldr	r1, [pc, #140]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_RCC_ClockConfig+0x254>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d001      	beq.n	8001380 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e034      	b.n	80013ea <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d008      	beq.n	800139e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4917      	ldr	r1, [pc, #92]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 800139a:	4313      	orrs	r3, r2
 800139c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	490f      	ldr	r1, [pc, #60]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013be:	f000 f823 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 80013c2:	4601      	mov	r1, r0
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_RCC_ClockConfig+0x258>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <HAL_RCC_ClockConfig+0x25c>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	fa21 f303 	lsr.w	r3, r1, r3
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_RCC_ClockConfig+0x260>)
 80013d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_RCC_ClockConfig+0x264>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8ce 	bl	8000580 <HAL_InitTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80013e8:	7afb      	ldrb	r3, [r7, #11]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00
 80013f8:	40023800 	.word	0x40023800
 80013fc:	08001a04 	.word	0x08001a04
 8001400:	20000000 	.word	0x20000000
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b08      	cmp	r3, #8
 800141c:	d006      	beq.n	800142c <HAL_RCC_GetSysClockFreq+0x24>
 800141e:	2b0c      	cmp	r3, #12
 8001420:	d007      	beq.n	8001432 <HAL_RCC_GetSysClockFreq+0x2a>
 8001422:	2b04      	cmp	r3, #4
 8001424:	d12c      	bne.n	8001480 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001428:	613b      	str	r3, [r7, #16]
      break;
 800142a:	e037      	b.n	800149c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800142e:	613b      	str	r3, [r7, #16]
      break;
 8001430:	e034      	b.n	800149c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	0c9b      	lsrs	r3, r3, #18
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_RCC_GetSysClockFreq+0xac>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	0d9b      	lsrs	r3, r3, #22
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	3301      	adds	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800145c:	fb02 f203 	mul.w	r2, r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e007      	b.n	800147a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800146e:	fb02 f203 	mul.w	r2, r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	fbb2 f3f3 	udiv	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	613b      	str	r3, [r7, #16]
      break;
 800147e:	e00d      	b.n	800149c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	0b5b      	lsrs	r3, r3, #13
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	613b      	str	r3, [r7, #16]
      break;
 800149a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800149c:	693b      	ldr	r3, [r7, #16]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40023800 	.word	0x40023800
 80014ac:	00f42400 	.word	0x00f42400
 80014b0:	007a1200 	.word	0x007a1200
 80014b4:	080019f8 	.word	0x080019f8

080014b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000000 	.word	0x20000000

080014cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014d0:	f7ff fff2 	bl	80014b8 <HAL_RCC_GetHCLKFreq>
 80014d4:	4601      	mov	r1, r0
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	4a03      	ldr	r2, [pc, #12]	; (80014f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	08001a14 	.word	0x08001a14

080014f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014f8:	f7ff ffde 	bl	80014b8 <HAL_RCC_GetHCLKFreq>
 80014fc:	4601      	mov	r1, r0
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	0adb      	lsrs	r3, r3, #11
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	08001a14 	.word	0x08001a14

0800151c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d12c      	bne.n	800158e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e016      	b.n	800157a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001556:	6253      	str	r3, [r2, #36]	; 0x24
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800156c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001578:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001580:	d105      	bne.n	800158e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001588:	d101      	bne.n	800158e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800158a:	2301      	movs	r3, #1
 800158c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 0201 	bic.w	r2, r3, #1
 80015a8:	490b      	ldr	r1, [pc, #44]	; (80015d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e03f      	b.n	800166e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d106      	bne.n	8001608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7fe fedc 	bl	80003c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2224      	movs	r2, #36	; 0x24
 800160c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800161e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f829 	bl	8001678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2220      	movs	r2, #32
 8001660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80016b8:	f023 030c 	bic.w	r3, r3, #12
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	430b      	orrs	r3, r1
 80016c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016e4:	f040 80a5 	bne.w	8001832 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4aa4      	ldr	r2, [pc, #656]	; (8001980 <UART_SetConfig+0x308>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d14f      	bne.n	8001792 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80016f2:	f7ff feff 	bl	80014f4 <HAL_RCC_GetPCLK2Freq>
 80016f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009a      	lsls	r2, r3, #2
 8001702:	441a      	add	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4a9d      	ldr	r2, [pc, #628]	; (8001984 <UART_SetConfig+0x30c>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	095b      	lsrs	r3, r3, #5
 8001716:	0119      	lsls	r1, r3, #4
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	009a      	lsls	r2, r3, #2
 8001722:	441a      	add	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fbb2 f2f3 	udiv	r2, r2, r3
 800172e:	4b95      	ldr	r3, [pc, #596]	; (8001984 <UART_SetConfig+0x30c>)
 8001730:	fba3 0302 	umull	r0, r3, r3, r2
 8001734:	095b      	lsrs	r3, r3, #5
 8001736:	2064      	movs	r0, #100	; 0x64
 8001738:	fb00 f303 	mul.w	r3, r0, r3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	3332      	adds	r3, #50	; 0x32
 8001742:	4a90      	ldr	r2, [pc, #576]	; (8001984 <UART_SetConfig+0x30c>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	095b      	lsrs	r3, r3, #5
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001750:	4419      	add	r1, r3
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	009a      	lsls	r2, r3, #2
 800175c:	441a      	add	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fbb2 f2f3 	udiv	r2, r2, r3
 8001768:	4b86      	ldr	r3, [pc, #536]	; (8001984 <UART_SetConfig+0x30c>)
 800176a:	fba3 0302 	umull	r0, r3, r3, r2
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2064      	movs	r0, #100	; 0x64
 8001772:	fb00 f303 	mul.w	r3, r0, r3
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	3332      	adds	r3, #50	; 0x32
 800177c:	4a81      	ldr	r2, [pc, #516]	; (8001984 <UART_SetConfig+0x30c>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	f003 0207 	and.w	r2, r3, #7
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	440a      	add	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001790:	e0f1      	b.n	8001976 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001792:	f7ff fe9b 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
 8001796:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	009a      	lsls	r2, r3, #2
 80017a2:	441a      	add	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4a75      	ldr	r2, [pc, #468]	; (8001984 <UART_SetConfig+0x30c>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	095b      	lsrs	r3, r3, #5
 80017b6:	0119      	lsls	r1, r3, #4
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009a      	lsls	r2, r3, #2
 80017c2:	441a      	add	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80017ce:	4b6d      	ldr	r3, [pc, #436]	; (8001984 <UART_SetConfig+0x30c>)
 80017d0:	fba3 0302 	umull	r0, r3, r3, r2
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	2064      	movs	r0, #100	; 0x64
 80017d8:	fb00 f303 	mul.w	r3, r0, r3
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	3332      	adds	r3, #50	; 0x32
 80017e2:	4a68      	ldr	r2, [pc, #416]	; (8001984 <UART_SetConfig+0x30c>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	095b      	lsrs	r3, r3, #5
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80017f0:	4419      	add	r1, r3
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	009a      	lsls	r2, r3, #2
 80017fc:	441a      	add	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fbb2 f2f3 	udiv	r2, r2, r3
 8001808:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <UART_SetConfig+0x30c>)
 800180a:	fba3 0302 	umull	r0, r3, r3, r2
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2064      	movs	r0, #100	; 0x64
 8001812:	fb00 f303 	mul.w	r3, r0, r3
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	3332      	adds	r3, #50	; 0x32
 800181c:	4a59      	ldr	r2, [pc, #356]	; (8001984 <UART_SetConfig+0x30c>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	f003 0207 	and.w	r2, r3, #7
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	440a      	add	r2, r1
 800182e:	609a      	str	r2, [r3, #8]
}
 8001830:	e0a1      	b.n	8001976 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a52      	ldr	r2, [pc, #328]	; (8001980 <UART_SetConfig+0x308>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d14e      	bne.n	80018da <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 800183c:	f7ff fe5a 	bl	80014f4 <HAL_RCC_GetPCLK2Freq>
 8001840:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	009a      	lsls	r2, r3, #2
 800184c:	441a      	add	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	4a4a      	ldr	r2, [pc, #296]	; (8001984 <UART_SetConfig+0x30c>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	0119      	lsls	r1, r3, #4
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	009a      	lsls	r2, r3, #2
 800186c:	441a      	add	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	fbb2 f2f3 	udiv	r2, r2, r3
 8001878:	4b42      	ldr	r3, [pc, #264]	; (8001984 <UART_SetConfig+0x30c>)
 800187a:	fba3 0302 	umull	r0, r3, r3, r2
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2064      	movs	r0, #100	; 0x64
 8001882:	fb00 f303 	mul.w	r3, r0, r3
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	3332      	adds	r3, #50	; 0x32
 800188c:	4a3d      	ldr	r2, [pc, #244]	; (8001984 <UART_SetConfig+0x30c>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001898:	4419      	add	r1, r3
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	009a      	lsls	r2, r3, #2
 80018a4:	441a      	add	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80018b0:	4b34      	ldr	r3, [pc, #208]	; (8001984 <UART_SetConfig+0x30c>)
 80018b2:	fba3 0302 	umull	r0, r3, r3, r2
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2064      	movs	r0, #100	; 0x64
 80018ba:	fb00 f303 	mul.w	r3, r0, r3
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	3332      	adds	r3, #50	; 0x32
 80018c4:	4a2f      	ldr	r2, [pc, #188]	; (8001984 <UART_SetConfig+0x30c>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	f003 020f 	and.w	r2, r3, #15
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	440a      	add	r2, r1
 80018d6:	609a      	str	r2, [r3, #8]
}
 80018d8:	e04d      	b.n	8001976 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80018da:	f7ff fdf7 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
 80018de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	009a      	lsls	r2, r3, #2
 80018ea:	441a      	add	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4a23      	ldr	r2, [pc, #140]	; (8001984 <UART_SetConfig+0x30c>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	0119      	lsls	r1, r3, #4
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	009a      	lsls	r2, r3, #2
 800190a:	441a      	add	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	fbb2 f2f3 	udiv	r2, r2, r3
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <UART_SetConfig+0x30c>)
 8001918:	fba3 0302 	umull	r0, r3, r3, r2
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	2064      	movs	r0, #100	; 0x64
 8001920:	fb00 f303 	mul.w	r3, r0, r3
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	3332      	adds	r3, #50	; 0x32
 800192a:	4a16      	ldr	r2, [pc, #88]	; (8001984 <UART_SetConfig+0x30c>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	095b      	lsrs	r3, r3, #5
 8001932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001936:	4419      	add	r1, r3
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	009a      	lsls	r2, r3, #2
 8001942:	441a      	add	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	fbb2 f2f3 	udiv	r2, r2, r3
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <UART_SetConfig+0x30c>)
 8001950:	fba3 0302 	umull	r0, r3, r3, r2
 8001954:	095b      	lsrs	r3, r3, #5
 8001956:	2064      	movs	r0, #100	; 0x64
 8001958:	fb00 f303 	mul.w	r3, r0, r3
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	3332      	adds	r3, #50	; 0x32
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <UART_SetConfig+0x30c>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	f003 020f 	and.w	r2, r3, #15
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	440a      	add	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40013800 	.word	0x40013800
 8001984:	51eb851f 	.word	0x51eb851f

08001988 <__libc_init_array>:
 8001988:	b570      	push	{r4, r5, r6, lr}
 800198a:	2500      	movs	r5, #0
 800198c:	4e0c      	ldr	r6, [pc, #48]	; (80019c0 <__libc_init_array+0x38>)
 800198e:	4c0d      	ldr	r4, [pc, #52]	; (80019c4 <__libc_init_array+0x3c>)
 8001990:	1ba4      	subs	r4, r4, r6
 8001992:	10a4      	asrs	r4, r4, #2
 8001994:	42a5      	cmp	r5, r4
 8001996:	d109      	bne.n	80019ac <__libc_init_array+0x24>
 8001998:	f000 f822 	bl	80019e0 <_init>
 800199c:	2500      	movs	r5, #0
 800199e:	4e0a      	ldr	r6, [pc, #40]	; (80019c8 <__libc_init_array+0x40>)
 80019a0:	4c0a      	ldr	r4, [pc, #40]	; (80019cc <__libc_init_array+0x44>)
 80019a2:	1ba4      	subs	r4, r4, r6
 80019a4:	10a4      	asrs	r4, r4, #2
 80019a6:	42a5      	cmp	r5, r4
 80019a8:	d105      	bne.n	80019b6 <__libc_init_array+0x2e>
 80019aa:	bd70      	pop	{r4, r5, r6, pc}
 80019ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019b0:	4798      	blx	r3
 80019b2:	3501      	adds	r5, #1
 80019b4:	e7ee      	b.n	8001994 <__libc_init_array+0xc>
 80019b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ba:	4798      	blx	r3
 80019bc:	3501      	adds	r5, #1
 80019be:	e7f2      	b.n	80019a6 <__libc_init_array+0x1e>
 80019c0:	08001a1c 	.word	0x08001a1c
 80019c4:	08001a1c 	.word	0x08001a1c
 80019c8:	08001a1c 	.word	0x08001a1c
 80019cc:	08001a20 	.word	0x08001a20

080019d0 <memset>:
 80019d0:	4603      	mov	r3, r0
 80019d2:	4402      	add	r2, r0
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d100      	bne.n	80019da <memset+0xa>
 80019d8:	4770      	bx	lr
 80019da:	f803 1b01 	strb.w	r1, [r3], #1
 80019de:	e7f9      	b.n	80019d4 <memset+0x4>

080019e0 <_init>:
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e2:	bf00      	nop
 80019e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019e6:	bc08      	pop	{r3}
 80019e8:	469e      	mov	lr, r3
 80019ea:	4770      	bx	lr

080019ec <_fini>:
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ee:	bf00      	nop
 80019f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f2:	bc08      	pop	{r3}
 80019f4:	469e      	mov	lr, r3
 80019f6:	4770      	bx	lr
